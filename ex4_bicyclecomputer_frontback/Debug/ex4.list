
ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d7c  08001d7c  00011d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001da8  08001da8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001da8  08001da8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001da8  08001da8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001da8  08001da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dac  08001dac  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000038  08001de8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08001de8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b888  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000197b  00000000  00000000  0002b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac8  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139cd  00000000  00000000  0002e840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a17  00000000  00000000  0004220d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e42f  00000000  00000000  00049c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8053  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d0c  00000000  00000000  000b80d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00007876  00000000  00000000  000b9ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d64 	.word	0x08001d64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08001d64 	.word	0x08001d64

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000154:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <MX_GPIO_Init+0x48>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	f042 0204 	orr.w	r2, r2, #4
 800015c:	619a      	str	r2, [r3, #24]
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	f003 0304 	and.w	r3, r3, #4
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pins : KeyRound_Pin KeyOutputMode_Pin */
  GPIO_InitStruct.Pin = KeyRound_Pin|KeyOutputMode_Pin;
 8000168:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800016c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <MX_GPIO_Init+0x4c>)
 8000170:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000172:	2301      	movs	r3, #1
 8000174:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000176:	a902      	add	r1, sp, #8
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <MX_GPIO_Init+0x50>)
 800017a:	f000 fd4b 	bl	8000c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800017e:	4622      	mov	r2, r4
 8000180:	4621      	mov	r1, r4
 8000182:	2028      	movs	r0, #40	; 0x28
 8000184:	f000 fb7a 	bl	800087c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000188:	2028      	movs	r0, #40	; 0x28
 800018a:	f000 fbab 	bl	80008e4 <HAL_NVIC_EnableIRQ>

}
 800018e:	b006      	add	sp, #24
 8000190:	bd10      	pop	{r4, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000
 8000198:	10210000 	.word	0x10210000
 800019c:	40010800 	.word	0x40010800

080001a0 <MX_DMA_Init>:
{
 80001a0:	b500      	push	{lr}
 80001a2:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <MX_DMA_Init+0x30>)
 80001a6:	695a      	ldr	r2, [r3, #20]
 80001a8:	f042 0201 	orr.w	r2, r2, #1
 80001ac:	615a      	str	r2, [r3, #20]
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	f003 0301 	and.w	r3, r3, #1
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80001b8:	2200      	movs	r2, #0
 80001ba:	4611      	mov	r1, r2
 80001bc:	200e      	movs	r0, #14
 80001be:	f000 fb5d 	bl	800087c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80001c2:	200e      	movs	r0, #14
 80001c4:	f000 fb8e 	bl	80008e4 <HAL_NVIC_EnableIRQ>
}
 80001c8:	b003      	add	sp, #12
 80001ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000

080001d4 <MX_TIM3_Init>:
{
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001d8:	2400      	movs	r4, #0
 80001da:	9402      	str	r4, [sp, #8]
 80001dc:	9403      	str	r4, [sp, #12]
 80001de:	9404      	str	r4, [sp, #16]
 80001e0:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001e2:	9400      	str	r4, [sp, #0]
 80001e4:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 80001e6:	4d0f      	ldr	r5, [pc, #60]	; (8000224 <MX_TIM3_Init+0x50>)
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_TIM3_Init+0x54>)
 80001ea:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 32000-1;
 80001ec:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80001f0:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001f2:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 1000-1;
 80001f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001f8:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001fa:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001fc:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80001fe:	4628      	mov	r0, r5
 8000200:	f001 fa66 	bl	80016d0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000208:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800020a:	a902      	add	r1, sp, #8
 800020c:	4628      	mov	r0, r5
 800020e:	f001 fa83 	bl	8001718 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000212:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000214:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000216:	4669      	mov	r1, sp
 8000218:	4628      	mov	r0, r5
 800021a:	f001 faea 	bl	80017f2 <HAL_TIMEx_MasterConfigSynchronization>
}
 800021e:	b007      	add	sp, #28
 8000220:	bd30      	pop	{r4, r5, pc}
 8000222:	bf00      	nop
 8000224:	2000009c 	.word	0x2000009c
 8000228:	40000400 	.word	0x40000400

0800022c <MX_TIM4_Init>:
{
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000230:	2400      	movs	r4, #0
 8000232:	9402      	str	r4, [sp, #8]
 8000234:	9403      	str	r4, [sp, #12]
 8000236:	9404      	str	r4, [sp, #16]
 8000238:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023a:	9400      	str	r4, [sp, #0]
 800023c:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 800023e:	4d0f      	ldr	r5, [pc, #60]	; (800027c <MX_TIM4_Init+0x50>)
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <MX_TIM4_Init+0x54>)
 8000242:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 32000-1;
 8000244:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000248:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024a:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 10000-1;
 800024c:	f242 730f 	movw	r3, #9999	; 0x270f
 8000250:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000252:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000254:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000256:	4628      	mov	r0, r5
 8000258:	f001 fa3a 	bl	80016d0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000262:	a902      	add	r1, sp, #8
 8000264:	4628      	mov	r0, r5
 8000266:	f001 fa57 	bl	8001718 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800026a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800026c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800026e:	4669      	mov	r1, sp
 8000270:	4628      	mov	r0, r5
 8000272:	f001 fabe 	bl	80017f2 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000276:	b007      	add	sp, #28
 8000278:	bd30      	pop	{r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	2000005c 	.word	0x2000005c
 8000280:	40000800 	.word	0x40000800

08000284 <MX_USART1_UART_Init>:
{
 8000284:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <MX_USART1_UART_Init+0x24>)
 8000288:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x28>)
 800028a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800028c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000290:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000292:	2300      	movs	r3, #0
 8000294:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000296:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000298:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800029a:	220c      	movs	r2, #12
 800029c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002a2:	f001 fb7d 	bl	80019a0 <HAL_UART_Init>
}
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	20000128 	.word	0x20000128
 80002ac:	40013800 	.word	0x40013800

080002b0 <SystemClock_Config>:
{
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b4:	2220      	movs	r2, #32
 80002b6:	2100      	movs	r1, #0
 80002b8:	a807      	add	r0, sp, #28
 80002ba:	f001 fd4b 	bl	8001d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2400      	movs	r4, #0
 80002c0:	9401      	str	r4, [sp, #4]
 80002c2:	9402      	str	r4, [sp, #8]
 80002c4:	9403      	str	r4, [sp, #12]
 80002c6:	9404      	str	r4, [sp, #16]
 80002c8:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2502      	movs	r5, #2
 80002cc:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2601      	movs	r6, #1
 80002d0:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002d8:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002dc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	a806      	add	r0, sp, #24
 80002e0:	f000 fda2 	bl	8000e28 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f0:	4631      	mov	r1, r6
 80002f2:	a801      	add	r0, sp, #4
 80002f4:	f000 ffd8 	bl	80012a8 <HAL_RCC_ClockConfig>
}
 80002f8:	b010      	add	sp, #64	; 0x40
 80002fa:	bd70      	pop	{r4, r5, r6, pc}

080002fc <main>:
{
 80002fc:	b508      	push	{r3, lr}
  HAL_Init();
 80002fe:	f000 fa93 	bl	8000828 <HAL_Init>
  SystemClock_Config();
 8000302:	f7ff ffd5 	bl	80002b0 <SystemClock_Config>
  MX_GPIO_Init();
 8000306:	f7ff ff21 	bl	800014c <MX_GPIO_Init>
  MX_DMA_Init();
 800030a:	f7ff ff49 	bl	80001a0 <MX_DMA_Init>
  MX_TIM3_Init();
 800030e:	f7ff ff61 	bl	80001d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000312:	f7ff ff8b 	bl	800022c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000316:	f7ff ffb5 	bl	8000284 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 800031a:	4868      	ldr	r0, [pc, #416]	; (80004bc <main+0x1c0>)
 800031c:	f001 f8cb 	bl	80014b6 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000320:	4867      	ldr	r0, [pc, #412]	; (80004c0 <main+0x1c4>)
 8000322:	f001 f8c8 	bl	80014b6 <HAL_TIM_Base_Start_IT>
 8000326:	e05b      	b.n	80003e0 <main+0xe4>
        tmp = RoundCount;
 8000328:	4b66      	ldr	r3, [pc, #408]	; (80004c4 <main+0x1c8>)
 800032a:	8019      	strh	r1, [r3, #0]
        dcnt = 0;
 800032c:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <main+0x1cc>)
 800032e:	701a      	strb	r2, [r3, #0]
        USART_SendBuf_D[USART_SBUF_DIGIT_D] = 0 + 48;
 8000330:	4b66      	ldr	r3, [pc, #408]	; (80004cc <main+0x1d0>)
 8000332:	2230      	movs	r2, #48	; 0x30
 8000334:	739a      	strb	r2, [r3, #14]
        while(tmp != 0)
 8000336:	e012      	b.n	800035e <main+0x62>
          USART_SendBuf_D[USART_SBUF_DIGIT_D - (dcnt++)] = tmp % 10 + 48;
 8000338:	4963      	ldr	r1, [pc, #396]	; (80004c8 <main+0x1cc>)
 800033a:	780a      	ldrb	r2, [r1, #0]
 800033c:	1c50      	adds	r0, r2, #1
 800033e:	7008      	strb	r0, [r1, #0]
 8000340:	f1c2 010e 	rsb	r1, r2, #14
 8000344:	4a62      	ldr	r2, [pc, #392]	; (80004d0 <main+0x1d4>)
 8000346:	fba2 0203 	umull	r0, r2, r2, r3
 800034a:	08d2      	lsrs	r2, r2, #3
 800034c:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8000350:	0060      	lsls	r0, r4, #1
 8000352:	1a1b      	subs	r3, r3, r0
 8000354:	3330      	adds	r3, #48	; 0x30
 8000356:	485d      	ldr	r0, [pc, #372]	; (80004cc <main+0x1d0>)
 8000358:	5443      	strb	r3, [r0, r1]
          tmp /= 10;
 800035a:	4b5a      	ldr	r3, [pc, #360]	; (80004c4 <main+0x1c8>)
 800035c:	801a      	strh	r2, [r3, #0]
        while(tmp != 0)
 800035e:	4b59      	ldr	r3, [pc, #356]	; (80004c4 <main+0x1c8>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1e8      	bne.n	8000338 <main+0x3c>
        HAL_UART_Transmit_DMA(&huart1, USART_SendBuf_D, sizeof(USART_SendBuf_D));
 8000366:	2212      	movs	r2, #18
 8000368:	4958      	ldr	r1, [pc, #352]	; (80004cc <main+0x1d0>)
 800036a:	485a      	ldr	r0, [pc, #360]	; (80004d4 <main+0x1d8>)
 800036c:	f001 fb48 	bl	8001a00 <HAL_UART_Transmit_DMA>
 8000370:	e054      	b.n	800041c <main+0x120>
        tmp = Velocity;
 8000372:	4a54      	ldr	r2, [pc, #336]	; (80004c4 <main+0x1c8>)
 8000374:	8013      	strh	r3, [r2, #0]
        dcnt = 0;
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <main+0x1cc>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
        USART_SendBuf_V[USART_SBUF_DIGIT_V] = 0 + 48;
 800037c:	4b56      	ldr	r3, [pc, #344]	; (80004d8 <main+0x1dc>)
 800037e:	2230      	movs	r2, #48	; 0x30
 8000380:	739a      	strb	r2, [r3, #14]
        USART_SendBuf_V[USART_SBUF_DIGIT_V-1] = ' ';
 8000382:	2220      	movs	r2, #32
 8000384:	735a      	strb	r2, [r3, #13]
        while(tmp != 0)
 8000386:	e012      	b.n	80003ae <main+0xb2>
          USART_SendBuf_V[USART_SBUF_DIGIT_V - (dcnt++)] = tmp % 10 + 48;
 8000388:	494f      	ldr	r1, [pc, #316]	; (80004c8 <main+0x1cc>)
 800038a:	780a      	ldrb	r2, [r1, #0]
 800038c:	1c50      	adds	r0, r2, #1
 800038e:	7008      	strb	r0, [r1, #0]
 8000390:	f1c2 010e 	rsb	r1, r2, #14
 8000394:	4a4e      	ldr	r2, [pc, #312]	; (80004d0 <main+0x1d4>)
 8000396:	fba2 0203 	umull	r0, r2, r2, r3
 800039a:	08d2      	lsrs	r2, r2, #3
 800039c:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 80003a0:	0060      	lsls	r0, r4, #1
 80003a2:	1a1b      	subs	r3, r3, r0
 80003a4:	3330      	adds	r3, #48	; 0x30
 80003a6:	484c      	ldr	r0, [pc, #304]	; (80004d8 <main+0x1dc>)
 80003a8:	5443      	strb	r3, [r0, r1]
          tmp /= 10;
 80003aa:	4b46      	ldr	r3, [pc, #280]	; (80004c4 <main+0x1c8>)
 80003ac:	801a      	strh	r2, [r3, #0]
        while(tmp != 0)
 80003ae:	4b45      	ldr	r3, [pc, #276]	; (80004c4 <main+0x1c8>)
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d1e8      	bne.n	8000388 <main+0x8c>
        HAL_UART_Transmit_DMA(&huart1, USART_SendBuf_V, sizeof(USART_SendBuf_V));
 80003b6:	2215      	movs	r2, #21
 80003b8:	4947      	ldr	r1, [pc, #284]	; (80004d8 <main+0x1dc>)
 80003ba:	4846      	ldr	r0, [pc, #280]	; (80004d4 <main+0x1d8>)
 80003bc:	f001 fb20 	bl	8001a00 <HAL_UART_Transmit_DMA>
 80003c0:	e02c      	b.n	800041c <main+0x120>
                         (TC_PA11.now - TC_PA11.last) : (10000 + TC_PA11.now - TC_PA11.last);
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	b29b      	uxth	r3, r3
      TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 80003c8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80003cc:	3310      	adds	r3, #16
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	4a42      	ldr	r2, [pc, #264]	; (80004dc <main+0x1e0>)
 80003d2:	8093      	strh	r3, [r2, #4]
      if (TC_PA11.interval >= 10 && HAL_GPIO_ReadPin(KeyRound_GPIO_Port, KeyRound_Pin) == KEY_DOWN)
 80003d4:	2b09      	cmp	r3, #9
 80003d6:	d834      	bhi.n	8000442 <main+0x146>
    if (F_PA12)
 80003d8:	4b41      	ldr	r3, [pc, #260]	; (80004e0 <main+0x1e4>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d13f      	bne.n	8000460 <main+0x164>
    if (F_TIM3)
 80003e0:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <main+0x1e8>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b1d3      	cbz	r3, 800041c <main+0x120>
      F_TIM3 &= 0X00;
 80003e6:	4b3f      	ldr	r3, [pc, #252]	; (80004e4 <main+0x1e8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
      Velocity = 36 * (RoundCount - LastRoundCount) / 10;
 80003ec:	4b3e      	ldr	r3, [pc, #248]	; (80004e8 <main+0x1ec>)
 80003ee:	7819      	ldrb	r1, [r3, #0]
 80003f0:	483e      	ldr	r0, [pc, #248]	; (80004ec <main+0x1f0>)
 80003f2:	7802      	ldrb	r2, [r0, #0]
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80003fa:	0093      	lsls	r3, r2, #2
 80003fc:	4a3c      	ldr	r2, [pc, #240]	; (80004f0 <main+0x1f4>)
 80003fe:	fb82 4203 	smull	r4, r2, r2, r3
 8000402:	17db      	asrs	r3, r3, #31
 8000404:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4a3a      	ldr	r2, [pc, #232]	; (80004f4 <main+0x1f8>)
 800040c:	7013      	strb	r3, [r2, #0]
      LastRoundCount = RoundCount;
 800040e:	7001      	strb	r1, [r0, #0]
      if (FlagOutputMode == OF_DISTANCE)
 8000410:	4a39      	ldr	r2, [pc, #228]	; (80004f8 <main+0x1fc>)
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	2a00      	cmp	r2, #0
 8000416:	d087      	beq.n	8000328 <main+0x2c>
      else if (FlagOutputMode == OF_VELOCITY)
 8000418:	2a01      	cmp	r2, #1
 800041a:	d0aa      	beq.n	8000372 <main+0x76>
    if (F_PA11)
 800041c:	4b37      	ldr	r3, [pc, #220]	; (80004fc <main+0x200>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0d9      	beq.n	80003d8 <main+0xdc>
      TC_PA11.now = __HAL_TIM_GET_COUNTER(&htim4);
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <main+0x1c4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042a:	b21b      	sxth	r3, r3
 800042c:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <main+0x1e0>)
 800042e:	8013      	strh	r3, [r2, #0]
      TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 8000430:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000434:	4293      	cmp	r3, r2
 8000436:	dbc4      	blt.n	80003c2 <main+0xc6>
                         (TC_PA11.now - TC_PA11.last) : (10000 + TC_PA11.now - TC_PA11.last);
 8000438:	b29b      	uxth	r3, r3
 800043a:	b292      	uxth	r2, r2
      TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	b29b      	uxth	r3, r3
 8000440:	e7c6      	b.n	80003d0 <main+0xd4>
      if (TC_PA11.interval >= 10 && HAL_GPIO_ReadPin(KeyRound_GPIO_Port, KeyRound_Pin) == KEY_DOWN)
 8000442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000446:	482e      	ldr	r0, [pc, #184]	; (8000500 <main+0x204>)
 8000448:	f000 fcd0 	bl	8000dec <HAL_GPIO_ReadPin>
 800044c:	2800      	cmp	r0, #0
 800044e:	d1c3      	bne.n	80003d8 <main+0xdc>
        F_PA11 &= 0X00;
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <main+0x200>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
        RoundCount++;
 8000456:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <main+0x1ec>)
 8000458:	7813      	ldrb	r3, [r2, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	7013      	strb	r3, [r2, #0]
 800045e:	e7bb      	b.n	80003d8 <main+0xdc>
      TC_PA12.now = __HAL_TIM_GET_COUNTER(&htim4);
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <main+0x1c4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000466:	b21b      	sxth	r3, r3
 8000468:	4a26      	ldr	r2, [pc, #152]	; (8000504 <main+0x208>)
 800046a:	8013      	strh	r3, [r2, #0]
      TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 800046c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000470:	4293      	cmp	r3, r2
 8000472:	db1b      	blt.n	80004ac <main+0x1b0>
                         (TC_PA12.now - TC_PA12.last) : (10000 + TC_PA12.now - TC_PA12.last);
 8000474:	b29b      	uxth	r3, r3
 8000476:	b292      	uxth	r2, r2
      TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 8000478:	1a9b      	subs	r3, r3, r2
 800047a:	b29b      	uxth	r3, r3
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <main+0x208>)
 800047e:	8093      	strh	r3, [r2, #4]
      if (TC_PA11.interval >= 10 && HAL_GPIO_ReadPin(KeyOutputMode_GPIO_Port,KeyOutputMode_Pin) == KEY_DOWN)
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <main+0x1e0>)
 8000482:	889b      	ldrh	r3, [r3, #4]
 8000484:	2b09      	cmp	r3, #9
 8000486:	d9ab      	bls.n	80003e0 <main+0xe4>
 8000488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048c:	481c      	ldr	r0, [pc, #112]	; (8000500 <main+0x204>)
 800048e:	f000 fcad 	bl	8000dec <HAL_GPIO_ReadPin>
 8000492:	2800      	cmp	r0, #0
 8000494:	d1a4      	bne.n	80003e0 <main+0xe4>
        F_PA12 &= 0X00;
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <main+0x1e4>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
        FlagOutputMode = (~FlagOutputMode) & 0X01;
 800049c:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <main+0x1fc>)
 800049e:	7813      	ldrb	r3, [r2, #0]
 80004a0:	f083 0301 	eor.w	r3, r3, #1
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	7013      	strb	r3, [r2, #0]
 80004aa:	e799      	b.n	80003e0 <main+0xe4>
                         (TC_PA12.now - TC_PA12.last) : (10000 + TC_PA12.now - TC_PA12.last);
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	1a9b      	subs	r3, r3, r2
 80004b0:	b29b      	uxth	r3, r3
      TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 80004b2:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80004b6:	3310      	adds	r3, #16
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	e7df      	b.n	800047c <main+0x180>
 80004bc:	2000009c 	.word	0x2000009c
 80004c0:	2000005c 	.word	0x2000005c
 80004c4:	20000054 	.word	0x20000054
 80004c8:	20000168 	.word	0x20000168
 80004cc:	20000000 	.word	0x20000000
 80004d0:	cccccccd 	.word	0xcccccccd
 80004d4:	20000128 	.word	0x20000128
 80004d8:	20000014 	.word	0x20000014
 80004dc:	20000120 	.word	0x20000120
 80004e0:	20000173 	.word	0x20000173
 80004e4:	20000057 	.word	0x20000057
 80004e8:	20000175 	.word	0x20000175
 80004ec:	20000174 	.word	0x20000174
 80004f0:	66666667 	.word	0x66666667
 80004f4:	20000172 	.word	0x20000172
 80004f8:	20000056 	.word	0x20000056
 80004fc:	20000058 	.word	0x20000058
 8000500:	40010800 	.word	0x40010800
 8000504:	2000016c 	.word	0x2000016c

08000508 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000508:	4770      	bx	lr
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_MspInit+0x3c>)
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	f042 0201 	orr.w	r2, r2, #1
 8000516:	619a      	str	r2, [r3, #24]
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	f002 0201 	and.w	r2, r2, #1
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000528:	61da      	str	r2, [r3, #28]
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000534:	4a05      	ldr	r2, [pc, #20]	; (800054c <HAL_MspInit+0x40>)
 8000536:	6853      	ldr	r3, [r2, #4]
 8000538:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800053c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	b002      	add	sp, #8
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000550:	b500      	push	{lr}
 8000552:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8000554:	6803      	ldr	r3, [r0, #0]
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <HAL_TIM_Base_MspInit+0x64>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d005      	beq.n	8000568 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <HAL_TIM_Base_MspInit+0x68>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d015      	beq.n	800058e <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000562:	b003      	add	sp, #12
 8000564:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_TIM_Base_MspInit+0x6c>)
 800056a:	69da      	ldr	r2, [r3, #28]
 800056c:	f042 0202 	orr.w	r2, r2, #2
 8000570:	61da      	str	r2, [r3, #28]
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	4611      	mov	r1, r2
 8000580:	201d      	movs	r0, #29
 8000582:	f000 f97b 	bl	800087c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000586:	201d      	movs	r0, #29
 8000588:	f000 f9ac 	bl	80008e4 <HAL_NVIC_EnableIRQ>
 800058c:	e7e9      	b.n	8000562 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_TIM_Base_MspInit+0x6c>)
 8000590:	69da      	ldr	r2, [r3, #28]
 8000592:	f042 0204 	orr.w	r2, r2, #4
 8000596:	61da      	str	r2, [r3, #28]
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	4611      	mov	r1, r2
 80005a6:	201e      	movs	r0, #30
 80005a8:	f000 f968 	bl	800087c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005ac:	201e      	movs	r0, #30
 80005ae:	f000 f999 	bl	80008e4 <HAL_NVIC_EnableIRQ>
}
 80005b2:	e7d6      	b.n	8000562 <HAL_TIM_Base_MspInit+0x12>
 80005b4:	40000400 	.word	0x40000400
 80005b8:	40000800 	.word	0x40000800
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2300      	movs	r3, #0
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	9303      	str	r3, [sp, #12]
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 80005ce:	6802      	ldr	r2, [r0, #0]
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <HAL_UART_MspInit+0xac>)
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d001      	beq.n	80005da <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d6:	b006      	add	sp, #24
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 80005dc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005e6:	619a      	str	r2, [r3, #24]
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	f042 0204 	orr.w	r2, r2, #4
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000608:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	4e17      	ldr	r6, [pc, #92]	; (8000670 <HAL_UART_MspInit+0xb0>)
 8000614:	a902      	add	r1, sp, #8
 8000616:	4630      	mov	r0, r6
 8000618:	f000 fafc 	bl	8000c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800061c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000620:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2500      	movs	r5, #0
 8000624:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	a902      	add	r1, sp, #8
 800062a:	4630      	mov	r0, r6
 800062c:	f000 faf2 	bl	8000c14 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <HAL_UART_MspInit+0xb4>)
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_UART_MspInit+0xb8>)
 8000634:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000636:	2310      	movs	r3, #16
 8000638:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800063a:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000640:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000642:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000644:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000646:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000648:	f000 f986 	bl	8000958 <HAL_DMA_Init>
 800064c:	b958      	cbnz	r0, 8000666 <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_UART_MspInit+0xb4>)
 8000650:	6323      	str	r3, [r4, #48]	; 0x30
 8000652:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	4611      	mov	r1, r2
 8000658:	2025      	movs	r0, #37	; 0x25
 800065a:	f000 f90f 	bl	800087c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800065e:	2025      	movs	r0, #37	; 0x25
 8000660:	f000 f940 	bl	80008e4 <HAL_NVIC_EnableIRQ>
}
 8000664:	e7b7      	b.n	80005d6 <HAL_UART_MspInit+0x16>
      Error_Handler();
 8000666:	f7ff ff4f 	bl	8000508 <Error_Handler>
 800066a:	e7f0      	b.n	800064e <HAL_UART_MspInit+0x8e>
 800066c:	40013800 	.word	0x40013800
 8000670:	40010800 	.word	0x40010800
 8000674:	200000dc 	.word	0x200000dc
 8000678:	40020044 	.word	0x40020044

0800067c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800067c:	4770      	bx	lr

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	e7fe      	b.n	800067e <HardFault_Handler>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler>

08000686 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	4770      	bx	lr

08000688 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	4770      	bx	lr
	...

08000690 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000690:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000692:	4802      	ldr	r0, [pc, #8]	; (800069c <DMA1_Channel4_IRQHandler+0xc>)
 8000694:	f000 fa1c 	bl	8000ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000698:	bd08      	pop	{r3, pc}
 800069a:	bf00      	nop
 800069c:	200000dc 	.word	0x200000dc

080006a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80006a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <TIM3_IRQHandler+0x14>)
 80006a4:	f000 ff1d 	bl	80014e2 <HAL_TIM_IRQHandler>
  F_TIM3 |= 0X01;
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <TIM3_IRQHandler+0x18>)
 80006aa:	7813      	ldrb	r3, [r2, #0]
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	7013      	strb	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80006b2:	bd08      	pop	{r3, pc}
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	20000057 	.word	0x20000057

080006bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <TIM4_IRQHandler+0xc>)
 80006c0:	f000 ff0f 	bl	80014e2 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006c4:	bd08      	pop	{r3, pc}
 80006c6:	bf00      	nop
 80006c8:	2000005c 	.word	0x2000005c

080006cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USART1_IRQHandler+0xc>)
 80006d0:	f001 fa84 	bl	8001bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006d4:	bd08      	pop	{r3, pc}
 80006d6:	bf00      	nop
 80006d8:	20000128 	.word	0x20000128

080006dc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if (__HAL_GPIO_EXTI_GET_IT(KeyRound_Pin) != RESET)   //PA11模拟钢圈计数
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <EXTI15_10_IRQHandler+0x50>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80006e4:	d113      	bne.n	800070e <EXTI15_10_IRQHandler+0x32>
  {
    TC_PA11.last = __HAL_TIM_GET_COUNTER(&htim4);
    F_PA11 |= 0X01;     //钢圈计数处理标志置位
    __HAL_GPIO_EXTI_CLEAR_IT(KeyRound_Pin);
  }
  else if (__HAL_GPIO_EXTI_GET_IT(KeyOutputMode_Pin) != RESET)   //PA12按键模式切换
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <EXTI15_10_IRQHandler+0x50>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80006ee:	d00d      	beq.n	800070c <EXTI15_10_IRQHandler+0x30>
  {
    TC_PA12.last = __HAL_TIM_GET_COUNTER(&htim4);
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <EXTI15_10_IRQHandler+0x54>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <EXTI15_10_IRQHandler+0x58>)
 80006f8:	805a      	strh	r2, [r3, #2]
    F_PA12 |= 0X01;     //按键模式切换处理标志置位
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <EXTI15_10_IRQHandler+0x5c>)
 80006fc:	7813      	ldrb	r3, [r2, #0]
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	7013      	strb	r3, [r2, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(KeyOutputMode_Pin);
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <EXTI15_10_IRQHandler+0x50>)
 8000706:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800070a:	615a      	str	r2, [r3, #20]
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800070c:	4770      	bx	lr
    TC_PA11.last = __HAL_TIM_GET_COUNTER(&htim4);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <EXTI15_10_IRQHandler+0x54>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <EXTI15_10_IRQHandler+0x60>)
 8000716:	805a      	strh	r2, [r3, #2]
    F_PA11 |= 0X01;     //钢圈计数处理标志置位
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <EXTI15_10_IRQHandler+0x64>)
 800071a:	7813      	ldrb	r3, [r2, #0]
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	7013      	strb	r3, [r2, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(KeyRound_Pin);
 8000722:	4b02      	ldr	r3, [pc, #8]	; (800072c <EXTI15_10_IRQHandler+0x50>)
 8000724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	4770      	bx	lr
 800072c:	40010400 	.word	0x40010400
 8000730:	2000005c 	.word	0x2000005c
 8000734:	2000016c 	.word	0x2000016c
 8000738:	20000173 	.word	0x20000173
 800073c:	20000120 	.word	0x20000120
 8000740:	20000058 	.word	0x20000058

08000744 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <SystemInit+0x40>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	f042 0201 	orr.w	r2, r2, #1
 800074c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800074e:	6859      	ldr	r1, [r3, #4]
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <SystemInit+0x44>)
 8000752:	400a      	ands	r2, r1
 8000754:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800075c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000760:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000768:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000770:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000772:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000776:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x48>)
 800077a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	f8ff0000 	.word	0xf8ff0000
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000790:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000792:	e003      	b.n	800079c <LoopCopyDataInit>

08000794 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000796:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000798:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079a:	3104      	adds	r1, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a4:	d3f6      	bcc.n	8000794 <CopyDataInit>
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007a8:	e002      	b.n	80007b0 <LoopFillZerobss>

080007aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007ac:	f842 3b04 	str.w	r3, [r2], #4

080007b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b4:	d3f9      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff ffc5 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f001 faa7 	bl	8001d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff fd9d 	bl	80002fc <main>
  bx lr
 80007c2:	4770      	bx	lr
  ldr r3, =_sidata
 80007c4:	08001db0 	.word	0x08001db0
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007cc:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 80007d0:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 80007d4:	2000017c 	.word	0x2000017c

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b510      	push	{r4, lr}
 80007de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_InitTick+0x40>)
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <HAL_InitTick+0x44>)
 80007ee:	6810      	ldr	r0, [r2, #0]
 80007f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80007f4:	f000 f884 	bl	8000900 <HAL_SYSTICK_Config>
 80007f8:	b968      	cbnz	r0, 8000816 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	2c0f      	cmp	r4, #15
 80007fc:	d901      	bls.n	8000802 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
 8000800:	e00a      	b.n	8000818 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	2200      	movs	r2, #0
 8000804:	4621      	mov	r1, r4
 8000806:	f04f 30ff 	mov.w	r0, #4294967295
 800080a:	f000 f837 	bl	800087c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_InitTick+0x48>)
 8000810:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2000      	movs	r0, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000816:	2001      	movs	r0, #1
}
 8000818:	bd10      	pop	{r4, pc}
 800081a:	bf00      	nop
 800081c:	20000030 	.word	0x20000030
 8000820:	2000002c 	.word	0x2000002c
 8000824:	20000034 	.word	0x20000034

08000828 <HAL_Init>:
{
 8000828:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_Init+0x20>)
 800082c:	6813      	ldr	r3, [r2, #0]
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f80f 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ffce 	bl	80007dc <HAL_InitTick>
  HAL_MspInit();
 8000840:	f7ff fe64 	bl	800050c <HAL_MspInit>
}
 8000844:	2000      	movs	r0, #0
 8000846:	bd08      	pop	{r3, pc}
 8000848:	40022000 	.word	0x40022000

0800084c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800084c:	4b01      	ldr	r3, [pc, #4]	; (8000854 <HAL_GetTick+0x8>)
 800084e:	6818      	ldr	r0, [r3, #0]
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000178 	.word	0x20000178

08000858 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800085a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000860:	041b      	lsls	r3, r3, #16
 8000862:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	0200      	lsls	r0, r0, #8
 8000866:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800086c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000870:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000874:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_NVIC_SetPriority+0x60>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000886:	f1c3 0407 	rsb	r4, r3, #7
 800088a:	2c04      	cmp	r4, #4
 800088c:	bf28      	it	cs
 800088e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000890:	1d1d      	adds	r5, r3, #4
 8000892:	2d06      	cmp	r5, #6
 8000894:	d918      	bls.n	80008c8 <HAL_NVIC_SetPriority+0x4c>
 8000896:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 35ff 	mov.w	r5, #4294967295
 800089c:	fa05 f404 	lsl.w	r4, r5, r4
 80008a0:	ea21 0104 	bic.w	r1, r1, r4
 80008a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a6:	fa05 f303 	lsl.w	r3, r5, r3
 80008aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	db0b      	blt.n	80008cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	0109      	lsls	r1, r1, #4
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80008bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80008c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80008c4:	bc30      	pop	{r4, r5}
 80008c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c8:	2300      	movs	r3, #0
 80008ca:	e7e5      	b.n	8000898 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	f000 000f 	and.w	r0, r0, #15
 80008d0:	0109      	lsls	r1, r1, #4
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <HAL_NVIC_SetPriority+0x64>)
 80008d6:	5419      	strb	r1, [r3, r0]
 80008d8:	e7f4      	b.n	80008c4 <HAL_NVIC_SetPriority+0x48>
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	e000ed14 	.word	0xe000ed14

080008e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008e4:	2800      	cmp	r0, #0
 80008e6:	db07      	blt.n	80008f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e8:	f000 021f 	and.w	r2, r0, #31
 80008ec:	0940      	lsrs	r0, r0, #5
 80008ee:	2301      	movs	r3, #1
 80008f0:	4093      	lsls	r3, r2
 80008f2:	4a02      	ldr	r2, [pc, #8]	; (80008fc <HAL_NVIC_EnableIRQ+0x18>)
 80008f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100

08000900 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	3801      	subs	r0, #1
 8000902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000906:	d20a      	bcs.n	800091e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_SYSTICK_Config+0x24>)
 800090a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_SYSTICK_Config+0x28>)
 800090e:	21f0      	movs	r1, #240	; 0xf0
 8000910:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	2000      	movs	r0, #0
 8000916:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092c:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800092e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000930:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000932:	2401      	movs	r4, #1
 8000934:	40b4      	lsls	r4, r6
 8000936:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000938:	6804      	ldr	r4, [r0, #0]
 800093a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800093c:	6843      	ldr	r3, [r0, #4]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d005      	beq.n	800094e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000942:	6803      	ldr	r3, [r0, #0]
 8000944:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000946:	6803      	ldr	r3, [r0, #0]
 8000948:	60da      	str	r2, [r3, #12]
  }
}
 800094a:	bc70      	pop	{r4, r5, r6}
 800094c:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800094e:	6803      	ldr	r3, [r0, #0]
 8000950:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000952:	6803      	ldr	r3, [r0, #0]
 8000954:	60d9      	str	r1, [r3, #12]
 8000956:	e7f8      	b.n	800094a <DMA_SetConfig+0x1e>

08000958 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000958:	b360      	cbz	r0, 80009b4 <HAL_DMA_Init+0x5c>
{
 800095a:	b410      	push	{r4}
 800095c:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800095e:	6801      	ldr	r1, [r0, #0]
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_DMA_Init+0x60>)
 8000962:	440b      	add	r3, r1
 8000964:	4815      	ldr	r0, [pc, #84]	; (80009bc <HAL_DMA_Init+0x64>)
 8000966:	fba0 0303 	umull	r0, r3, r0, r3
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_DMA_Init+0x68>)
 8000972:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000974:	2302      	movs	r3, #2
 8000976:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800097a:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800097c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000980:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000984:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000986:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 8000988:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800098a:	68d4      	ldr	r4, [r2, #12]
 800098c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800098e:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000990:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000992:	6954      	ldr	r4, [r2, #20]
 8000994:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000996:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000998:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800099a:	69d4      	ldr	r4, [r2, #28]
 800099c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800099e:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80009a0:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a2:	2000      	movs	r0, #0
 80009a4:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80009a6:	2301      	movs	r3, #1
 80009a8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80009ac:	f882 0020 	strb.w	r0, [r2, #32]
}
 80009b0:	bc10      	pop	{r4}
 80009b2:	4770      	bx	lr
    return HAL_ERROR;
 80009b4:	2001      	movs	r0, #1
}
 80009b6:	4770      	bx	lr
 80009b8:	bffdfff8 	.word	0xbffdfff8
 80009bc:	cccccccd 	.word	0xcccccccd
 80009c0:	40020000 	.word	0x40020000

080009c4 <HAL_DMA_Start_IT>:
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80009c6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80009ca:	2c01      	cmp	r4, #1
 80009cc:	d032      	beq.n	8000a34 <HAL_DMA_Start_IT+0x70>
 80009ce:	2401      	movs	r4, #1
 80009d0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80009d4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80009d8:	2c01      	cmp	r4, #1
 80009da:	d004      	beq.n	80009e6 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80009dc:	2300      	movs	r3, #0
 80009de:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80009e2:	2002      	movs	r0, #2
}
 80009e4:	bd38      	pop	{r3, r4, r5, pc}
 80009e6:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80009e8:	2002      	movs	r0, #2
 80009ea:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ee:	2000      	movs	r0, #0
 80009f0:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80009f2:	6825      	ldr	r5, [r4, #0]
 80009f4:	6828      	ldr	r0, [r5, #0]
 80009f6:	f020 0001 	bic.w	r0, r0, #1
 80009fa:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009fc:	4620      	mov	r0, r4
 80009fe:	f7ff ff95 	bl	800092c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a04:	b15b      	cbz	r3, 8000a1e <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	6813      	ldr	r3, [r2, #0]
 8000a0a:	f043 030e 	orr.w	r3, r3, #14
 8000a0e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a10:	6822      	ldr	r2, [r4, #0]
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e7e2      	b.n	80009e4 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a1e:	6822      	ldr	r2, [r4, #0]
 8000a20:	6813      	ldr	r3, [r2, #0]
 8000a22:	f023 0304 	bic.w	r3, r3, #4
 8000a26:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	f043 030a 	orr.w	r3, r3, #10
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e7ed      	b.n	8000a10 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000a34:	2002      	movs	r0, #2
 8000a36:	e7d5      	b.n	80009e4 <HAL_DMA_Start_IT+0x20>

08000a38 <HAL_DMA_Abort_IT>:
{  
 8000a38:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a3a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d003      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a42:	2304      	movs	r3, #4
 8000a44:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000a46:	2001      	movs	r0, #1
}
 8000a48:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4a:	6802      	ldr	r2, [r0, #0]
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 030e 	bic.w	r3, r3, #14
 8000a52:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000a54:	6802      	ldr	r2, [r0, #0]
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f023 0301 	bic.w	r3, r3, #1
 8000a5c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a5e:	6803      	ldr	r3, [r0, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_DMA_Abort_IT+0x90>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d014      	beq.n	8000a90 <HAL_DMA_Abort_IT+0x58>
 8000a66:	3214      	adds	r2, #20
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d01f      	beq.n	8000aac <HAL_DMA_Abort_IT+0x74>
 8000a6c:	3214      	adds	r2, #20
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d01e      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0x78>
 8000a72:	3214      	adds	r2, #20
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d01e      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x7e>
 8000a78:	3214      	adds	r2, #20
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d01e      	beq.n	8000abc <HAL_DMA_Abort_IT+0x84>
 8000a7e:	3214      	adds	r2, #20
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d002      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x52>
 8000a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a88:	e003      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
 8000a8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a8e:	e000      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
 8000a90:	2201      	movs	r2, #1
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_DMA_Abort_IT+0x94>)
 8000a94:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000aa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000aa4:	b16b      	cbz	r3, 8000ac2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000aa6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7cd      	b.n	8000a48 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aac:	2210      	movs	r2, #16
 8000aae:	e7f0      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
 8000ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab4:	e7ed      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
 8000ab6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aba:	e7ea      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
 8000abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ac0:	e7e7      	b.n	8000a92 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	e7c0      	b.n	8000a48 <HAL_DMA_Abort_IT+0x10>
 8000ac6:	bf00      	nop
 8000ac8:	40020008 	.word	0x40020008
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_DMA_IRQHandler>:
{
 8000ad0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ad2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000ad4:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000ad6:	6804      	ldr	r4, [r0, #0]
 8000ad8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ada:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000adc:	2304      	movs	r3, #4
 8000ade:	408b      	lsls	r3, r1
 8000ae0:	4213      	tst	r3, r2
 8000ae2:	d035      	beq.n	8000b50 <HAL_DMA_IRQHandler+0x80>
 8000ae4:	f015 0f04 	tst.w	r5, #4
 8000ae8:	d032      	beq.n	8000b50 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	f013 0f20 	tst.w	r3, #32
 8000af0:	d103      	bne.n	8000afa <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	f023 0304 	bic.w	r3, r3, #4
 8000af8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000afa:	6803      	ldr	r3, [r0, #0]
 8000afc:	4a43      	ldr	r2, [pc, #268]	; (8000c0c <HAL_DMA_IRQHandler+0x13c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d014      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x5c>
 8000b02:	3214      	adds	r2, #20
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d018      	beq.n	8000b3a <HAL_DMA_IRQHandler+0x6a>
 8000b08:	3214      	adds	r2, #20
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d017      	beq.n	8000b3e <HAL_DMA_IRQHandler+0x6e>
 8000b0e:	3214      	adds	r2, #20
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d017      	beq.n	8000b44 <HAL_DMA_IRQHandler+0x74>
 8000b14:	3214      	adds	r2, #20
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d017      	beq.n	8000b4a <HAL_DMA_IRQHandler+0x7a>
 8000b1a:	3214      	adds	r2, #20
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d002      	beq.n	8000b26 <HAL_DMA_IRQHandler+0x56>
 8000b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b24:	e003      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
 8000b26:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b2a:	e000      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <HAL_DMA_IRQHandler+0x140>)
 8000b30:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000b32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b34:	b103      	cbz	r3, 8000b38 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8000b36:	4798      	blx	r3
}
 8000b38:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	e7f7      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
 8000b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b42:	e7f4      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
 8000b44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b48:	e7f1      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
 8000b4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b4e:	e7ee      	b.n	8000b2e <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000b50:	2302      	movs	r3, #2
 8000b52:	408b      	lsls	r3, r1
 8000b54:	4213      	tst	r3, r2
 8000b56:	d03c      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x102>
 8000b58:	f015 0f02 	tst.w	r5, #2
 8000b5c:	d039      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	f013 0f20 	tst.w	r3, #32
 8000b64:	d106      	bne.n	8000b74 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	f023 030a 	bic.w	r3, r3, #10
 8000b6c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b74:	6803      	ldr	r3, [r0, #0]
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_DMA_IRQHandler+0x13c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d014      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0xd6>
 8000b7c:	3214      	adds	r2, #20
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01c      	beq.n	8000bbc <HAL_DMA_IRQHandler+0xec>
 8000b82:	3214      	adds	r2, #20
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d01b      	beq.n	8000bc0 <HAL_DMA_IRQHandler+0xf0>
 8000b88:	3214      	adds	r2, #20
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d01b      	beq.n	8000bc6 <HAL_DMA_IRQHandler+0xf6>
 8000b8e:	3214      	adds	r2, #20
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d01b      	beq.n	8000bcc <HAL_DMA_IRQHandler+0xfc>
 8000b94:	3214      	adds	r2, #20
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d002      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd0>
 8000b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b9e:	e003      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
 8000ba0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ba4:	e000      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <HAL_DMA_IRQHandler+0x140>)
 8000baa:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000bac:	2300      	movs	r3, #0
 8000bae:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000bb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0bf      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8000bb8:	4798      	blx	r3
 8000bba:	e7bd      	b.n	8000b38 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	e7f3      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	e7f0      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
 8000bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bca:	e7ed      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
 8000bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bd0:	e7ea      	b.n	8000ba8 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	fa03 f101 	lsl.w	r1, r3, r1
 8000bd8:	4211      	tst	r1, r2
 8000bda:	d0ad      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x68>
 8000bdc:	f015 0f08 	tst.w	r5, #8
 8000be0:	d0aa      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	f023 030e 	bic.w	r3, r3, #14
 8000be8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000bec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000bee:	2301      	movs	r3, #1
 8000bf0:	fa03 f202 	lsl.w	r2, r3, r2
 8000bf4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000bf6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000c02:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d097      	beq.n	8000b38 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8000c08:	4798      	blx	r3
  return;
 8000c0a:	e795      	b.n	8000b38 <HAL_DMA_IRQHandler+0x68>
 8000c0c:	40020008 	.word	0x40020008
 8000c10:	40020000 	.word	0x40020000

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b4f0      	push	{r4, r5, r6, r7}
 8000c16:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c18:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8000c1a:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1c:	e0a2      	b.n	8000d64 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d05a      	beq.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000c22:	2d01      	cmp	r5, #1
 8000c24:	d100      	bne.n	8000c28 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c26:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c28:	2bff      	cmp	r3, #255	; 0xff
 8000c2a:	d869      	bhi.n	8000d00 <HAL_GPIO_Init+0xec>
 8000c2c:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c2e:	2bff      	cmp	r3, #255	; 0xff
 8000c30:	d869      	bhi.n	8000d06 <HAL_GPIO_Init+0xf2>
 8000c32:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c34:	f8dc 4000 	ldr.w	r4, [ip]
 8000c38:	270f      	movs	r7, #15
 8000c3a:	40af      	lsls	r7, r5
 8000c3c:	ea24 0407 	bic.w	r4, r4, r7
 8000c40:	fa06 f505 	lsl.w	r5, r6, r5
 8000c44:	432c      	orrs	r4, r5
 8000c46:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	684c      	ldr	r4, [r1, #4]
 8000c4c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000c50:	f000 8087 	beq.w	8000d62 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c54:	4c5f      	ldr	r4, [pc, #380]	; (8000dd4 <HAL_GPIO_Init+0x1c0>)
 8000c56:	69a5      	ldr	r5, [r4, #24]
 8000c58:	f045 0501 	orr.w	r5, r5, #1
 8000c5c:	61a5      	str	r5, [r4, #24]
 8000c5e:	69a4      	ldr	r4, [r4, #24]
 8000c60:	f004 0401 	and.w	r4, r4, #1
 8000c64:	9401      	str	r4, [sp, #4]
 8000c66:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000c68:	0895      	lsrs	r5, r2, #2
 8000c6a:	1caf      	adds	r7, r5, #2
 8000c6c:	4c5a      	ldr	r4, [pc, #360]	; (8000dd8 <HAL_GPIO_Init+0x1c4>)
 8000c6e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c72:	f002 0703 	and.w	r7, r2, #3
 8000c76:	00bf      	lsls	r7, r7, #2
 8000c78:	f04f 0c0f 	mov.w	ip, #15
 8000c7c:	fa0c fc07 	lsl.w	ip, ip, r7
 8000c80:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c84:	4c55      	ldr	r4, [pc, #340]	; (8000ddc <HAL_GPIO_Init+0x1c8>)
 8000c86:	42a0      	cmp	r0, r4
 8000c88:	d043      	beq.n	8000d12 <HAL_GPIO_Init+0xfe>
 8000c8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c8e:	42a0      	cmp	r0, r4
 8000c90:	f000 8081 	beq.w	8000d96 <HAL_GPIO_Init+0x182>
 8000c94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c98:	42a0      	cmp	r0, r4
 8000c9a:	d07e      	beq.n	8000d9a <HAL_GPIO_Init+0x186>
 8000c9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ca0:	42a0      	cmp	r0, r4
 8000ca2:	d034      	beq.n	8000d0e <HAL_GPIO_Init+0xfa>
 8000ca4:	2404      	movs	r4, #4
 8000ca6:	e035      	b.n	8000d14 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8000ca8:	4f4d      	ldr	r7, [pc, #308]	; (8000de0 <HAL_GPIO_Init+0x1cc>)
 8000caa:	42bd      	cmp	r5, r7
 8000cac:	d014      	beq.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000cae:	d90b      	bls.n	8000cc8 <HAL_GPIO_Init+0xb4>
 8000cb0:	4f4c      	ldr	r7, [pc, #304]	; (8000de4 <HAL_GPIO_Init+0x1d0>)
 8000cb2:	42bd      	cmp	r5, r7
 8000cb4:	d010      	beq.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000cb6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cba:	42bd      	cmp	r5, r7
 8000cbc:	d00c      	beq.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000cbe:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cc2:	42bd      	cmp	r5, r7
 8000cc4:	d1b0      	bne.n	8000c28 <HAL_GPIO_Init+0x14>
 8000cc6:	e007      	b.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000cc8:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000ccc:	42bd      	cmp	r5, r7
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0xc4>
 8000cd0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000cd4:	42bd      	cmp	r5, r7
 8000cd6:	d1a7      	bne.n	8000c28 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cd8:	688d      	ldr	r5, [r1, #8]
 8000cda:	b17d      	cbz	r5, 8000cfc <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cdc:	2d01      	cmp	r5, #1
 8000cde:	d008      	beq.n	8000cf2 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8000ce0:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce2:	2608      	movs	r6, #8
 8000ce4:	e7a0      	b.n	8000c28 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	68ce      	ldr	r6, [r1, #12]
 8000ce8:	3608      	adds	r6, #8
          break;
 8000cea:	e79d      	b.n	8000c28 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cec:	68ce      	ldr	r6, [r1, #12]
 8000cee:	360c      	adds	r6, #12
          break;
 8000cf0:	e79a      	b.n	8000c28 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000cf2:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2608      	movs	r6, #8
 8000cf6:	e797      	b.n	8000c28 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e795      	b.n	8000c28 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cfc:	2604      	movs	r6, #4
 8000cfe:	e793      	b.n	8000c28 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d00:	f100 0c04 	add.w	ip, r0, #4
 8000d04:	e793      	b.n	8000c2e <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d06:	f1a2 0508 	sub.w	r5, r2, #8
 8000d0a:	00ad      	lsls	r5, r5, #2
 8000d0c:	e792      	b.n	8000c34 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0e:	2403      	movs	r4, #3
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x100>
 8000d12:	2400      	movs	r4, #0
 8000d14:	40bc      	lsls	r4, r7
 8000d16:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1a:	3502      	adds	r5, #2
 8000d1c:	4f2e      	ldr	r7, [pc, #184]	; (8000dd8 <HAL_GPIO_Init+0x1c4>)
 8000d1e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d22:	684c      	ldr	r4, [r1, #4]
 8000d24:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000d28:	d039      	beq.n	8000d9e <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d2a:	4d2f      	ldr	r5, [pc, #188]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000d2c:	682c      	ldr	r4, [r5, #0]
 8000d2e:	431c      	orrs	r4, r3
 8000d30:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d32:	684c      	ldr	r4, [r1, #4]
 8000d34:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000d38:	d037      	beq.n	8000daa <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d3a:	4d2b      	ldr	r5, [pc, #172]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000d3c:	686c      	ldr	r4, [r5, #4]
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d42:	684c      	ldr	r4, [r1, #4]
 8000d44:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8000d48:	d035      	beq.n	8000db6 <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4a:	4d27      	ldr	r5, [pc, #156]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000d4c:	68ac      	ldr	r4, [r5, #8]
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d52:	684c      	ldr	r4, [r1, #4]
 8000d54:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8000d58:	d033      	beq.n	8000dc2 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	4d23      	ldr	r5, [pc, #140]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000d5c:	68ec      	ldr	r4, [r5, #12]
 8000d5e:	4323      	orrs	r3, r4
 8000d60:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000d62:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d64:	680b      	ldr	r3, [r1, #0]
 8000d66:	fa33 f402 	lsrs.w	r4, r3, r2
 8000d6a:	d030      	beq.n	8000dce <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8000d6c:	2401      	movs	r4, #1
 8000d6e:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d70:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8000d72:	429c      	cmp	r4, r3
 8000d74:	d1f5      	bne.n	8000d62 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8000d76:	684d      	ldr	r5, [r1, #4]
 8000d78:	2d12      	cmp	r5, #18
 8000d7a:	d0b7      	beq.n	8000cec <HAL_GPIO_Init+0xd8>
 8000d7c:	d894      	bhi.n	8000ca8 <HAL_GPIO_Init+0x94>
 8000d7e:	2d02      	cmp	r5, #2
 8000d80:	d0b1      	beq.n	8000ce6 <HAL_GPIO_Init+0xd2>
 8000d82:	f67f af4c 	bls.w	8000c1e <HAL_GPIO_Init+0xa>
 8000d86:	2d03      	cmp	r5, #3
 8000d88:	d0b6      	beq.n	8000cf8 <HAL_GPIO_Init+0xe4>
 8000d8a:	2d11      	cmp	r5, #17
 8000d8c:	f47f af4c 	bne.w	8000c28 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d90:	68ce      	ldr	r6, [r1, #12]
 8000d92:	3604      	adds	r6, #4
          break;
 8000d94:	e748      	b.n	8000c28 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d96:	2401      	movs	r4, #1
 8000d98:	e7bc      	b.n	8000d14 <HAL_GPIO_Init+0x100>
 8000d9a:	2402      	movs	r4, #2
 8000d9c:	e7ba      	b.n	8000d14 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d9e:	4d12      	ldr	r5, [pc, #72]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000da0:	682c      	ldr	r4, [r5, #0]
 8000da2:	ea24 0403 	bic.w	r4, r4, r3
 8000da6:	602c      	str	r4, [r5, #0]
 8000da8:	e7c3      	b.n	8000d32 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000daa:	4d0f      	ldr	r5, [pc, #60]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000dac:	686c      	ldr	r4, [r5, #4]
 8000dae:	ea24 0403 	bic.w	r4, r4, r3
 8000db2:	606c      	str	r4, [r5, #4]
 8000db4:	e7c5      	b.n	8000d42 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4d0c      	ldr	r5, [pc, #48]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000db8:	68ac      	ldr	r4, [r5, #8]
 8000dba:	ea24 0403 	bic.w	r4, r4, r3
 8000dbe:	60ac      	str	r4, [r5, #8]
 8000dc0:	e7c7      	b.n	8000d52 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc2:	4d09      	ldr	r5, [pc, #36]	; (8000de8 <HAL_GPIO_Init+0x1d4>)
 8000dc4:	68ec      	ldr	r4, [r5, #12]
 8000dc6:	ea24 0303 	bic.w	r3, r4, r3
 8000dca:	60eb      	str	r3, [r5, #12]
 8000dcc:	e7c9      	b.n	8000d62 <HAL_GPIO_Init+0x14e>
  }
}
 8000dce:	b002      	add	sp, #8
 8000dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	10210000 	.word	0x10210000
 8000de4:	10310000 	.word	0x10310000
 8000de8:	40010400 	.word	0x40010400

08000dec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dec:	6883      	ldr	r3, [r0, #8]
 8000dee:	4219      	tst	r1, r3
 8000df0:	d101      	bne.n	8000df6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000df2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000df4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000df6:	2001      	movs	r0, #1
 8000df8:	4770      	bx	lr
	...

08000dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000dfc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <RCC_Delay+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <RCC_Delay+0x28>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0a5b      	lsrs	r3, r3, #9
 8000e0a:	fb00 f003 	mul.w	r0, r0, r3
 8000e0e:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8000e10:	bf00      	nop
  }
  while (Delay --);
 8000e12:	9b01      	ldr	r3, [sp, #4]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f9      	bne.n	8000e10 <RCC_Delay+0x14>
}
 8000e1c:	b002      	add	sp, #8
 8000e1e:	4770      	bx	lr
 8000e20:	2000002c 	.word	0x2000002c
 8000e24:	10624dd3 	.word	0x10624dd3

08000e28 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f000 81f5 	beq.w	8001218 <HAL_RCC_OscConfig+0x3f0>
{
 8000e2e:	b570      	push	{r4, r5, r6, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e34:	6803      	ldr	r3, [r0, #0]
 8000e36:	f013 0f01 	tst.w	r3, #1
 8000e3a:	d02c      	beq.n	8000e96 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e3c:	4bab      	ldr	r3, [pc, #684]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d01d      	beq.n	8000e84 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e48:	4ba8      	ldr	r3, [pc, #672]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d012      	beq.n	8000e7a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	6863      	ldr	r3, [r4, #4]
 8000e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5a:	d041      	beq.n	8000ee0 <HAL_RCC_OscConfig+0xb8>
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d155      	bne.n	8000f0c <HAL_RCC_OscConfig+0xe4>
 8000e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e037      	b.n	8000eea <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7a:	4b9c      	ldr	r3, [pc, #624]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e82:	d0e7      	beq.n	8000e54 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	4b99      	ldr	r3, [pc, #612]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e8c:	d003      	beq.n	8000e96 <HAL_RCC_OscConfig+0x6e>
 8000e8e:	6863      	ldr	r3, [r4, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 81c3 	beq.w	800121c <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	f013 0f02 	tst.w	r3, #2
 8000e9c:	d076      	beq.n	8000f8c <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e9e:	4b93      	ldr	r3, [pc, #588]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f013 0f0c 	tst.w	r3, #12
 8000ea6:	d05f      	beq.n	8000f68 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea8:	4b90      	ldr	r3, [pc, #576]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d054      	beq.n	8000f5e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb4:	6923      	ldr	r3, [r4, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 808a 	beq.w	8000fd0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000ebc:	4b8c      	ldr	r3, [pc, #560]	; (80010f0 <HAL_RCC_OscConfig+0x2c8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fcc3 	bl	800084c <HAL_GetTick>
 8000ec6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec8:	4b88      	ldr	r3, [pc, #544]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f013 0f02 	tst.w	r3, #2
 8000ed0:	d175      	bne.n	8000fbe <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fcbb 	bl	800084c <HAL_GetTick>
 8000ed6:	1b40      	subs	r0, r0, r5
 8000ed8:	2802      	cmp	r0, #2
 8000eda:	d9f5      	bls.n	8000ec8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000edc:	2003      	movs	r0, #3
 8000ede:	e1a0      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee0:	4a82      	ldr	r2, [pc, #520]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eea:	6863      	ldr	r3, [r4, #4]
 8000eec:	b343      	cbz	r3, 8000f40 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000eee:	f7ff fcad 	bl	800084c <HAL_GetTick>
 8000ef2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	4b7d      	ldr	r3, [pc, #500]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000efc:	d1cb      	bne.n	8000e96 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000efe:	f7ff fca5 	bl	800084c <HAL_GetTick>
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	2864      	cmp	r0, #100	; 0x64
 8000f06:	d9f5      	bls.n	8000ef4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000f08:	2003      	movs	r0, #3
 8000f0a:	e18a      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d009      	beq.n	8000f26 <HAL_RCC_OscConfig+0xfe>
 8000f12:	4b76      	ldr	r3, [pc, #472]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e7e1      	b.n	8000eea <HAL_RCC_OscConfig+0xc2>
 8000f26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e7d4      	b.n	8000eea <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000f40:	f7ff fc84 	bl	800084c <HAL_GetTick>
 8000f44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	4b69      	ldr	r3, [pc, #420]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f4e:	d0a2      	beq.n	8000e96 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fc7c 	bl	800084c <HAL_GetTick>
 8000f54:	1b40      	subs	r0, r0, r5
 8000f56:	2864      	cmp	r0, #100	; 0x64
 8000f58:	d9f5      	bls.n	8000f46 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	e161      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f5e:	4b63      	ldr	r3, [pc, #396]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f66:	d1a5      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f68:	4b60      	ldr	r3, [pc, #384]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f013 0f02 	tst.w	r3, #2
 8000f70:	d004      	beq.n	8000f7c <HAL_RCC_OscConfig+0x154>
 8000f72:	6923      	ldr	r3, [r4, #16]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d001      	beq.n	8000f7c <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e152      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7c:	4a5b      	ldr	r2, [pc, #364]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f84:	6961      	ldr	r1, [r4, #20]
 8000f86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f8a:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	f013 0f08 	tst.w	r3, #8
 8000f92:	d032      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f94:	69a3      	ldr	r3, [r4, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d05b      	beq.n	8001052 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000f9a:	4b56      	ldr	r3, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x2cc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc54 	bl	800084c <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa6:	4b51      	ldr	r3, [pc, #324]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f013 0f02 	tst.w	r3, #2
 8000fae:	d121      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc4c 	bl	800084c <HAL_GetTick>
 8000fb4:	1b40      	subs	r0, r0, r5
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f5      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
 8000fbc:	e131      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fc6:	6961      	ldr	r1, [r4, #20]
 8000fc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e7dd      	b.n	8000f8c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000fd0:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_RCC_OscConfig+0x2c8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fc39 	bl	800084c <HAL_GetTick>
 8000fda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f013 0f02 	tst.w	r3, #2
 8000fe4:	d0d2      	beq.n	8000f8c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe6:	f7ff fc31 	bl	800084c <HAL_GetTick>
 8000fea:	1b40      	subs	r0, r0, r5
 8000fec:	2802      	cmp	r0, #2
 8000fee:	d9f5      	bls.n	8000fdc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	e116      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff ff01 	bl	8000dfc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f013 0f04 	tst.w	r3, #4
 8001000:	f000 8098 	beq.w	8001134 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001004:	4b39      	ldr	r3, [pc, #228]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800100c:	d133      	bne.n	8001076 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001022:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <HAL_RCC_OscConfig+0x2d0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f413 7f80 	tst.w	r3, #256	; 0x100
 800102c:	d025      	beq.n	800107a <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102e:	68e3      	ldr	r3, [r4, #12]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d036      	beq.n	80010a2 <HAL_RCC_OscConfig+0x27a>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d14c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x2aa>
 8001038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800103c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	621a      	str	r2, [r3, #32]
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	f022 0204 	bic.w	r2, r2, #4
 800104e:	621a      	str	r2, [r3, #32]
 8001050:	e02c      	b.n	80010ac <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x2cc>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001058:	f7ff fbf8 	bl	800084c <HAL_GetTick>
 800105c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f013 0f02 	tst.w	r3, #2
 8001066:	d0c8      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001068:	f7ff fbf0 	bl	800084c <HAL_GetTick>
 800106c:	1b40      	subs	r0, r0, r5
 800106e:	2802      	cmp	r0, #2
 8001070:	d9f5      	bls.n	800105e <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001072:	2003      	movs	r0, #3
 8001074:	e0d5      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8001076:	2500      	movs	r5, #0
 8001078:	e7d4      	b.n	8001024 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_RCC_OscConfig+0x2d0>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001084:	f7ff fbe2 	bl	800084c <HAL_GetTick>
 8001088:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_RCC_OscConfig+0x2d0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001092:	d1cc      	bne.n	800102e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001094:	f7ff fbda 	bl	800084c <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	2864      	cmp	r0, #100	; 0x64
 800109c:	d9f5      	bls.n	800108a <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 800109e:	2003      	movs	r0, #3
 80010a0:	e0bf      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 80010a4:	6a13      	ldr	r3, [r2, #32]
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ac:	68e3      	ldr	r3, [r4, #12]
 80010ae:	b37b      	cbz	r3, 8001110 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 80010b0:	f7ff fbcc 	bl	800084c <HAL_GetTick>
 80010b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	f013 0f02 	tst.w	r3, #2
 80010be:	d138      	bne.n	8001132 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fbc4 	bl	800084c <HAL_GetTick>
 80010c4:	1b80      	subs	r0, r0, r6
 80010c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d9f3      	bls.n	80010b6 <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 80010ce:	2003      	movs	r0, #3
 80010d0:	e0a7      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d012      	beq.n	80010fc <HAL_RCC_OscConfig+0x2d4>
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_RCC_OscConfig+0x2c4>)
 80010d8:	6a1a      	ldr	r2, [r3, #32]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	621a      	str	r2, [r3, #32]
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	f022 0204 	bic.w	r2, r2, #4
 80010e6:	621a      	str	r2, [r3, #32]
 80010e8:	e7e0      	b.n	80010ac <HAL_RCC_OscConfig+0x284>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	42420000 	.word	0x42420000
 80010f4:	42420480 	.word	0x42420480
 80010f8:	40007000 	.word	0x40007000
 80010fc:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 80010fe:	6a1a      	ldr	r2, [r3, #32]
 8001100:	f042 0204 	orr.w	r2, r2, #4
 8001104:	621a      	str	r2, [r3, #32]
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	f042 0201 	orr.w	r2, r2, #1
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	e7cd      	b.n	80010ac <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8001110:	f7ff fb9c 	bl	800084c <HAL_GetTick>
 8001114:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	f013 0f02 	tst.w	r3, #2
 800111e:	d008      	beq.n	8001132 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001120:	f7ff fb94 	bl	800084c <HAL_GetTick>
 8001124:	1b80      	subs	r0, r0, r6
 8001126:	f241 3388 	movw	r3, #5000	; 0x1388
 800112a:	4298      	cmp	r0, r3
 800112c:	d9f3      	bls.n	8001116 <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 800112e:	2003      	movs	r0, #3
 8001130:	e077      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8001132:	b9e5      	cbnz	r5, 800116e <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001134:	69e3      	ldr	r3, [r4, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d072      	beq.n	8001220 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 800113c:	6852      	ldr	r2, [r2, #4]
 800113e:	f002 020c 	and.w	r2, r2, #12
 8001142:	2a08      	cmp	r2, #8
 8001144:	d056      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001146:	2b02      	cmp	r3, #2
 8001148:	d017      	beq.n	800117a <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_RCC_OscConfig+0x40c>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff fb7c 	bl	800084c <HAL_GetTick>
 8001154:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800115e:	d047      	beq.n	80011f0 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001160:	f7ff fb74 	bl	800084c <HAL_GetTick>
 8001164:	1b00      	subs	r0, r0, r4
 8001166:	2802      	cmp	r0, #2
 8001168:	d9f5      	bls.n	8001156 <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e059      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800116e:	4a30      	ldr	r2, [pc, #192]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 8001170:	69d3      	ldr	r3, [r2, #28]
 8001172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001176:	61d3      	str	r3, [r2, #28]
 8001178:	e7dc      	b.n	8001134 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_RCC_OscConfig+0x40c>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff fb64 	bl	800084c <HAL_GetTick>
 8001184:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800118e:	d006      	beq.n	800119e <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff fb5c 	bl	800084c <HAL_GetTick>
 8001194:	1b40      	subs	r0, r0, r5
 8001196:	2802      	cmp	r0, #2
 8001198:	d9f5      	bls.n	8001186 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800119a:	2003      	movs	r0, #3
 800119c:	e041      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800119e:	6a23      	ldr	r3, [r4, #32]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d01a      	beq.n	80011dc <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a6:	4922      	ldr	r1, [pc, #136]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 80011a8:	684b      	ldr	r3, [r1, #4]
 80011aa:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80011ae:	6a22      	ldr	r2, [r4, #32]
 80011b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80011b2:	4302      	orrs	r2, r0
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_RCC_OscConfig+0x40c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011be:	f7ff fb45 	bl	800084c <HAL_GetTick>
 80011c2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011cc:	d10e      	bne.n	80011ec <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fb3d 	bl	800084c <HAL_GetTick>
 80011d2:	1b00      	subs	r0, r0, r4
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d9f5      	bls.n	80011c4 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 80011d8:	2003      	movs	r0, #3
 80011da:	e022      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 80011de:	6853      	ldr	r3, [r2, #4]
 80011e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011e4:	68a1      	ldr	r1, [r4, #8]
 80011e6:	430b      	orrs	r3, r1
 80011e8:	6053      	str	r3, [r2, #4]
 80011ea:	e7dc      	b.n	80011a6 <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80011ec:	2000      	movs	r0, #0
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
 80011f0:	2000      	movs	r0, #0
 80011f2:	e016      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d016      	beq.n	8001226 <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_RCC_OscConfig+0x408>)
 80011fa:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011fc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001200:	6a22      	ldr	r2, [r4, #32]
 8001202:	4291      	cmp	r1, r2
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800120a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800120e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001210:	4293      	cmp	r3, r2
 8001212:	d00a      	beq.n	800122a <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e004      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8001218:	2001      	movs	r0, #1
}
 800121a:	4770      	bx	lr
        return HAL_ERROR;
 800121c:	2001      	movs	r0, #1
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8001220:	2000      	movs	r0, #0
}
 8001222:	b002      	add	sp, #8
 8001224:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e7fb      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	e7f9      	b.n	8001222 <HAL_RCC_OscConfig+0x3fa>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	42420060 	.word	0x42420060

08001238 <HAL_RCC_GetSysClockFreq>:
{
 8001238:	b410      	push	{r4}
 800123a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800123c:	4c16      	ldr	r4, [pc, #88]	; (8001298 <HAL_RCC_GetSysClockFreq+0x60>)
 800123e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001242:	f10d 0c18 	add.w	ip, sp, #24
 8001246:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800124a:	8a23      	ldrh	r3, [r4, #16]
 800124c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_GetSysClockFreq+0x64>)
 8001252:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001254:	f003 020c 	and.w	r2, r3, #12
 8001258:	2a08      	cmp	r2, #8
 800125a:	d11a      	bne.n	8001292 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800125c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001260:	4462      	add	r2, ip
 8001262:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001266:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800126a:	d105      	bne.n	8001278 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x68>)
 800126e:	fb00 f002 	mul.w	r0, r0, r2
}
 8001272:	b007      	add	sp, #28
 8001274:	bc10      	pop	{r4}
 8001276:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_RCC_GetSysClockFreq+0x64>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001280:	4463      	add	r3, ip
 8001282:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001288:	fb00 f002 	mul.w	r0, r0, r2
 800128c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001290:	e7ef      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001294:	e7ed      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x3a>
 8001296:	bf00      	nop
 8001298:	08001d7c 	.word	0x08001d7c
 800129c:	40021000 	.word	0x40021000
 80012a0:	003d0900 	.word	0x003d0900
 80012a4:	007a1200 	.word	0x007a1200

080012a8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012a8:	2800      	cmp	r0, #0
 80012aa:	f000 80a3 	beq.w	80013f4 <HAL_RCC_ClockConfig+0x14c>
{
 80012ae:	b570      	push	{r4, r5, r6, lr}
 80012b0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <HAL_RCC_ClockConfig+0x154>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d20c      	bcs.n	80012d8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_RCC_ClockConfig+0x154>)
 80012c0:	6813      	ldr	r3, [r2, #0]
 80012c2:	f023 0307 	bic.w	r3, r3, #7
 80012c6:	430b      	orrs	r3, r1
 80012c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80012d4:	2001      	movs	r0, #1
}
 80012d6:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	f013 0f02 	tst.w	r3, #2
 80012de:	d017      	beq.n	8001310 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e0:	f013 0f04 	tst.w	r3, #4
 80012e4:	d004      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e6:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 80012e8:	6853      	ldr	r3, [r2, #4]
 80012ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ee:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	f013 0f08 	tst.w	r3, #8
 80012f6:	d004      	beq.n	8001302 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f8:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 80012fa:	6853      	ldr	r3, [r2, #4]
 80012fc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001300:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001302:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001304:	6853      	ldr	r3, [r2, #4]
 8001306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800130a:	68a0      	ldr	r0, [r4, #8]
 800130c:	4303      	orrs	r3, r0
 800130e:	6053      	str	r3, [r2, #4]
 8001310:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	f013 0f01 	tst.w	r3, #1
 8001318:	d031      	beq.n	800137e <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d020      	beq.n	8001362 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001320:	2b02      	cmp	r3, #2
 8001322:	d025      	beq.n	8001370 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	f012 0f02 	tst.w	r2, #2
 800132c:	d064      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4934      	ldr	r1, [pc, #208]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001330:	684a      	ldr	r2, [r1, #4]
 8001332:	f022 0203 	bic.w	r2, r2, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800133a:	f7ff fa87 	bl	800084c <HAL_GetTick>
 800133e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	6862      	ldr	r2, [r4, #4]
 800134a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800134e:	d016      	beq.n	800137e <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff fa7c 	bl	800084c <HAL_GetTick>
 8001354:	1b80      	subs	r0, r0, r6
 8001356:	f241 3388 	movw	r3, #5000	; 0x1388
 800135a:	4298      	cmp	r0, r3
 800135c:	d9f0      	bls.n	8001340 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e7b9      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800136a:	d1e0      	bne.n	800132e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e7b2      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001370:	4a23      	ldr	r2, [pc, #140]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001378:	d1d9      	bne.n	800132e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7ab      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_RCC_ClockConfig+0x154>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	42ab      	cmp	r3, r5
 8001388:	d90c      	bls.n	80013a4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_RCC_ClockConfig+0x154>)
 800138c:	6813      	ldr	r3, [r2, #0]
 800138e:	f023 0307 	bic.w	r3, r3, #7
 8001392:	432b      	orrs	r3, r5
 8001394:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	42ab      	cmp	r3, r5
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e798      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	f013 0f04 	tst.w	r3, #4
 80013aa:	d006      	beq.n	80013ba <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 80013ae:	6853      	ldr	r3, [r2, #4]
 80013b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013b4:	68e1      	ldr	r1, [r4, #12]
 80013b6:	430b      	orrs	r3, r1
 80013b8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f013 0f08 	tst.w	r3, #8
 80013c0:	d007      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 80013c4:	6853      	ldr	r3, [r2, #4]
 80013c6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013ca:	6921      	ldr	r1, [r4, #16]
 80013cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013d0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d2:	f7ff ff31 	bl	8001238 <HAL_RCC_GetSysClockFreq>
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x158>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013de:	4a09      	ldr	r2, [pc, #36]	; (8001404 <HAL_RCC_ClockConfig+0x15c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	40d8      	lsrs	r0, r3
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_RCC_ClockConfig+0x160>)
 80013e6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_RCC_ClockConfig+0x164>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	f7ff f9f6 	bl	80007dc <HAL_InitTick>
  return HAL_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e770      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
}
 80013f6:	4770      	bx	lr
        return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
 80013fa:	e76c      	b.n	80012d6 <HAL_RCC_ClockConfig+0x2e>
 80013fc:	40022000 	.word	0x40022000
 8001400:	40021000 	.word	0x40021000
 8001404:	08001d90 	.word	0x08001d90
 8001408:	2000002c 	.word	0x2000002c
 800140c:	20000034 	.word	0x20000034

08001410 <HAL_RCC_GetHCLKFreq>:
}
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <HAL_RCC_GetHCLKFreq+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000002c 	.word	0x2000002c

0800141c <HAL_RCC_GetPCLK1Freq>:
{
 800141c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800141e:	f7ff fff7 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800142a:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
}
 800142e:	40d8      	lsrs	r0, r3
 8001430:	bd08      	pop	{r3, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	08001da0 	.word	0x08001da0

0800143c <HAL_RCC_GetPCLK2Freq>:
{
 800143c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800143e:	f7ff ffe7 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
}
 800144e:	40d8      	lsrs	r0, r3
 8001450:	bd08      	pop	{r3, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	08001da0 	.word	0x08001da0

0800145c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800145c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800145e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001460:	6a04      	ldr	r4, [r0, #32]
 8001462:	f024 0401 	bic.w	r4, r4, #1
 8001466:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001468:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800146a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800146e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001472:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001476:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001478:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800147a:	6203      	str	r3, [r0, #32]
}
 800147c:	bc10      	pop	{r4}
 800147e:	4770      	bx	lr

08001480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001480:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001482:	6a03      	ldr	r3, [r0, #32]
 8001484:	f023 0310 	bic.w	r3, r3, #16
 8001488:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800148a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800148c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800148e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001492:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800149a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800149e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80014a0:	6203      	str	r3, [r0, #32]
}
 80014a2:	bc10      	pop	{r4}
 80014a4:	4770      	bx	lr

080014a6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80014a6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80014a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80014ac:	4319      	orrs	r1, r3
 80014ae:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80014b2:	6081      	str	r1, [r0, #8]
}
 80014b4:	4770      	bx	lr

080014b6 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b6:	6802      	ldr	r2, [r0, #0]
 80014b8:	68d3      	ldr	r3, [r2, #12]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014c0:	6802      	ldr	r2, [r0, #0]
 80014c2:	6893      	ldr	r3, [r2, #8]
 80014c4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014c8:	2b06      	cmp	r3, #6
 80014ca:	d003      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80014cc:	6813      	ldr	r3, [r2, #0]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	2000      	movs	r0, #0
 80014d6:	4770      	bx	lr

080014d8 <HAL_TIM_PeriodElapsedCallback>:
}
 80014d8:	4770      	bx	lr

080014da <HAL_TIM_OC_DelayElapsedCallback>:
}
 80014da:	4770      	bx	lr

080014dc <HAL_TIM_IC_CaptureCallback>:
}
 80014dc:	4770      	bx	lr

080014de <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80014de:	4770      	bx	lr

080014e0 <HAL_TIM_TriggerCallback>:
}
 80014e0:	4770      	bx	lr

080014e2 <HAL_TIM_IRQHandler>:
{
 80014e2:	b510      	push	{r4, lr}
 80014e4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014e6:	6803      	ldr	r3, [r0, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	f012 0f02 	tst.w	r2, #2
 80014ee:	d011      	beq.n	8001514 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	f012 0f02 	tst.w	r2, #2
 80014f6:	d00d      	beq.n	8001514 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014f8:	f06f 0202 	mvn.w	r2, #2
 80014fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014fe:	2301      	movs	r3, #1
 8001500:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001502:	6803      	ldr	r3, [r0, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f013 0f03 	tst.w	r3, #3
 800150a:	d070      	beq.n	80015ee <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800150c:	f7ff ffe6 	bl	80014dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001510:	2300      	movs	r3, #0
 8001512:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	f012 0f04 	tst.w	r2, #4
 800151c:	d012      	beq.n	8001544 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	f012 0f04 	tst.w	r2, #4
 8001524:	d00e      	beq.n	8001544 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001526:	f06f 0204 	mvn.w	r2, #4
 800152a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800152c:	2302      	movs	r3, #2
 800152e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001538:	d05f      	beq.n	80015fa <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ffce 	bl	80014dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001540:	2300      	movs	r3, #0
 8001542:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	f012 0f08 	tst.w	r2, #8
 800154c:	d012      	beq.n	8001574 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	f012 0f08 	tst.w	r2, #8
 8001554:	d00e      	beq.n	8001574 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001556:	f06f 0208 	mvn.w	r2, #8
 800155a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800155c:	2304      	movs	r3, #4
 800155e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f013 0f03 	tst.w	r3, #3
 8001568:	d04e      	beq.n	8001608 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff ffb6 	bl	80014dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001570:	2300      	movs	r3, #0
 8001572:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	f012 0f10 	tst.w	r2, #16
 800157c:	d012      	beq.n	80015a4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	f012 0f10 	tst.w	r2, #16
 8001584:	d00e      	beq.n	80015a4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001586:	f06f 0210 	mvn.w	r2, #16
 800158a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800158c:	2308      	movs	r3, #8
 800158e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001598:	d03d      	beq.n	8001616 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff ff9e 	bl	80014dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a0:	2300      	movs	r3, #0
 80015a2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	f012 0f01 	tst.w	r2, #1
 80015ac:	d003      	beq.n	80015b6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	f012 0f01 	tst.w	r2, #1
 80015b4:	d136      	bne.n	8001624 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	691a      	ldr	r2, [r3, #16]
 80015ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80015c6:	d134      	bne.n	8001632 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80015d0:	d003      	beq.n	80015da <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80015d8:	d132      	bne.n	8001640 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	f012 0f20 	tst.w	r2, #32
 80015e2:	d003      	beq.n	80015ec <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	f012 0f20 	tst.w	r2, #32
 80015ea:	d130      	bne.n	800164e <HAL_TIM_IRQHandler+0x16c>
}
 80015ec:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	f7ff ff74 	bl	80014da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff73 	bl	80014de <HAL_TIM_PWM_PulseFinishedCallback>
 80015f8:	e78a      	b.n	8001510 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff ff6d 	bl	80014da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff ff6c 	bl	80014de <HAL_TIM_PWM_PulseFinishedCallback>
 8001606:	e79b      	b.n	8001540 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff ff66 	bl	80014da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160e:	4620      	mov	r0, r4
 8001610:	f7ff ff65 	bl	80014de <HAL_TIM_PWM_PulseFinishedCallback>
 8001614:	e7ac      	b.n	8001570 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff ff5f 	bl	80014da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800161c:	4620      	mov	r0, r4
 800161e:	f7ff ff5e 	bl	80014de <HAL_TIM_PWM_PulseFinishedCallback>
 8001622:	e7bd      	b.n	80015a0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001624:	f06f 0201 	mvn.w	r2, #1
 8001628:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff ff54 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
 8001630:	e7c1      	b.n	80015b6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001632:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001636:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001638:	4620      	mov	r0, r4
 800163a:	f000 f8fe 	bl	800183a <HAL_TIMEx_BreakCallback>
 800163e:	e7c3      	b.n	80015c8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001644:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff4a 	bl	80014e0 <HAL_TIM_TriggerCallback>
 800164c:	e7c5      	b.n	80015da <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800164e:	f06f 0220 	mvn.w	r2, #32
 8001652:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001654:	4620      	mov	r0, r4
 8001656:	f000 f8ef 	bl	8001838 <HAL_TIMEx_CommutCallback>
}
 800165a:	e7c7      	b.n	80015ec <HAL_TIM_IRQHandler+0x10a>

0800165c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800165c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <TIM_Base_SetConfig+0x70>)
 8001660:	4290      	cmp	r0, r2
 8001662:	d00a      	beq.n	800167a <TIM_Base_SetConfig+0x1e>
 8001664:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001668:	d007      	beq.n	800167a <TIM_Base_SetConfig+0x1e>
 800166a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800166e:	4290      	cmp	r0, r2
 8001670:	d003      	beq.n	800167a <TIM_Base_SetConfig+0x1e>
 8001672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001676:	4290      	cmp	r0, r2
 8001678:	d103      	bne.n	8001682 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800167a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800167e:	684a      	ldr	r2, [r1, #4]
 8001680:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <TIM_Base_SetConfig+0x70>)
 8001684:	4290      	cmp	r0, r2
 8001686:	d00a      	beq.n	800169e <TIM_Base_SetConfig+0x42>
 8001688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800168c:	d007      	beq.n	800169e <TIM_Base_SetConfig+0x42>
 800168e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001692:	4290      	cmp	r0, r2
 8001694:	d003      	beq.n	800169e <TIM_Base_SetConfig+0x42>
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	4290      	cmp	r0, r2
 800169c:	d103      	bne.n	80016a6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800169e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016a2:	68ca      	ldr	r2, [r1, #12]
 80016a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016aa:	694a      	ldr	r2, [r1, #20]
 80016ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80016ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016b0:	688b      	ldr	r3, [r1, #8]
 80016b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <TIM_Base_SetConfig+0x70>)
 80016ba:	4298      	cmp	r0, r3
 80016bc:	d002      	beq.n	80016c4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80016be:	2301      	movs	r3, #1
 80016c0:	6143      	str	r3, [r0, #20]
}
 80016c2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80016c4:	690b      	ldr	r3, [r1, #16]
 80016c6:	6303      	str	r3, [r0, #48]	; 0x30
 80016c8:	e7f9      	b.n	80016be <TIM_Base_SetConfig+0x62>
 80016ca:	bf00      	nop
 80016cc:	40012c00 	.word	0x40012c00

080016d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80016d0:	b1a8      	cbz	r0, 80016fe <HAL_TIM_Base_Init+0x2e>
{
 80016d2:	b510      	push	{r4, lr}
 80016d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80016d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016da:	b15b      	cbz	r3, 80016f4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80016dc:	2302      	movs	r3, #2
 80016de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016e2:	1d21      	adds	r1, r4, #4
 80016e4:	6820      	ldr	r0, [r4, #0]
 80016e6:	f7ff ffb9 	bl	800165c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016f0:	2000      	movs	r0, #0
}
 80016f2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016f8:	f7fe ff2a 	bl	8000550 <HAL_TIM_Base_MspInit>
 80016fc:	e7ee      	b.n	80016dc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80016fe:	2001      	movs	r0, #1
}
 8001700:	4770      	bx	lr

08001702 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001702:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001704:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001706:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800170a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800170e:	430b      	orrs	r3, r1
 8001710:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001712:	6083      	str	r3, [r0, #8]
}
 8001714:	bc10      	pop	{r4}
 8001716:	4770      	bx	lr

08001718 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001718:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800171c:	2b01      	cmp	r3, #1
 800171e:	d066      	beq.n	80017ee <HAL_TIM_ConfigClockSource+0xd6>
{
 8001720:	b510      	push	{r4, lr}
 8001722:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001724:	2301      	movs	r3, #1
 8001726:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001734:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001738:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800173c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800173e:	680b      	ldr	r3, [r1, #0]
 8001740:	2b40      	cmp	r3, #64	; 0x40
 8001742:	d04a      	beq.n	80017da <HAL_TIM_ConfigClockSource+0xc2>
 8001744:	d913      	bls.n	800176e <HAL_TIM_ConfigClockSource+0x56>
 8001746:	2b60      	cmp	r3, #96	; 0x60
 8001748:	d03d      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0xae>
 800174a:	d91e      	bls.n	800178a <HAL_TIM_ConfigClockSource+0x72>
 800174c:	2b70      	cmp	r3, #112	; 0x70
 800174e:	d028      	beq.n	80017a2 <HAL_TIM_ConfigClockSource+0x8a>
 8001750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001754:	d130      	bne.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8001756:	68cb      	ldr	r3, [r1, #12]
 8001758:	684a      	ldr	r2, [r1, #4]
 800175a:	6889      	ldr	r1, [r1, #8]
 800175c:	6800      	ldr	r0, [r0, #0]
 800175e:	f7ff ffd0 	bl	8001702 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001762:	6822      	ldr	r2, [r4, #0]
 8001764:	6893      	ldr	r3, [r2, #8]
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	6093      	str	r3, [r2, #8]
      break;
 800176c:	e024      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800176e:	2b10      	cmp	r3, #16
 8001770:	d006      	beq.n	8001780 <HAL_TIM_ConfigClockSource+0x68>
 8001772:	d904      	bls.n	800177e <HAL_TIM_ConfigClockSource+0x66>
 8001774:	2b20      	cmp	r3, #32
 8001776:	d003      	beq.n	8001780 <HAL_TIM_ConfigClockSource+0x68>
 8001778:	2b30      	cmp	r3, #48	; 0x30
 800177a:	d001      	beq.n	8001780 <HAL_TIM_ConfigClockSource+0x68>
 800177c:	e01c      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
 800177e:	b9db      	cbnz	r3, 80017b8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001780:	4619      	mov	r1, r3
 8001782:	6820      	ldr	r0, [r4, #0]
 8001784:	f7ff fe8f 	bl	80014a6 <TIM_ITRx_SetConfig>
      break;
 8001788:	e016      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800178a:	2b50      	cmp	r3, #80	; 0x50
 800178c:	d114      	bne.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800178e:	68ca      	ldr	r2, [r1, #12]
 8001790:	6849      	ldr	r1, [r1, #4]
 8001792:	6800      	ldr	r0, [r0, #0]
 8001794:	f7ff fe62 	bl	800145c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001798:	2150      	movs	r1, #80	; 0x50
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	f7ff fe83 	bl	80014a6 <TIM_ITRx_SetConfig>
      break;
 80017a0:	e00a      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80017a2:	68cb      	ldr	r3, [r1, #12]
 80017a4:	684a      	ldr	r2, [r1, #4]
 80017a6:	6889      	ldr	r1, [r1, #8]
 80017a8:	6800      	ldr	r0, [r0, #0]
 80017aa:	f7ff ffaa 	bl	8001702 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017ae:	6822      	ldr	r2, [r4, #0]
 80017b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80017b6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80017b8:	2301      	movs	r3, #1
 80017ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017be:	2000      	movs	r0, #0
 80017c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80017c4:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80017c6:	68ca      	ldr	r2, [r1, #12]
 80017c8:	6849      	ldr	r1, [r1, #4]
 80017ca:	6800      	ldr	r0, [r0, #0]
 80017cc:	f7ff fe58 	bl	8001480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017d0:	2160      	movs	r1, #96	; 0x60
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	f7ff fe67 	bl	80014a6 <TIM_ITRx_SetConfig>
      break;
 80017d8:	e7ee      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017da:	68ca      	ldr	r2, [r1, #12]
 80017dc:	6849      	ldr	r1, [r1, #4]
 80017de:	6800      	ldr	r0, [r0, #0]
 80017e0:	f7ff fe3c 	bl	800145c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017e4:	2140      	movs	r1, #64	; 0x40
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	f7ff fe5d 	bl	80014a6 <TIM_ITRx_SetConfig>
      break;
 80017ec:	e7e4      	b.n	80017b8 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80017ee:	2002      	movs	r0, #2
}
 80017f0:	4770      	bx	lr

080017f2 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d01c      	beq.n	8001834 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80017fa:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80017fc:	2601      	movs	r6, #1
 80017fe:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001802:	2302      	movs	r3, #2
 8001804:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001808:	6802      	ldr	r2, [r0, #0]
 800180a:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800180c:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800180e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001812:	680c      	ldr	r4, [r1, #0]
 8001814:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001816:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800181a:	684b      	ldr	r3, [r1, #4]
 800181c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800181e:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001820:	6802      	ldr	r2, [r0, #0]
 8001822:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001824:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001828:	2300      	movs	r3, #0
 800182a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800182e:	4618      	mov	r0, r3
}
 8001830:	bc70      	pop	{r4, r5, r6}
 8001832:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001834:	2002      	movs	r0, #2
}
 8001836:	4770      	bx	lr

08001838 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001838:	4770      	bx	lr

0800183a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800183a:	4770      	bx	lr

0800183c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800183c:	6802      	ldr	r2, [r0, #0]
 800183e:	68d3      	ldr	r3, [r2, #12]
 8001840:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001844:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001846:	2320      	movs	r3, #32
 8001848:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 800184c:	4770      	bx	lr

0800184e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800184e:	6802      	ldr	r2, [r0, #0]
 8001850:	68d3      	ldr	r3, [r2, #12]
 8001852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001856:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001858:	6802      	ldr	r2, [r0, #0]
 800185a:	6953      	ldr	r3, [r2, #20]
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001862:	2320      	movs	r3, #32
 8001864:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001868:	4770      	bx	lr

0800186a <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800186a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b21      	cmp	r3, #33	; 0x21
 8001872:	d12a      	bne.n	80018ca <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001874:	6883      	ldr	r3, [r0, #8]
 8001876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187a:	d016      	beq.n	80018aa <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800187c:	6a03      	ldr	r3, [r0, #32]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	6202      	str	r2, [r0, #32]
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	6803      	ldr	r3, [r0, #0]
 8001886:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001888:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800188a:	3b01      	subs	r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001890:	b9eb      	cbnz	r3, 80018ce <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001892:	6802      	ldr	r2, [r0, #0]
 8001894:	68d3      	ldr	r3, [r2, #12]
 8001896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800189a:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800189c:	6802      	ldr	r2, [r0, #0]
 800189e:	68d3      	ldr	r3, [r2, #12]
 80018a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a4:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80018a6:	2000      	movs	r0, #0
 80018a8:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80018aa:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b4:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80018b6:	6903      	ldr	r3, [r0, #16]
 80018b8:	b91b      	cbnz	r3, 80018c2 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80018ba:	6a03      	ldr	r3, [r0, #32]
 80018bc:	3302      	adds	r3, #2
 80018be:	6203      	str	r3, [r0, #32]
 80018c0:	e7e2      	b.n	8001888 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80018c2:	6a03      	ldr	r3, [r0, #32]
 80018c4:	3301      	adds	r3, #1
 80018c6:	6203      	str	r3, [r0, #32]
 80018c8:	e7de      	b.n	8001888 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80018ca:	2002      	movs	r0, #2
 80018cc:	4770      	bx	lr
    return HAL_OK;
 80018ce:	2000      	movs	r0, #0
  }
}
 80018d0:	4770      	bx	lr
	...

080018d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d4:	b538      	push	{r3, r4, r5, lr}
 80018d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018d8:	6802      	ldr	r2, [r0, #0]
 80018da:	6913      	ldr	r3, [r2, #16]
 80018dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e0:	68c1      	ldr	r1, [r0, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018e6:	6883      	ldr	r3, [r0, #8]
 80018e8:	6902      	ldr	r2, [r0, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	6942      	ldr	r2, [r0, #20]
 80018ee:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80018f0:	6801      	ldr	r1, [r0, #0]
 80018f2:	68cb      	ldr	r3, [r1, #12]
 80018f4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018f8:	f023 030c 	bic.w	r3, r3, #12
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001900:	6802      	ldr	r2, [r0, #0]
 8001902:	6953      	ldr	r3, [r2, #20]
 8001904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001908:	6981      	ldr	r1, [r0, #24]
 800190a:	430b      	orrs	r3, r1
 800190c:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800190e:	6802      	ldr	r2, [r0, #0]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <UART_SetConfig+0xc4>)
 8001912:	429a      	cmp	r2, r3
 8001914:	d01f      	beq.n	8001956 <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001916:	f7ff fd81 	bl	800141c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800191a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800191e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	fbb0 f0f3 	udiv	r0, r0, r3
 800192a:	4d1c      	ldr	r5, [pc, #112]	; (800199c <UART_SetConfig+0xc8>)
 800192c:	fba5 3200 	umull	r3, r2, r5, r0
 8001930:	0951      	lsrs	r1, r2, #5
 8001932:	2264      	movs	r2, #100	; 0x64
 8001934:	fb02 0211 	mls	r2, r2, r1, r0
 8001938:	0113      	lsls	r3, r2, #4
 800193a:	3332      	adds	r3, #50	; 0x32
 800193c:	fba5 2303 	umull	r2, r3, r5, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001946:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	6821      	ldr	r1, [r4, #0]
 8001950:	4413      	add	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001954:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001956:	f7ff fd71 	bl	800143c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800195a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800195e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001962:	6863      	ldr	r3, [r4, #4]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fbb0 f0f3 	udiv	r0, r0, r3
 800196a:	4d0c      	ldr	r5, [pc, #48]	; (800199c <UART_SetConfig+0xc8>)
 800196c:	fba5 3200 	umull	r3, r2, r5, r0
 8001970:	0951      	lsrs	r1, r2, #5
 8001972:	2264      	movs	r2, #100	; 0x64
 8001974:	fb02 0211 	mls	r2, r2, r1, r0
 8001978:	0113      	lsls	r3, r2, #4
 800197a:	3332      	adds	r3, #50	; 0x32
 800197c:	fba5 2303 	umull	r2, r3, r5, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001986:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	6821      	ldr	r1, [r4, #0]
 8001990:	4413      	add	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
 8001994:	e7de      	b.n	8001954 <UART_SetConfig+0x80>
 8001996:	bf00      	nop
 8001998:	40013800 	.word	0x40013800
 800199c:	51eb851f 	.word	0x51eb851f

080019a0 <HAL_UART_Init>:
  if (huart == NULL)
 80019a0:	b358      	cbz	r0, 80019fa <HAL_UART_Init+0x5a>
{
 80019a2:	b510      	push	{r4, lr}
 80019a4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019aa:	b30b      	cbz	r3, 80019f0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80019ac:	2324      	movs	r3, #36	; 0x24
 80019ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80019b2:	6822      	ldr	r2, [r4, #0]
 80019b4:	68d3      	ldr	r3, [r2, #12]
 80019b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff ff89 	bl	80018d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	6913      	ldr	r3, [r2, #16]
 80019c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019ca:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	6953      	ldr	r3, [r2, #20]
 80019d0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019d4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	68d3      	ldr	r3, [r2, #12]
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	2000      	movs	r0, #0
 80019e2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019e4:	2320      	movs	r3, #32
 80019e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80019ee:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019f4:	f7fe fde4 	bl	80005c0 <HAL_UART_MspInit>
 80019f8:	e7d8      	b.n	80019ac <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_UART_Transmit_DMA>:
{
 8001a00:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001a02:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 8001a06:	b2e4      	uxtb	r4, r4
 8001a08:	2c20      	cmp	r4, #32
 8001a0a:	d131      	bne.n	8001a70 <HAL_UART_Transmit_DMA+0x70>
    if ((pData == NULL) || (Size == 0U))
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d031      	beq.n	8001a74 <HAL_UART_Transmit_DMA+0x74>
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 8001a14:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d02f      	beq.n	8001a7c <HAL_UART_Transmit_DMA+0x7c>
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	4604      	mov	r4, r0
 8001a20:	2201      	movs	r2, #1
 8001a22:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8001a26:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001a28:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a2a:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a30:	2221      	movs	r2, #33	; 0x21
 8001a32:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001a36:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001a38:	4811      	ldr	r0, [pc, #68]	; (8001a80 <HAL_UART_Transmit_DMA+0x80>)
 8001a3a:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001a3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3e:	4811      	ldr	r0, [pc, #68]	; (8001a84 <HAL_UART_Transmit_DMA+0x84>)
 8001a40:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001a42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_UART_Transmit_DMA+0x88>)
 8001a46:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8001a48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a4a:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001a4c:	6822      	ldr	r2, [r4, #0]
 8001a4e:	3204      	adds	r2, #4
 8001a50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a52:	f7fe ffb7 	bl	80009c4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a5c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8001a5e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001a62:	6822      	ldr	r2, [r4, #0]
 8001a64:	6953      	ldr	r3, [r2, #20]
 8001a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6a:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	e000      	b.n	8001a72 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8001a70:	2002      	movs	r0, #2
}
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001a74:	2001      	movs	r0, #1
 8001a76:	e7fc      	b.n	8001a72 <HAL_UART_Transmit_DMA+0x72>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	e7fa      	b.n	8001a72 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	e7f8      	b.n	8001a72 <HAL_UART_Transmit_DMA+0x72>
 8001a80:	08001a8f 	.word	0x08001a8f
 8001a84:	08001adb 	.word	0x08001adb
 8001a88:	08001b85 	.word	0x08001b85

08001a8c <HAL_UART_TxCpltCallback>:
}
 8001a8c:	4770      	bx	lr

08001a8e <UART_DMATransmitCplt>:
{
 8001a8e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a90:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a92:	6802      	ldr	r2, [r0, #0]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	f012 0f20 	tst.w	r2, #32
 8001a9a:	d10c      	bne.n	8001ab6 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	694a      	ldr	r2, [r1, #20]
 8001aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa8:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68d3      	ldr	r3, [r2, #12]
 8001aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ffe8 	bl	8001a8c <HAL_UART_TxCpltCallback>
}
 8001abc:	e7fa      	b.n	8001ab4 <UART_DMATransmitCplt+0x26>

08001abe <UART_EndTransmit_IT>:
{
 8001abe:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ac0:	6801      	ldr	r1, [r0, #0]
 8001ac2:	68cb      	ldr	r3, [r1, #12]
 8001ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001aca:	2320      	movs	r3, #32
 8001acc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001ad0:	f7ff ffdc 	bl	8001a8c <HAL_UART_TxCpltCallback>
}
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	bd08      	pop	{r3, pc}

08001ad8 <HAL_UART_TxHalfCpltCallback>:
}
 8001ad8:	4770      	bx	lr

08001ada <UART_DMATxHalfCplt>:
{
 8001ada:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8001adc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001ade:	f7ff fffb 	bl	8001ad8 <HAL_UART_TxHalfCpltCallback>
}
 8001ae2:	bd08      	pop	{r3, pc}

08001ae4 <HAL_UART_RxCpltCallback>:
}
 8001ae4:	4770      	bx	lr

08001ae6 <UART_Receive_IT>:
{
 8001ae6:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ae8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b22      	cmp	r3, #34	; 0x22
 8001af0:	d145      	bne.n	8001b7e <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001af2:	6883      	ldr	r3, [r0, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d00e      	beq.n	8001b18 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001afa:	6903      	ldr	r3, [r0, #16]
 8001afc:	bb03      	cbnz	r3, 8001b40 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001afe:	6803      	ldr	r3, [r0, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b04:	1c59      	adds	r1, r3, #1
 8001b06:	6281      	str	r1, [r0, #40]	; 0x28
 8001b08:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8001b0a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001b12:	b1f3      	cbz	r3, 8001b52 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8001b14:	2000      	movs	r0, #0
 8001b16:	e033      	b.n	8001b80 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001b18:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b1a:	6903      	ldr	r3, [r0, #16]
 8001b1c:	b943      	cbnz	r3, 8001b30 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b26:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001b28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	6283      	str	r3, [r0, #40]	; 0x28
 8001b2e:	e7ec      	b.n	8001b0a <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b30:	6803      	ldr	r3, [r0, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	6283      	str	r3, [r0, #40]	; 0x28
 8001b3e:	e7e4      	b.n	8001b0a <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b40:	6803      	ldr	r3, [r0, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001b46:	1c51      	adds	r1, r2, #1
 8001b48:	6281      	str	r1, [r0, #40]	; 0x28
 8001b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b4e:	7013      	strb	r3, [r2, #0]
 8001b50:	e7db      	b.n	8001b0a <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b52:	6802      	ldr	r2, [r0, #0]
 8001b54:	68d3      	ldr	r3, [r2, #12]
 8001b56:	f023 0320 	bic.w	r3, r3, #32
 8001b5a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	68d3      	ldr	r3, [r2, #12]
 8001b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b64:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b66:	6802      	ldr	r2, [r0, #0]
 8001b68:	6953      	ldr	r3, [r2, #20]
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b70:	2320      	movs	r3, #32
 8001b72:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b76:	f7ff ffb5 	bl	8001ae4 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e000      	b.n	8001b80 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8001b7e:	2002      	movs	r0, #2
}
 8001b80:	bd08      	pop	{r3, pc}

08001b82 <HAL_UART_ErrorCallback>:
}
 8001b82:	4770      	bx	lr

08001b84 <UART_DMAError>:
{
 8001b84:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b86:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001b8c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b21      	cmp	r3, #33	; 0x21
 8001b94:	d010      	beq.n	8001bb8 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001b9e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b22      	cmp	r3, #34	; 0x22
 8001ba6:	d011      	beq.n	8001bcc <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001ba8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ffe6 	bl	8001b82 <HAL_UART_ErrorCallback>
}
 8001bb6:	bd10      	pop	{r4, pc}
 8001bb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d0ea      	beq.n	8001b96 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f7ff fe39 	bl	800183c <UART_EndTxTransfer>
 8001bca:	e7e4      	b.n	8001b96 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d0eb      	beq.n	8001ba8 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff fe3a 	bl	800184e <UART_EndRxTransfer>
 8001bda:	e7e5      	b.n	8001ba8 <UART_DMAError+0x24>

08001bdc <HAL_UART_IRQHandler>:
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001be4:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001be6:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8001be8:	f013 000f 	ands.w	r0, r3, #15
 8001bec:	d105      	bne.n	8001bfa <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bee:	f013 0f20 	tst.w	r3, #32
 8001bf2:	d002      	beq.n	8001bfa <HAL_UART_IRQHandler+0x1e>
 8001bf4:	f011 0f20 	tst.w	r1, #32
 8001bf8:	d153      	bne.n	8001ca2 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d067      	beq.n	8001cce <HAL_UART_IRQHandler+0xf2>
 8001bfe:	f012 0201 	ands.w	r2, r2, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_UART_IRQHandler+0x2e>
 8001c04:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c08:	d061      	beq.n	8001cce <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c0a:	f013 0f01 	tst.w	r3, #1
 8001c0e:	d006      	beq.n	8001c1e <HAL_UART_IRQHandler+0x42>
 8001c10:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001c14:	d003      	beq.n	8001c1e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c16:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c18:	f040 0001 	orr.w	r0, r0, #1
 8001c1c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1e:	f013 0f04 	tst.w	r3, #4
 8001c22:	d004      	beq.n	8001c2e <HAL_UART_IRQHandler+0x52>
 8001c24:	b11a      	cbz	r2, 8001c2e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c28:	f040 0002 	orr.w	r0, r0, #2
 8001c2c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c2e:	f013 0f02 	tst.w	r3, #2
 8001c32:	d004      	beq.n	8001c3e <HAL_UART_IRQHandler+0x62>
 8001c34:	b11a      	cbz	r2, 8001c3e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c38:	f040 0004 	orr.w	r0, r0, #4
 8001c3c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3e:	f013 0f08 	tst.w	r3, #8
 8001c42:	d004      	beq.n	8001c4e <HAL_UART_IRQHandler+0x72>
 8001c44:	b11a      	cbz	r2, 8001c4e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c48:	f042 0208 	orr.w	r2, r2, #8
 8001c4c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d048      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c54:	f013 0f20 	tst.w	r3, #32
 8001c58:	d002      	beq.n	8001c60 <HAL_UART_IRQHandler+0x84>
 8001c5a:	f011 0f20 	tst.w	r1, #32
 8001c5e:	d124      	bne.n	8001caa <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c6a:	f012 0f08 	tst.w	r2, #8
 8001c6e:	d100      	bne.n	8001c72 <HAL_UART_IRQHandler+0x96>
 8001c70:	b33b      	cbz	r3, 8001cc2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001c72:	4620      	mov	r0, r4
 8001c74:	f7ff fdeb 	bl	800184e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c80:	d01b      	beq.n	8001cba <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c88:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c8c:	b18b      	cbz	r3, 8001cb2 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_UART_IRQHandler+0x11c>)
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c92:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c94:	f7fe fed0 	bl	8000a38 <HAL_DMA_Abort_IT>
 8001c98:	b328      	cbz	r0, 8001ce6 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c9a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c9e:	4798      	blx	r3
 8001ca0:	e021      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff ff1f 	bl	8001ae6 <UART_Receive_IT>
      return;
 8001ca8:	e01d      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff ff1b 	bl	8001ae6 <UART_Receive_IT>
 8001cb0:	e7d6      	b.n	8001c60 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff ff65 	bl	8001b82 <HAL_UART_ErrorCallback>
 8001cb8:	e015      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff ff61 	bl	8001b82 <HAL_UART_ErrorCallback>
 8001cc0:	e011      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ff5d 	bl	8001b82 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001ccc:	e00b      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cce:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001cd2:	d002      	beq.n	8001cda <HAL_UART_IRQHandler+0xfe>
 8001cd4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cd8:	d106      	bne.n	8001ce8 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cde:	d002      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
 8001ce0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001ce4:	d104      	bne.n	8001cf0 <HAL_UART_IRQHandler+0x114>
}
 8001ce6:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff fdbe 	bl	800186a <UART_Transmit_IT>
    return;
 8001cee:	e7fa      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fee4 	bl	8001abe <UART_EndTransmit_IT>
    return;
 8001cf6:	e7f6      	b.n	8001ce6 <HAL_UART_IRQHandler+0x10a>
 8001cf8:	08001cfd 	.word	0x08001cfd

08001cfc <UART_DMAAbortOnError>:
{
 8001cfc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d04:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d06:	f7ff ff3c 	bl	8001b82 <HAL_UART_ErrorCallback>
}
 8001d0a:	bd08      	pop	{r3, pc}

08001d0c <__libc_init_array>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	2500      	movs	r5, #0
 8001d10:	4e0c      	ldr	r6, [pc, #48]	; (8001d44 <__libc_init_array+0x38>)
 8001d12:	4c0d      	ldr	r4, [pc, #52]	; (8001d48 <__libc_init_array+0x3c>)
 8001d14:	1ba4      	subs	r4, r4, r6
 8001d16:	10a4      	asrs	r4, r4, #2
 8001d18:	42a5      	cmp	r5, r4
 8001d1a:	d109      	bne.n	8001d30 <__libc_init_array+0x24>
 8001d1c:	f000 f822 	bl	8001d64 <_init>
 8001d20:	2500      	movs	r5, #0
 8001d22:	4e0a      	ldr	r6, [pc, #40]	; (8001d4c <__libc_init_array+0x40>)
 8001d24:	4c0a      	ldr	r4, [pc, #40]	; (8001d50 <__libc_init_array+0x44>)
 8001d26:	1ba4      	subs	r4, r4, r6
 8001d28:	10a4      	asrs	r4, r4, #2
 8001d2a:	42a5      	cmp	r5, r4
 8001d2c:	d105      	bne.n	8001d3a <__libc_init_array+0x2e>
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d34:	4798      	blx	r3
 8001d36:	3501      	adds	r5, #1
 8001d38:	e7ee      	b.n	8001d18 <__libc_init_array+0xc>
 8001d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d3e:	4798      	blx	r3
 8001d40:	3501      	adds	r5, #1
 8001d42:	e7f2      	b.n	8001d2a <__libc_init_array+0x1e>
 8001d44:	08001da8 	.word	0x08001da8
 8001d48:	08001da8 	.word	0x08001da8
 8001d4c:	08001da8 	.word	0x08001da8
 8001d50:	08001dac 	.word	0x08001dac

08001d54 <memset>:
 8001d54:	4603      	mov	r3, r0
 8001d56:	4402      	add	r2, r0
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <memset+0xa>
 8001d5c:	4770      	bx	lr
 8001d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d62:	e7f9      	b.n	8001d58 <memset+0x4>

08001d64 <_init>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr

08001d70 <_fini>:
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	bf00      	nop
 8001d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d76:	bc08      	pop	{r3}
 8001d78:	469e      	mov	lr, r3
 8001d7a:	4770      	bx	lr
