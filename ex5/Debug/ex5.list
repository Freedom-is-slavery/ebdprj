
ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d54  08001d54  00011d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d80  08001d80  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001d80  08001d80  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d80  08001d80  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000038  08001dc0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08001dc0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8ee  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ba  00000000  00000000  0002b94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002d310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013676  00000000  00000000  0002e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079dc  00000000  00000000  00041f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006db06  00000000  00000000  0004992a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d0c  00000000  00000000  000b74ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000785a  00000000  00000000  000b91b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d3c 	.word	0x08001d3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08001d3c 	.word	0x08001d3c

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9405      	str	r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000154:	4b14      	ldr	r3, [pc, #80]	; (80001a8 <MX_GPIO_Init+0x5c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	f042 0204 	orr.w	r2, r2, #4
 800015c:	619a      	str	r2, [r3, #24]
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	f003 0304 	and.w	r3, r3, #4
 8000164:	9301      	str	r3, [sp, #4]
 8000166:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin : KeyRound_Pin */
  GPIO_InitStruct.Pin = KeyRound_Pin;
 8000168:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800016c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <MX_GPIO_Init+0x60>)
 8000170:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000172:	2601      	movs	r6, #1
 8000174:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(KeyRound_GPIO_Port, &GPIO_InitStruct);
 8000176:	4d0e      	ldr	r5, [pc, #56]	; (80001b0 <MX_GPIO_Init+0x64>)
 8000178:	a902      	add	r1, sp, #8
 800017a:	4628      	mov	r0, r5
 800017c:	f000 fd24 	bl	8000bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeyOutputMode_Pin */
  GPIO_InitStruct.Pin = KeyOutputMode_Pin;
 8000180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000184:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000186:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <MX_GPIO_Init+0x68>)
 8000188:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800018a:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(KeyOutputMode_GPIO_Port, &GPIO_InitStruct);
 800018c:	a902      	add	r1, sp, #8
 800018e:	4628      	mov	r0, r5
 8000190:	f000 fd1a 	bl	8000bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000194:	4622      	mov	r2, r4
 8000196:	4621      	mov	r1, r4
 8000198:	2028      	movs	r0, #40	; 0x28
 800019a:	f000 fb49 	bl	8000830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800019e:	2028      	movs	r0, #40	; 0x28
 80001a0:	f000 fb7a 	bl	8000898 <HAL_NVIC_EnableIRQ>

}
 80001a4:	b006      	add	sp, #24
 80001a6:	bd70      	pop	{r4, r5, r6, pc}
 80001a8:	40021000 	.word	0x40021000
 80001ac:	10210000 	.word	0x10210000
 80001b0:	40010800 	.word	0x40010800
 80001b4:	10110000 	.word	0x10110000

080001b8 <MX_DMA_Init>:
{
 80001b8:	b500      	push	{lr}
 80001ba:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <MX_DMA_Init+0x30>)
 80001be:	695a      	ldr	r2, [r3, #20]
 80001c0:	f042 0201 	orr.w	r2, r2, #1
 80001c4:	615a      	str	r2, [r3, #20]
 80001c6:	695b      	ldr	r3, [r3, #20]
 80001c8:	f003 0301 	and.w	r3, r3, #1
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	4611      	mov	r1, r2
 80001d4:	200e      	movs	r0, #14
 80001d6:	f000 fb2b 	bl	8000830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80001da:	200e      	movs	r0, #14
 80001dc:	f000 fb5c 	bl	8000898 <HAL_NVIC_EnableIRQ>
}
 80001e0:	b003      	add	sp, #12
 80001e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000

080001ec <MX_TIM3_Init>:
{
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001f0:	2400      	movs	r4, #0
 80001f2:	9402      	str	r4, [sp, #8]
 80001f4:	9403      	str	r4, [sp, #12]
 80001f6:	9404      	str	r4, [sp, #16]
 80001f8:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80001fa:	9400      	str	r4, [sp, #0]
 80001fc:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 80001fe:	4d0f      	ldr	r5, [pc, #60]	; (800023c <MX_TIM3_Init+0x50>)
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_TIM3_Init+0x54>)
 8000202:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 32000-1;
 8000204:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000208:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800020a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 1000-1;
 800020c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000210:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000212:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000214:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000216:	4628      	mov	r0, r5
 8000218:	f001 fa46 	bl	80016a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800021c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000220:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000222:	a902      	add	r1, sp, #8
 8000224:	4628      	mov	r0, r5
 8000226:	f001 fa63 	bl	80016f0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800022a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800022c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800022e:	4669      	mov	r1, sp
 8000230:	4628      	mov	r0, r5
 8000232:	f001 faca 	bl	80017ca <HAL_TIMEx_MasterConfigSynchronization>
}
 8000236:	b007      	add	sp, #28
 8000238:	bd30      	pop	{r4, r5, pc}
 800023a:	bf00      	nop
 800023c:	20000098 	.word	0x20000098
 8000240:	40000400 	.word	0x40000400

08000244 <MX_TIM4_Init>:
{
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000248:	2400      	movs	r4, #0
 800024a:	9402      	str	r4, [sp, #8]
 800024c:	9403      	str	r4, [sp, #12]
 800024e:	9404      	str	r4, [sp, #16]
 8000250:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000252:	9400      	str	r4, [sp, #0]
 8000254:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 8000256:	4d0f      	ldr	r5, [pc, #60]	; (8000294 <MX_TIM4_Init+0x50>)
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_TIM4_Init+0x54>)
 800025a:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 32000-1;
 800025c:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8000260:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000262:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 10000-1;
 8000264:	f242 730f 	movw	r3, #9999	; 0x270f
 8000268:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800026a:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800026c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800026e:	4628      	mov	r0, r5
 8000270:	f001 fa1a 	bl	80016a8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000278:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800027a:	a902      	add	r1, sp, #8
 800027c:	4628      	mov	r0, r5
 800027e:	f001 fa37 	bl	80016f0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000282:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000284:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000286:	4669      	mov	r1, sp
 8000288:	4628      	mov	r0, r5
 800028a:	f001 fa9e 	bl	80017ca <HAL_TIMEx_MasterConfigSynchronization>
}
 800028e:	b007      	add	sp, #28
 8000290:	bd30      	pop	{r4, r5, pc}
 8000292:	bf00      	nop
 8000294:	20000058 	.word	0x20000058
 8000298:	40000800 	.word	0x40000800

0800029c <MX_USART1_UART_Init>:
{
 800029c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <MX_USART1_UART_Init+0x24>)
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MX_USART1_UART_Init+0x28>)
 80002a2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80002a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002a8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	2300      	movs	r3, #0
 80002ac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b2:	220c      	movs	r2, #12
 80002b4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002b6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ba:	f001 fb5d 	bl	8001978 <HAL_UART_Init>
}
 80002be:	bd08      	pop	{r3, pc}
 80002c0:	20000124 	.word	0x20000124
 80002c4:	40013800 	.word	0x40013800

080002c8 <SystemClock_Config>:
{
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	2220      	movs	r2, #32
 80002ce:	2100      	movs	r1, #0
 80002d0:	a807      	add	r0, sp, #28
 80002d2:	f001 fd2b 	bl	8001d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	2400      	movs	r4, #0
 80002d8:	9401      	str	r4, [sp, #4]
 80002da:	9402      	str	r4, [sp, #8]
 80002dc:	9403      	str	r4, [sp, #12]
 80002de:	9404      	str	r4, [sp, #16]
 80002e0:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2502      	movs	r5, #2
 80002e4:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2601      	movs	r6, #1
 80002e8:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002f0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002f4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	a806      	add	r0, sp, #24
 80002f8:	f000 fd70 	bl	8000ddc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	4631      	mov	r1, r6
 800030a:	a801      	add	r0, sp, #4
 800030c:	f000 ffa6 	bl	800125c <HAL_RCC_ClockConfig>
}
 8000310:	b010      	add	sp, #64	; 0x40
 8000312:	bd70      	pop	{r4, r5, r6, pc}

08000314 <main>:
{
 8000314:	b508      	push	{r3, lr}
  HAL_Init();
 8000316:	f000 fa55 	bl	80007c4 <HAL_Init>
  SystemClock_Config();
 800031a:	f7ff ffd5 	bl	80002c8 <SystemClock_Config>
  MX_GPIO_Init();
 800031e:	f7ff ff15 	bl	800014c <MX_GPIO_Init>
  MX_DMA_Init();
 8000322:	f7ff ff49 	bl	80001b8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000326:	f7ff ff61 	bl	80001ec <MX_TIM3_Init>
  MX_TIM4_Init();
 800032a:	f7ff ff8b 	bl	8000244 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800032e:	f7ff ffb5 	bl	800029c <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim4);    	//启动TIM4计数
 8000332:	4803      	ldr	r0, [pc, #12]	; (8000340 <main+0x2c>)
 8000334:	f001 f899 	bl	800146a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);    //启动TIM3计数
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <main+0x30>)
 800033a:	f001 f8a8 	bl	800148e <HAL_TIM_Base_Start_IT>
 800033e:	e7fe      	b.n	800033e <main+0x2a>
 8000340:	20000058 	.word	0x20000058
 8000344:	20000098 	.word	0x20000098

08000348 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000348:	4770      	bx	lr
	...

0800034c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b500      	push	{lr}
 800034e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_MspInit+0x44>)
 8000352:	699a      	ldr	r2, [r3, #24]
 8000354:	f042 0201 	orr.w	r2, r2, #1
 8000358:	619a      	str	r2, [r3, #24]
 800035a:	699a      	ldr	r2, [r3, #24]
 800035c:	f002 0201 	and.w	r2, r2, #1
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000364:	69da      	ldr	r2, [r3, #28]
 8000366:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800036a:	61da      	str	r2, [r3, #28]
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000376:	2005      	movs	r0, #5
 8000378:	f000 fa48 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <HAL_MspInit+0x48>)
 800037e:	6853      	ldr	r3, [r2, #4]
 8000380:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	b003      	add	sp, #12
 800038c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000390:	40021000 	.word	0x40021000
 8000394:	40010000 	.word	0x40010000

08000398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000398:	b500      	push	{lr}
 800039a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 800039c:	6803      	ldr	r3, [r0, #0]
 800039e:	4a13      	ldr	r2, [pc, #76]	; (80003ec <HAL_TIM_Base_MspInit+0x54>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d005      	beq.n	80003b0 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80003a4:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <HAL_TIM_Base_MspInit+0x58>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d015      	beq.n	80003d6 <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80003aa:	b003      	add	sp, #12
 80003ac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <HAL_TIM_Base_MspInit+0x5c>)
 80003b2:	69da      	ldr	r2, [r3, #28]
 80003b4:	f042 0202 	orr.w	r2, r2, #2
 80003b8:	61da      	str	r2, [r3, #28]
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	f003 0302 	and.w	r3, r3, #2
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	4611      	mov	r1, r2
 80003c8:	201d      	movs	r0, #29
 80003ca:	f000 fa31 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80003ce:	201d      	movs	r0, #29
 80003d0:	f000 fa62 	bl	8000898 <HAL_NVIC_EnableIRQ>
 80003d4:	e7e9      	b.n	80003aa <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <HAL_TIM_Base_MspInit+0x5c>)
 80003d8:	69da      	ldr	r2, [r3, #28]
 80003da:	f042 0204 	orr.w	r2, r2, #4
 80003de:	61da      	str	r2, [r3, #28]
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	9b01      	ldr	r3, [sp, #4]
}
 80003ea:	e7de      	b.n	80003aa <HAL_TIM_Base_MspInit+0x12>
 80003ec:	40000400 	.word	0x40000400
 80003f0:	40000800 	.word	0x40000800
 80003f4:	40021000 	.word	0x40021000

080003f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	2300      	movs	r3, #0
 80003fe:	9302      	str	r3, [sp, #8]
 8000400:	9303      	str	r3, [sp, #12]
 8000402:	9304      	str	r3, [sp, #16]
 8000404:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8000406:	6802      	ldr	r2, [r0, #0]
 8000408:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <HAL_UART_MspInit+0xac>)
 800040a:	429a      	cmp	r2, r3
 800040c:	d001      	beq.n	8000412 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800040e:	b006      	add	sp, #24
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000414:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000418:	699a      	ldr	r2, [r3, #24]
 800041a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800041e:	619a      	str	r2, [r3, #24]
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000426:	9200      	str	r2, [sp, #0]
 8000428:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	699a      	ldr	r2, [r3, #24]
 800042c:	f042 0204 	orr.w	r2, r2, #4
 8000430:	619a      	str	r2, [r3, #24]
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800043c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000440:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000442:	2302      	movs	r3, #2
 8000444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000446:	2303      	movs	r3, #3
 8000448:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044a:	4e17      	ldr	r6, [pc, #92]	; (80004a8 <HAL_UART_MspInit+0xb0>)
 800044c:	a902      	add	r1, sp, #8
 800044e:	4630      	mov	r0, r6
 8000450:	f000 fbba 	bl	8000bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000458:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2500      	movs	r5, #0
 800045c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000460:	a902      	add	r1, sp, #8
 8000462:	4630      	mov	r0, r6
 8000464:	f000 fbb0 	bl	8000bc8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000468:	4810      	ldr	r0, [pc, #64]	; (80004ac <HAL_UART_MspInit+0xb4>)
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <HAL_UART_MspInit+0xb8>)
 800046c:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800046e:	2310      	movs	r3, #16
 8000470:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000472:	6085      	str	r5, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000478:	6105      	str	r5, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800047a:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800047c:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800047e:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000480:	f000 fa44 	bl	800090c <HAL_DMA_Init>
 8000484:	b958      	cbnz	r0, 800049e <HAL_UART_MspInit+0xa6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <HAL_UART_MspInit+0xb4>)
 8000488:	6323      	str	r3, [r4, #48]	; 0x30
 800048a:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	4611      	mov	r1, r2
 8000490:	2025      	movs	r0, #37	; 0x25
 8000492:	f000 f9cd 	bl	8000830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000496:	2025      	movs	r0, #37	; 0x25
 8000498:	f000 f9fe 	bl	8000898 <HAL_NVIC_EnableIRQ>
}
 800049c:	e7b7      	b.n	800040e <HAL_UART_MspInit+0x16>
      Error_Handler();
 800049e:	f7ff ff53 	bl	8000348 <Error_Handler>
 80004a2:	e7f0      	b.n	8000486 <HAL_UART_MspInit+0x8e>
 80004a4:	40013800 	.word	0x40013800
 80004a8:	40010800 	.word	0x40010800
 80004ac:	200000d8 	.word	0x200000d8
 80004b0:	40020044 	.word	0x40020044

080004b4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004b4:	4770      	bx	lr

080004b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b6:	e7fe      	b.n	80004b6 <HardFault_Handler>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	e7fe      	b.n	80004b8 <MemManage_Handler>

080004ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	e7fe      	b.n	80004bc <UsageFault_Handler>

080004be <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	4770      	bx	lr

080004c0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c0:	4770      	bx	lr

080004c2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f98f 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bd08      	pop	{r3, pc}

080004cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80004cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80004ce:	4802      	ldr	r0, [pc, #8]	; (80004d8 <DMA1_Channel4_IRQHandler+0xc>)
 80004d0:	f000 fad8 	bl	8000a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80004d4:	bd08      	pop	{r3, pc}
 80004d6:	bf00      	nop
 80004d8:	200000d8 	.word	0x200000d8

080004dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80004dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80004de:	4833      	ldr	r0, [pc, #204]	; (80005ac <TIM3_IRQHandler+0xd0>)
 80004e0:	f000 ffeb 	bl	80014ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* TIM3每隔1秒进1次中断 */
  /* 每秒计算当前时速 */
  Velocity = 36 * (RoundCount - LastRoundCount) / 10;
 80004e4:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <TIM3_IRQHandler+0xd4>)
 80004e6:	7819      	ldrb	r1, [r3, #0]
 80004e8:	4832      	ldr	r0, [pc, #200]	; (80005b4 <TIM3_IRQHandler+0xd8>)
 80004ea:	7802      	ldrb	r2, [r0, #0]
 80004ec:	1a8a      	subs	r2, r1, r2
 80004ee:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80004f2:	0093      	lsls	r3, r2, #2
 80004f4:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <TIM3_IRQHandler+0xdc>)
 80004f6:	fb82 4203 	smull	r4, r2, r2, r3
 80004fa:	17db      	asrs	r3, r3, #31
 80004fc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	4a2e      	ldr	r2, [pc, #184]	; (80005bc <TIM3_IRQHandler+0xe0>)
 8000504:	7013      	strb	r3, [r2, #0]
  LastRoundCount = RoundCount;
 8000506:	7001      	strb	r1, [r0, #0]
  /* 串口发里程数据 */
  if (FlagOutputMode == OF_DISTANCE)
 8000508:	4a2d      	ldr	r2, [pc, #180]	; (80005c0 <TIM3_IRQHandler+0xe4>)
 800050a:	7812      	ldrb	r2, [r2, #0]
 800050c:	bb22      	cbnz	r2, 8000558 <TIM3_IRQHandler+0x7c>
  {
    /* 将里distance转成ASCII码填入发送缓冲区 */
    tmp = RoundCount;
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 8000510:	8019      	strh	r1, [r3, #0]
    dcnt = 0;
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <TIM3_IRQHandler+0xec>)
 8000514:	701a      	strb	r2, [r3, #0]
    USART_SendBuf_D[USART_SBUF_DIGIT_D] = 0 + 48;
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <TIM3_IRQHandler+0xf0>)
 8000518:	2230      	movs	r2, #48	; 0x30
 800051a:	739a      	strb	r2, [r3, #14]
    while(tmp != 0)
 800051c:	e012      	b.n	8000544 <TIM3_IRQHandler+0x68>
    {
      USART_SendBuf_D[USART_SBUF_DIGIT_D - (dcnt++)] = tmp % 10 + 48;
 800051e:	492a      	ldr	r1, [pc, #168]	; (80005c8 <TIM3_IRQHandler+0xec>)
 8000520:	780a      	ldrb	r2, [r1, #0]
 8000522:	1c50      	adds	r0, r2, #1
 8000524:	7008      	strb	r0, [r1, #0]
 8000526:	f1c2 010e 	rsb	r1, r2, #14
 800052a:	4a29      	ldr	r2, [pc, #164]	; (80005d0 <TIM3_IRQHandler+0xf4>)
 800052c:	fba2 0203 	umull	r0, r2, r2, r3
 8000530:	08d2      	lsrs	r2, r2, #3
 8000532:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8000536:	0060      	lsls	r0, r4, #1
 8000538:	1a1b      	subs	r3, r3, r0
 800053a:	3330      	adds	r3, #48	; 0x30
 800053c:	4823      	ldr	r0, [pc, #140]	; (80005cc <TIM3_IRQHandler+0xf0>)
 800053e:	5443      	strb	r3, [r0, r1]
      tmp /= 10;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 8000542:	801a      	strh	r2, [r3, #0]
    while(tmp != 0)
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1e8      	bne.n	800051e <TIM3_IRQHandler+0x42>
    }
    /* DMA传里程数据给串口 */
    HAL_UART_Transmit_DMA(&huart1, USART_SendBuf_D, sizeof(USART_SendBuf_D));
 800054c:	2212      	movs	r2, #18
 800054e:	491f      	ldr	r1, [pc, #124]	; (80005cc <TIM3_IRQHandler+0xf0>)
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <TIM3_IRQHandler+0xf8>)
 8000552:	f001 fa41 	bl	80019d8 <HAL_UART_Transmit_DMA>
    }
    /* DMA传速度数据给串口 */
    HAL_UART_Transmit_DMA(&huart1, USART_SendBuf_V, sizeof(USART_SendBuf_V));
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 8000556:	bd10      	pop	{r4, pc}
  else if (FlagOutputMode == OF_VELOCITY)
 8000558:	2a01      	cmp	r2, #1
 800055a:	d1fc      	bne.n	8000556 <TIM3_IRQHandler+0x7a>
    tmp = Velocity;
 800055c:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 800055e:	8013      	strh	r3, [r2, #0]
    dcnt = 0;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <TIM3_IRQHandler+0xec>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
    USART_SendBuf_V[USART_SBUF_DIGIT_V] = 0 + 48;
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <TIM3_IRQHandler+0xfc>)
 8000568:	2230      	movs	r2, #48	; 0x30
 800056a:	739a      	strb	r2, [r3, #14]
    USART_SendBuf_V[USART_SBUF_DIGIT_V-1] = ' ';
 800056c:	2220      	movs	r2, #32
 800056e:	735a      	strb	r2, [r3, #13]
    while(tmp != 0)
 8000570:	e012      	b.n	8000598 <TIM3_IRQHandler+0xbc>
      USART_SendBuf_V[USART_SBUF_DIGIT_V - (dcnt++)] = tmp % 10 + 48;
 8000572:	4915      	ldr	r1, [pc, #84]	; (80005c8 <TIM3_IRQHandler+0xec>)
 8000574:	780a      	ldrb	r2, [r1, #0]
 8000576:	1c50      	adds	r0, r2, #1
 8000578:	7008      	strb	r0, [r1, #0]
 800057a:	f1c2 010e 	rsb	r1, r2, #14
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <TIM3_IRQHandler+0xf4>)
 8000580:	fba2 0203 	umull	r0, r2, r2, r3
 8000584:	08d2      	lsrs	r2, r2, #3
 8000586:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800058a:	0060      	lsls	r0, r4, #1
 800058c:	1a1b      	subs	r3, r3, r0
 800058e:	3330      	adds	r3, #48	; 0x30
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <TIM3_IRQHandler+0xfc>)
 8000592:	5443      	strb	r3, [r0, r1]
      tmp /= 10;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 8000596:	801a      	strh	r2, [r3, #0]
    while(tmp != 0)
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <TIM3_IRQHandler+0xe8>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1e8      	bne.n	8000572 <TIM3_IRQHandler+0x96>
    HAL_UART_Transmit_DMA(&huart1, USART_SendBuf_V, sizeof(USART_SendBuf_V));
 80005a0:	2215      	movs	r2, #21
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <TIM3_IRQHandler+0xfc>)
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <TIM3_IRQHandler+0xf8>)
 80005a6:	f001 fa17 	bl	80019d8 <HAL_UART_Transmit_DMA>
}
 80005aa:	e7d4      	b.n	8000556 <TIM3_IRQHandler+0x7a>
 80005ac:	20000098 	.word	0x20000098
 80005b0:	20000170 	.word	0x20000170
 80005b4:	2000016f 	.word	0x2000016f
 80005b8:	66666667 	.word	0x66666667
 80005bc:	2000016e 	.word	0x2000016e
 80005c0:	20000056 	.word	0x20000056
 80005c4:	20000054 	.word	0x20000054
 80005c8:	20000164 	.word	0x20000164
 80005cc:	20000000 	.word	0x20000000
 80005d0:	cccccccd 	.word	0xcccccccd
 80005d4:	20000124 	.word	0x20000124
 80005d8:	20000014 	.word	0x20000014

080005dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005de:	4802      	ldr	r0, [pc, #8]	; (80005e8 <USART1_IRQHandler+0xc>)
 80005e0:	f001 fae8 	bl	8001bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005e4:	bd08      	pop	{r3, pc}
 80005e6:	bf00      	nop
 80005e8:	20000124 	.word	0x20000124

080005ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if (__HAL_GPIO_EXTI_GET_IT(KeyRound_Pin) != RESET)   
 80005ee:	4b35      	ldr	r3, [pc, #212]	; (80006c4 <EXTI15_10_IRQHandler+0xd8>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80005f6:	d02e      	beq.n	8000656 <EXTI15_10_IRQHandler+0x6a>
  {
    /* PA11模拟钢圈计数 */
    /* BEGIN */
    TC_PA11.last = __HAL_TIM_GET_COUNTER(&htim4);      //去抖动开始计时
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <EXTI15_10_IRQHandler+0xdc>)
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80005fe:	b212      	sxth	r2, r2
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <EXTI15_10_IRQHandler+0xe0>)
 8000602:	805a      	strh	r2, [r3, #2]
    TC_PA11.now = TC_PA11.last;
 8000604:	801a      	strh	r2, [r3, #0]
    while((TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 8000606:	e00d      	b.n	8000624 <EXTI15_10_IRQHandler+0x38>
         (TC_PA11.now - TC_PA11.last) : (10000 + TC_PA11.now - TC_PA11.last)) <= 10)
 8000608:	b29b      	uxth	r3, r3
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	b29b      	uxth	r3, r3
    while((TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 800060e:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000612:	3310      	adds	r3, #16
 8000614:	b29b      	uxth	r3, r3
 8000616:	492d      	ldr	r1, [pc, #180]	; (80006cc <EXTI15_10_IRQHandler+0xe0>)
 8000618:	808b      	strh	r3, [r1, #4]
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d80c      	bhi.n	8000638 <EXTI15_10_IRQHandler+0x4c>
    {
      TC_PA11.now = __HAL_TIM_GET_COUNTER(&htim4);
 800061e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000620:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <EXTI15_10_IRQHandler+0xe0>)
 8000622:	8019      	strh	r1, [r3, #0]
    while((TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <EXTI15_10_IRQHandler+0xe0>)
 8000626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062a:	429a      	cmp	r2, r3
 800062c:	dcec      	bgt.n	8000608 <EXTI15_10_IRQHandler+0x1c>
         (TC_PA11.now - TC_PA11.last) : (10000 + TC_PA11.now - TC_PA11.last)) <= 10)
 800062e:	b29b      	uxth	r3, r3
 8000630:	b291      	uxth	r1, r2
    while((TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
 8000632:	1a5b      	subs	r3, r3, r1
 8000634:	b29b      	uxth	r3, r3
 8000636:	e7ee      	b.n	8000616 <EXTI15_10_IRQHandler+0x2a>
    }
    if(HAL_GPIO_ReadPin(KeyRound_GPIO_Port, KeyRound_Pin) == KEY_DOWN)
 8000638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063c:	4824      	ldr	r0, [pc, #144]	; (80006d0 <EXTI15_10_IRQHandler+0xe4>)
 800063e:	f000 fbaf 	bl	8000da0 <HAL_GPIO_ReadPin>
 8000642:	b918      	cbnz	r0, 800064c <EXTI15_10_IRQHandler+0x60>
    {
      RoundCount++;
 8000644:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <EXTI15_10_IRQHandler+0xe8>)
 8000646:	7813      	ldrb	r3, [r2, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	7013      	strb	r3, [r2, #0]
    }
    /* END */
    __HAL_GPIO_EXTI_CLEAR_IT(KeyRound_Pin);
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <EXTI15_10_IRQHandler+0xd8>)
 800064e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000652:	615a      	str	r2, [r3, #20]
    }
    /* END */
    __HAL_GPIO_EXTI_CLEAR_IT(KeyOutputMode_Pin);
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000654:	bd08      	pop	{r3, pc}
  else if (__HAL_GPIO_EXTI_GET_IT(KeyOutputMode_Pin) != RESET)   //PA12按键模式切换
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <EXTI15_10_IRQHandler+0xd8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800065e:	d0f9      	beq.n	8000654 <EXTI15_10_IRQHandler+0x68>
    TC_PA12.last = __HAL_TIM_GET_COUNTER(&htim4);      //去抖动开始计时
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <EXTI15_10_IRQHandler+0xdc>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000666:	b212      	sxth	r2, r2
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <EXTI15_10_IRQHandler+0xec>)
 800066a:	805a      	strh	r2, [r3, #2]
    TC_PA12.now = TC_PA12.last;
 800066c:	801a      	strh	r2, [r3, #0]
    while((TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 800066e:	e00d      	b.n	800068c <EXTI15_10_IRQHandler+0xa0>
         (TC_PA12.now - TC_PA12.last) : (10000 + TC_PA12.now - TC_PA12.last)) <= 10)
 8000670:	b29b      	uxth	r3, r3
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	b29b      	uxth	r3, r3
    while((TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 8000676:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800067a:	3310      	adds	r3, #16
 800067c:	b29b      	uxth	r3, r3
 800067e:	4916      	ldr	r1, [pc, #88]	; (80006d8 <EXTI15_10_IRQHandler+0xec>)
 8000680:	808b      	strh	r3, [r1, #4]
 8000682:	2b0a      	cmp	r3, #10
 8000684:	d80c      	bhi.n	80006a0 <EXTI15_10_IRQHandler+0xb4>
      TC_PA12.now = __HAL_TIM_GET_COUNTER(&htim4);
 8000686:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <EXTI15_10_IRQHandler+0xec>)
 800068a:	8019      	strh	r1, [r3, #0]
    while((TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <EXTI15_10_IRQHandler+0xec>)
 800068e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000692:	429a      	cmp	r2, r3
 8000694:	dcec      	bgt.n	8000670 <EXTI15_10_IRQHandler+0x84>
         (TC_PA12.now - TC_PA12.last) : (10000 + TC_PA12.now - TC_PA12.last)) <= 10)
 8000696:	b29b      	uxth	r3, r3
 8000698:	b291      	uxth	r1, r2
    while((TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
 800069a:	1a5b      	subs	r3, r3, r1
 800069c:	b29b      	uxth	r3, r3
 800069e:	e7ee      	b.n	800067e <EXTI15_10_IRQHandler+0x92>
    if(HAL_GPIO_ReadPin(KeyOutputMode_GPIO_Port, KeyOutputMode_Pin) == KEY_DOWN)
 80006a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <EXTI15_10_IRQHandler+0xe4>)
 80006a6:	f000 fb7b 	bl	8000da0 <HAL_GPIO_ReadPin>
 80006aa:	b930      	cbnz	r0, 80006ba <EXTI15_10_IRQHandler+0xce>
      FlagOutputMode = (~FlagOutputMode) & 0X01;
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <EXTI15_10_IRQHandler+0xf0>)
 80006ae:	7813      	ldrb	r3, [r2, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	7013      	strb	r3, [r2, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(KeyOutputMode_Pin);
 80006ba:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <EXTI15_10_IRQHandler+0xd8>)
 80006bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	e7c7      	b.n	8000654 <EXTI15_10_IRQHandler+0x68>
 80006c4:	40010400 	.word	0x40010400
 80006c8:	20000058 	.word	0x20000058
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	40010800 	.word	0x40010800
 80006d4:	20000170 	.word	0x20000170
 80006d8:	20000168 	.word	0x20000168
 80006dc:	20000056 	.word	0x20000056

080006e0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <SystemInit+0x40>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f042 0201 	orr.w	r2, r2, #1
 80006e8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006ea:	6859      	ldr	r1, [r3, #4]
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <SystemInit+0x44>)
 80006ee:	400a      	ands	r2, r1
 80006f0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80006f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000704:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800070c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800070e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000712:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SystemInit+0x48>)
 8000716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800071a:	609a      	str	r2, [r3, #8]
#endif 
}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	f8ff0000 	.word	0xf8ff0000
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800072c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800072e:	e003      	b.n	8000738 <LoopCopyDataInit>

08000730 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000732:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000734:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000736:	3104      	adds	r1, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800073c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800073e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000740:	d3f6      	bcc.n	8000730 <CopyDataInit>
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000744:	e002      	b.n	800074c <LoopFillZerobss>

08000746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000748:	f842 3b04 	str.w	r3, [r2], #4

0800074c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800074e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000750:	d3f9      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ffc5 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 fac5 	bl	8001ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fddb 	bl	8000314 <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r3, =_sidata
 8000760:	08001d88 	.word	0x08001d88
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000768:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 800076c:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8000770:	20000178 	.word	0x20000178

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_InitTick+0x40>)
 800077e:	7818      	ldrb	r0, [r3, #0]
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	fbb3 f3f0 	udiv	r3, r3, r0
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <HAL_InitTick+0x44>)
 800078a:	6810      	ldr	r0, [r2, #0]
 800078c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000790:	f000 f890 	bl	80008b4 <HAL_SYSTICK_Config>
 8000794:	b968      	cbnz	r0, 80007b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	2c0f      	cmp	r4, #15
 8000798:	d901      	bls.n	800079e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800079a:	2001      	movs	r0, #1
 800079c:	e00a      	b.n	80007b4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	2200      	movs	r2, #0
 80007a0:	4621      	mov	r1, r4
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	f000 f843 	bl	8000830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_InitTick+0x48>)
 80007ac:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80007ae:	2000      	movs	r0, #0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
}
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	20000030 	.word	0x20000030
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	20000034 	.word	0x20000034

080007c4 <HAL_Init>:
{
 80007c4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c6:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x20>)
 80007c8:	6813      	ldr	r3, [r2, #0]
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f81b 	bl	800080c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ffce 	bl	8000778 <HAL_InitTick>
  HAL_MspInit();
 80007dc:	f7ff fdb6 	bl	800034c <HAL_MspInit>
}
 80007e0:	2000      	movs	r0, #0
 80007e2:	bd08      	pop	{r3, pc}
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <HAL_IncTick+0x10>)
 80007ea:	6811      	ldr	r1, [r2, #0]
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_IncTick+0x14>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	440b      	add	r3, r1
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000174 	.word	0x20000174
 80007fc:	20000030 	.word	0x20000030

08000800 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000800:	4b01      	ldr	r3, [pc, #4]	; (8000808 <HAL_GetTick+0x8>)
 8000802:	6818      	ldr	r0, [r3, #0]
}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000174 	.word	0x20000174

0800080c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800080e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000814:	041b      	lsls	r3, r3, #16
 8000816:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000818:	0200      	lsls	r0, r0, #8
 800081a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000820:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000824:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000828:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000830:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_NVIC_SetPriority+0x60>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083a:	f1c3 0407 	rsb	r4, r3, #7
 800083e:	2c04      	cmp	r4, #4
 8000840:	bf28      	it	cs
 8000842:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000844:	1d1d      	adds	r5, r3, #4
 8000846:	2d06      	cmp	r5, #6
 8000848:	d918      	bls.n	800087c <HAL_NVIC_SetPriority+0x4c>
 800084a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 35ff 	mov.w	r5, #4294967295
 8000850:	fa05 f404 	lsl.w	r4, r5, r4
 8000854:	ea21 0104 	bic.w	r1, r1, r4
 8000858:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085a:	fa05 f303 	lsl.w	r3, r5, r3
 800085e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000862:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000864:	2800      	cmp	r0, #0
 8000866:	db0b      	blt.n	8000880 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	0109      	lsls	r1, r1, #4
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000870:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000874:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000878:	bc30      	pop	{r4, r5}
 800087a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087c:	2300      	movs	r3, #0
 800087e:	e7e5      	b.n	800084c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	f000 000f 	and.w	r0, r0, #15
 8000884:	0109      	lsls	r1, r1, #4
 8000886:	b2c9      	uxtb	r1, r1
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <HAL_NVIC_SetPriority+0x64>)
 800088a:	5419      	strb	r1, [r3, r0]
 800088c:	e7f4      	b.n	8000878 <HAL_NVIC_SetPriority+0x48>
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	e000ed14 	.word	0xe000ed14

08000898 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000898:	2800      	cmp	r0, #0
 800089a:	db07      	blt.n	80008ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089c:	f000 021f 	and.w	r2, r0, #31
 80008a0:	0940      	lsrs	r0, r0, #5
 80008a2:	2301      	movs	r3, #1
 80008a4:	4093      	lsls	r3, r2
 80008a6:	4a02      	ldr	r2, [pc, #8]	; (80008b0 <HAL_NVIC_EnableIRQ+0x18>)
 80008a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	3801      	subs	r0, #1
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ba:	d20a      	bcs.n	80008d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_SYSTICK_Config+0x24>)
 80008be:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_SYSTICK_Config+0x28>)
 80008c2:	21f0      	movs	r1, #240	; 0xf0
 80008c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	2000      	movs	r0, #0
 80008ca:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008e0:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008e2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80008e4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80008e6:	2401      	movs	r4, #1
 80008e8:	40b4      	lsls	r4, r6
 80008ea:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008ec:	6804      	ldr	r4, [r0, #0]
 80008ee:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008f0:	6843      	ldr	r3, [r0, #4]
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	d005      	beq.n	8000902 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80008f6:	6803      	ldr	r3, [r0, #0]
 80008f8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80008fa:	6803      	ldr	r3, [r0, #0]
 80008fc:	60da      	str	r2, [r3, #12]
  }
}
 80008fe:	bc70      	pop	{r4, r5, r6}
 8000900:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000902:	6803      	ldr	r3, [r0, #0]
 8000904:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000906:	6803      	ldr	r3, [r0, #0]
 8000908:	60d9      	str	r1, [r3, #12]
 800090a:	e7f8      	b.n	80008fe <DMA_SetConfig+0x1e>

0800090c <HAL_DMA_Init>:
  if(hdma == NULL)
 800090c:	b360      	cbz	r0, 8000968 <HAL_DMA_Init+0x5c>
{
 800090e:	b410      	push	{r4}
 8000910:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000912:	6801      	ldr	r1, [r0, #0]
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_DMA_Init+0x60>)
 8000916:	440b      	add	r3, r1
 8000918:	4815      	ldr	r0, [pc, #84]	; (8000970 <HAL_DMA_Init+0x64>)
 800091a:	fba0 0303 	umull	r0, r3, r0, r3
 800091e:	091b      	lsrs	r3, r3, #4
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_DMA_Init+0x68>)
 8000926:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000928:	2302      	movs	r3, #2
 800092a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800092e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000930:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000934:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000938:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093a:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 800093c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093e:	68d4      	ldr	r4, [r2, #12]
 8000940:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000942:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000944:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000946:	6954      	ldr	r4, [r2, #20]
 8000948:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800094a:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800094e:	69d4      	ldr	r4, [r2, #28]
 8000950:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000952:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8000954:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000956:	2000      	movs	r0, #0
 8000958:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800095a:	2301      	movs	r3, #1
 800095c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000960:	f882 0020 	strb.w	r0, [r2, #32]
}
 8000964:	bc10      	pop	{r4}
 8000966:	4770      	bx	lr
    return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
}
 800096a:	4770      	bx	lr
 800096c:	bffdfff8 	.word	0xbffdfff8
 8000970:	cccccccd 	.word	0xcccccccd
 8000974:	40020000 	.word	0x40020000

08000978 <HAL_DMA_Start_IT>:
{
 8000978:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800097a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800097e:	2c01      	cmp	r4, #1
 8000980:	d032      	beq.n	80009e8 <HAL_DMA_Start_IT+0x70>
 8000982:	2401      	movs	r4, #1
 8000984:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000988:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800098c:	2c01      	cmp	r4, #1
 800098e:	d004      	beq.n	800099a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000990:	2300      	movs	r3, #0
 8000992:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000996:	2002      	movs	r0, #2
}
 8000998:	bd38      	pop	{r3, r4, r5, pc}
 800099a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800099c:	2002      	movs	r0, #2
 800099e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a2:	2000      	movs	r0, #0
 80009a4:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80009a6:	6825      	ldr	r5, [r4, #0]
 80009a8:	6828      	ldr	r0, [r5, #0]
 80009aa:	f020 0001 	bic.w	r0, r0, #1
 80009ae:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009b0:	4620      	mov	r0, r4
 80009b2:	f7ff ff95 	bl	80008e0 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80009b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009b8:	b15b      	cbz	r3, 80009d2 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ba:	6822      	ldr	r2, [r4, #0]
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f043 030e 	orr.w	r3, r3, #14
 80009c2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ce:	2000      	movs	r0, #0
 80009d0:	e7e2      	b.n	8000998 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009d2:	6822      	ldr	r2, [r4, #0]
 80009d4:	6813      	ldr	r3, [r2, #0]
 80009d6:	f023 0304 	bic.w	r3, r3, #4
 80009da:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f043 030a 	orr.w	r3, r3, #10
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e7ed      	b.n	80009c4 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80009e8:	2002      	movs	r0, #2
 80009ea:	e7d5      	b.n	8000998 <HAL_DMA_Start_IT+0x20>

080009ec <HAL_DMA_Abort_IT>:
{  
 80009ec:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009ee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d003      	beq.n	80009fe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009f6:	2304      	movs	r3, #4
 80009f8:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
}
 80009fc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fe:	6802      	ldr	r2, [r0, #0]
 8000a00:	6813      	ldr	r3, [r2, #0]
 8000a02:	f023 030e 	bic.w	r3, r3, #14
 8000a06:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000a08:	6802      	ldr	r2, [r0, #0]
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_DMA_Abort_IT+0x90>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d014      	beq.n	8000a44 <HAL_DMA_Abort_IT+0x58>
 8000a1a:	3214      	adds	r2, #20
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d01f      	beq.n	8000a60 <HAL_DMA_Abort_IT+0x74>
 8000a20:	3214      	adds	r2, #20
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01e      	beq.n	8000a64 <HAL_DMA_Abort_IT+0x78>
 8000a26:	3214      	adds	r2, #20
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d01e      	beq.n	8000a6a <HAL_DMA_Abort_IT+0x7e>
 8000a2c:	3214      	adds	r2, #20
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d01e      	beq.n	8000a70 <HAL_DMA_Abort_IT+0x84>
 8000a32:	3214      	adds	r2, #20
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d002      	beq.n	8000a3e <HAL_DMA_Abort_IT+0x52>
 8000a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a3c:	e003      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
 8000a3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a42:	e000      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
 8000a44:	2201      	movs	r2, #1
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_DMA_Abort_IT+0x94>)
 8000a48:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000a50:	2300      	movs	r3, #0
 8000a52:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000a56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000a58:	b16b      	cbz	r3, 8000a76 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000a5a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e7cd      	b.n	80009fc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a60:	2210      	movs	r2, #16
 8000a62:	e7f0      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
 8000a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a68:	e7ed      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
 8000a6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a6e:	e7ea      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
 8000a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a74:	e7e7      	b.n	8000a46 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000a76:	2000      	movs	r0, #0
 8000a78:	e7c0      	b.n	80009fc <HAL_DMA_Abort_IT+0x10>
 8000a7a:	bf00      	nop
 8000a7c:	40020008 	.word	0x40020008
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_DMA_IRQHandler>:
{
 8000a84:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a86:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000a88:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a8a:	6804      	ldr	r4, [r0, #0]
 8000a8c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a8e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000a90:	2304      	movs	r3, #4
 8000a92:	408b      	lsls	r3, r1
 8000a94:	4213      	tst	r3, r2
 8000a96:	d035      	beq.n	8000b04 <HAL_DMA_IRQHandler+0x80>
 8000a98:	f015 0f04 	tst.w	r5, #4
 8000a9c:	d032      	beq.n	8000b04 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a9e:	6823      	ldr	r3, [r4, #0]
 8000aa0:	f013 0f20 	tst.w	r3, #32
 8000aa4:	d103      	bne.n	8000aae <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000aa6:	6823      	ldr	r3, [r4, #0]
 8000aa8:	f023 0304 	bic.w	r3, r3, #4
 8000aac:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000aae:	6803      	ldr	r3, [r0, #0]
 8000ab0:	4a43      	ldr	r2, [pc, #268]	; (8000bc0 <HAL_DMA_IRQHandler+0x13c>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d014      	beq.n	8000ae0 <HAL_DMA_IRQHandler+0x5c>
 8000ab6:	3214      	adds	r2, #20
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d018      	beq.n	8000aee <HAL_DMA_IRQHandler+0x6a>
 8000abc:	3214      	adds	r2, #20
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d017      	beq.n	8000af2 <HAL_DMA_IRQHandler+0x6e>
 8000ac2:	3214      	adds	r2, #20
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d017      	beq.n	8000af8 <HAL_DMA_IRQHandler+0x74>
 8000ac8:	3214      	adds	r2, #20
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d017      	beq.n	8000afe <HAL_DMA_IRQHandler+0x7a>
 8000ace:	3214      	adds	r2, #20
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d002      	beq.n	8000ada <HAL_DMA_IRQHandler+0x56>
 8000ad4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ad8:	e003      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
 8000ada:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ade:	e000      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <HAL_DMA_IRQHandler+0x140>)
 8000ae4:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000ae8:	b103      	cbz	r3, 8000aec <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8000aea:	4798      	blx	r3
}
 8000aec:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000aee:	2240      	movs	r2, #64	; 0x40
 8000af0:	e7f7      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
 8000af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af6:	e7f4      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
 8000af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afc:	e7f1      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
 8000afe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b02:	e7ee      	b.n	8000ae2 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000b04:	2302      	movs	r3, #2
 8000b06:	408b      	lsls	r3, r1
 8000b08:	4213      	tst	r3, r2
 8000b0a:	d03c      	beq.n	8000b86 <HAL_DMA_IRQHandler+0x102>
 8000b0c:	f015 0f02 	tst.w	r5, #2
 8000b10:	d039      	beq.n	8000b86 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	f013 0f20 	tst.w	r3, #32
 8000b18:	d106      	bne.n	8000b28 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	f023 030a 	bic.w	r3, r3, #10
 8000b20:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b28:	6803      	ldr	r3, [r0, #0]
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <HAL_DMA_IRQHandler+0x13c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d014      	beq.n	8000b5a <HAL_DMA_IRQHandler+0xd6>
 8000b30:	3214      	adds	r2, #20
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d01c      	beq.n	8000b70 <HAL_DMA_IRQHandler+0xec>
 8000b36:	3214      	adds	r2, #20
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d01b      	beq.n	8000b74 <HAL_DMA_IRQHandler+0xf0>
 8000b3c:	3214      	adds	r2, #20
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d01b      	beq.n	8000b7a <HAL_DMA_IRQHandler+0xf6>
 8000b42:	3214      	adds	r2, #20
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d01b      	beq.n	8000b80 <HAL_DMA_IRQHandler+0xfc>
 8000b48:	3214      	adds	r2, #20
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d002      	beq.n	8000b54 <HAL_DMA_IRQHandler+0xd0>
 8000b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b52:	e003      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
 8000b54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b58:	e000      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_DMA_IRQHandler+0x140>)
 8000b5e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000b60:	2300      	movs	r3, #0
 8000b62:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000b66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d0bf      	beq.n	8000aec <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8000b6c:	4798      	blx	r3
 8000b6e:	e7bd      	b.n	8000aec <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b70:	2220      	movs	r2, #32
 8000b72:	e7f3      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	e7f0      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
 8000b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7e:	e7ed      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
 8000b80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b84:	e7ea      	b.n	8000b5c <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b86:	2308      	movs	r3, #8
 8000b88:	fa03 f101 	lsl.w	r1, r3, r1
 8000b8c:	4211      	tst	r1, r2
 8000b8e:	d0ad      	beq.n	8000aec <HAL_DMA_IRQHandler+0x68>
 8000b90:	f015 0f08 	tst.w	r5, #8
 8000b94:	d0aa      	beq.n	8000aec <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	f023 030e 	bic.w	r3, r3, #14
 8000b9c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000ba0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ba8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000baa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000bac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000bb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d097      	beq.n	8000aec <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8000bbc:	4798      	blx	r3
  return;
 8000bbe:	e795      	b.n	8000aec <HAL_DMA_IRQHandler+0x68>
 8000bc0:	40020008 	.word	0x40020008
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b4f0      	push	{r4, r5, r6, r7}
 8000bca:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bcc:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8000bce:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd0:	e0a2      	b.n	8000d18 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d05a      	beq.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000bd6:	2d01      	cmp	r5, #1
 8000bd8:	d100      	bne.n	8000bdc <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bda:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bdc:	2bff      	cmp	r3, #255	; 0xff
 8000bde:	d869      	bhi.n	8000cb4 <HAL_GPIO_Init+0xec>
 8000be0:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be2:	2bff      	cmp	r3, #255	; 0xff
 8000be4:	d869      	bhi.n	8000cba <HAL_GPIO_Init+0xf2>
 8000be6:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be8:	f8dc 4000 	ldr.w	r4, [ip]
 8000bec:	270f      	movs	r7, #15
 8000bee:	40af      	lsls	r7, r5
 8000bf0:	ea24 0407 	bic.w	r4, r4, r7
 8000bf4:	fa06 f505 	lsl.w	r5, r6, r5
 8000bf8:	432c      	orrs	r4, r5
 8000bfa:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	684c      	ldr	r4, [r1, #4]
 8000c00:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000c04:	f000 8087 	beq.w	8000d16 <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c08:	4c5f      	ldr	r4, [pc, #380]	; (8000d88 <HAL_GPIO_Init+0x1c0>)
 8000c0a:	69a5      	ldr	r5, [r4, #24]
 8000c0c:	f045 0501 	orr.w	r5, r5, #1
 8000c10:	61a5      	str	r5, [r4, #24]
 8000c12:	69a4      	ldr	r4, [r4, #24]
 8000c14:	f004 0401 	and.w	r4, r4, #1
 8000c18:	9401      	str	r4, [sp, #4]
 8000c1a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000c1c:	0895      	lsrs	r5, r2, #2
 8000c1e:	1caf      	adds	r7, r5, #2
 8000c20:	4c5a      	ldr	r4, [pc, #360]	; (8000d8c <HAL_GPIO_Init+0x1c4>)
 8000c22:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c26:	f002 0703 	and.w	r7, r2, #3
 8000c2a:	00bf      	lsls	r7, r7, #2
 8000c2c:	f04f 0c0f 	mov.w	ip, #15
 8000c30:	fa0c fc07 	lsl.w	ip, ip, r7
 8000c34:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c38:	4c55      	ldr	r4, [pc, #340]	; (8000d90 <HAL_GPIO_Init+0x1c8>)
 8000c3a:	42a0      	cmp	r0, r4
 8000c3c:	d043      	beq.n	8000cc6 <HAL_GPIO_Init+0xfe>
 8000c3e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c42:	42a0      	cmp	r0, r4
 8000c44:	f000 8081 	beq.w	8000d4a <HAL_GPIO_Init+0x182>
 8000c48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c4c:	42a0      	cmp	r0, r4
 8000c4e:	d07e      	beq.n	8000d4e <HAL_GPIO_Init+0x186>
 8000c50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c54:	42a0      	cmp	r0, r4
 8000c56:	d034      	beq.n	8000cc2 <HAL_GPIO_Init+0xfa>
 8000c58:	2404      	movs	r4, #4
 8000c5a:	e035      	b.n	8000cc8 <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8000c5c:	4f4d      	ldr	r7, [pc, #308]	; (8000d94 <HAL_GPIO_Init+0x1cc>)
 8000c5e:	42bd      	cmp	r5, r7
 8000c60:	d014      	beq.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c62:	d90b      	bls.n	8000c7c <HAL_GPIO_Init+0xb4>
 8000c64:	4f4c      	ldr	r7, [pc, #304]	; (8000d98 <HAL_GPIO_Init+0x1d0>)
 8000c66:	42bd      	cmp	r5, r7
 8000c68:	d010      	beq.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c6a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c6e:	42bd      	cmp	r5, r7
 8000c70:	d00c      	beq.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c72:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000c76:	42bd      	cmp	r5, r7
 8000c78:	d1b0      	bne.n	8000bdc <HAL_GPIO_Init+0x14>
 8000c7a:	e007      	b.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c7c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000c80:	42bd      	cmp	r5, r7
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0xc4>
 8000c84:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c88:	42bd      	cmp	r5, r7
 8000c8a:	d1a7      	bne.n	8000bdc <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8c:	688d      	ldr	r5, [r1, #8]
 8000c8e:	b17d      	cbz	r5, 8000cb0 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	2d01      	cmp	r5, #1
 8000c92:	d008      	beq.n	8000ca6 <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8000c94:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c96:	2608      	movs	r6, #8
 8000c98:	e7a0      	b.n	8000bdc <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c9a:	68ce      	ldr	r6, [r1, #12]
 8000c9c:	3608      	adds	r6, #8
          break;
 8000c9e:	e79d      	b.n	8000bdc <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca0:	68ce      	ldr	r6, [r1, #12]
 8000ca2:	360c      	adds	r6, #12
          break;
 8000ca4:	e79a      	b.n	8000bdc <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000ca6:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca8:	2608      	movs	r6, #8
 8000caa:	e797      	b.n	8000bdc <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cac:	2600      	movs	r6, #0
 8000cae:	e795      	b.n	8000bdc <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb0:	2604      	movs	r6, #4
 8000cb2:	e793      	b.n	8000bdc <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb4:	f100 0c04 	add.w	ip, r0, #4
 8000cb8:	e793      	b.n	8000be2 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cba:	f1a2 0508 	sub.w	r5, r2, #8
 8000cbe:	00ad      	lsls	r5, r5, #2
 8000cc0:	e792      	b.n	8000be8 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc2:	2403      	movs	r4, #3
 8000cc4:	e000      	b.n	8000cc8 <HAL_GPIO_Init+0x100>
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	40bc      	lsls	r4, r7
 8000cca:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000cce:	3502      	adds	r5, #2
 8000cd0:	4f2e      	ldr	r7, [pc, #184]	; (8000d8c <HAL_GPIO_Init+0x1c4>)
 8000cd2:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd6:	684c      	ldr	r4, [r1, #4]
 8000cd8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000cdc:	d039      	beq.n	8000d52 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cde:	4d2f      	ldr	r5, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000ce0:	682c      	ldr	r4, [r5, #0]
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	684c      	ldr	r4, [r1, #4]
 8000ce8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000cec:	d037      	beq.n	8000d5e <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cee:	4d2b      	ldr	r5, [pc, #172]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000cf0:	686c      	ldr	r4, [r5, #4]
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf6:	684c      	ldr	r4, [r1, #4]
 8000cf8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 8000cfc:	d035      	beq.n	8000d6a <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cfe:	4d27      	ldr	r5, [pc, #156]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d00:	68ac      	ldr	r4, [r5, #8]
 8000d02:	431c      	orrs	r4, r3
 8000d04:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d06:	684c      	ldr	r4, [r1, #4]
 8000d08:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8000d0c:	d033      	beq.n	8000d76 <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0e:	4d23      	ldr	r5, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d10:	68ec      	ldr	r4, [r5, #12]
 8000d12:	4323      	orrs	r3, r4
 8000d14:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000d16:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d18:	680b      	ldr	r3, [r1, #0]
 8000d1a:	fa33 f402 	lsrs.w	r4, r3, r2
 8000d1e:	d030      	beq.n	8000d82 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8000d20:	2401      	movs	r4, #1
 8000d22:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d24:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 8000d26:	429c      	cmp	r4, r3
 8000d28:	d1f5      	bne.n	8000d16 <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 8000d2a:	684d      	ldr	r5, [r1, #4]
 8000d2c:	2d12      	cmp	r5, #18
 8000d2e:	d0b7      	beq.n	8000ca0 <HAL_GPIO_Init+0xd8>
 8000d30:	d894      	bhi.n	8000c5c <HAL_GPIO_Init+0x94>
 8000d32:	2d02      	cmp	r5, #2
 8000d34:	d0b1      	beq.n	8000c9a <HAL_GPIO_Init+0xd2>
 8000d36:	f67f af4c 	bls.w	8000bd2 <HAL_GPIO_Init+0xa>
 8000d3a:	2d03      	cmp	r5, #3
 8000d3c:	d0b6      	beq.n	8000cac <HAL_GPIO_Init+0xe4>
 8000d3e:	2d11      	cmp	r5, #17
 8000d40:	f47f af4c 	bne.w	8000bdc <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	68ce      	ldr	r6, [r1, #12]
 8000d46:	3604      	adds	r6, #4
          break;
 8000d48:	e748      	b.n	8000bdc <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4a:	2401      	movs	r4, #1
 8000d4c:	e7bc      	b.n	8000cc8 <HAL_GPIO_Init+0x100>
 8000d4e:	2402      	movs	r4, #2
 8000d50:	e7ba      	b.n	8000cc8 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d52:	4d12      	ldr	r5, [pc, #72]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d54:	682c      	ldr	r4, [r5, #0]
 8000d56:	ea24 0403 	bic.w	r4, r4, r3
 8000d5a:	602c      	str	r4, [r5, #0]
 8000d5c:	e7c3      	b.n	8000ce6 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5e:	4d0f      	ldr	r5, [pc, #60]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d60:	686c      	ldr	r4, [r5, #4]
 8000d62:	ea24 0403 	bic.w	r4, r4, r3
 8000d66:	606c      	str	r4, [r5, #4]
 8000d68:	e7c5      	b.n	8000cf6 <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6a:	4d0c      	ldr	r5, [pc, #48]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d6c:	68ac      	ldr	r4, [r5, #8]
 8000d6e:	ea24 0403 	bic.w	r4, r4, r3
 8000d72:	60ac      	str	r4, [r5, #8]
 8000d74:	e7c7      	b.n	8000d06 <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d76:	4d09      	ldr	r5, [pc, #36]	; (8000d9c <HAL_GPIO_Init+0x1d4>)
 8000d78:	68ec      	ldr	r4, [r5, #12]
 8000d7a:	ea24 0303 	bic.w	r3, r4, r3
 8000d7e:	60eb      	str	r3, [r5, #12]
 8000d80:	e7c9      	b.n	8000d16 <HAL_GPIO_Init+0x14e>
  }
}
 8000d82:	b002      	add	sp, #8
 8000d84:	bcf0      	pop	{r4, r5, r6, r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	40010800 	.word	0x40010800
 8000d94:	10210000 	.word	0x10210000
 8000d98:	10310000 	.word	0x10310000
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da0:	6883      	ldr	r3, [r0, #8]
 8000da2:	4219      	tst	r1, r3
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000da8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000daa:	2001      	movs	r0, #1
 8000dac:	4770      	bx	lr
	...

08000db0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000db0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <RCC_Delay+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <RCC_Delay+0x28>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	0a5b      	lsrs	r3, r3, #9
 8000dbe:	fb00 f003 	mul.w	r0, r0, r3
 8000dc2:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8000dc4:	bf00      	nop
  }
  while (Delay --);
 8000dc6:	9b01      	ldr	r3, [sp, #4]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	9201      	str	r2, [sp, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f9      	bne.n	8000dc4 <RCC_Delay+0x14>
}
 8000dd0:	b002      	add	sp, #8
 8000dd2:	4770      	bx	lr
 8000dd4:	2000002c 	.word	0x2000002c
 8000dd8:	10624dd3 	.word	0x10624dd3

08000ddc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	f000 81f5 	beq.w	80011cc <HAL_RCC_OscConfig+0x3f0>
{
 8000de2:	b570      	push	{r4, r5, r6, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de8:	6803      	ldr	r3, [r0, #0]
 8000dea:	f013 0f01 	tst.w	r3, #1
 8000dee:	d02c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df0:	4bab      	ldr	r3, [pc, #684]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d01d      	beq.n	8000e38 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfc:	4ba8      	ldr	r3, [pc, #672]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d012      	beq.n	8000e2e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e08:	6863      	ldr	r3, [r4, #4]
 8000e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e0e:	d041      	beq.n	8000e94 <HAL_RCC_OscConfig+0xb8>
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d155      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xe4>
 8000e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e037      	b.n	8000e9e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2e:	4b9c      	ldr	r3, [pc, #624]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e36:	d0e7      	beq.n	8000e08 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e38:	4b99      	ldr	r3, [pc, #612]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e40:	d003      	beq.n	8000e4a <HAL_RCC_OscConfig+0x6e>
 8000e42:	6863      	ldr	r3, [r4, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 81c3 	beq.w	80011d0 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	f013 0f02 	tst.w	r3, #2
 8000e50:	d076      	beq.n	8000f40 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	4b93      	ldr	r3, [pc, #588]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f013 0f0c 	tst.w	r3, #12
 8000e5a:	d05f      	beq.n	8000f1c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5c:	4b90      	ldr	r3, [pc, #576]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d054      	beq.n	8000f12 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	6923      	ldr	r3, [r4, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 808a 	beq.w	8000f84 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <HAL_RCC_OscConfig+0x2c8>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e76:	f7ff fcc3 	bl	8000800 <HAL_GetTick>
 8000e7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7c:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f013 0f02 	tst.w	r3, #2
 8000e84:	d175      	bne.n	8000f72 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fcbb 	bl	8000800 <HAL_GetTick>
 8000e8a:	1b40      	subs	r0, r0, r5
 8000e8c:	2802      	cmp	r0, #2
 8000e8e:	d9f5      	bls.n	8000e7c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000e90:	2003      	movs	r0, #3
 8000e92:	e1a0      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e94:	4a82      	ldr	r2, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000e96:	6813      	ldr	r3, [r2, #0]
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	b343      	cbz	r3, 8000ef4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fcad 	bl	8000800 <HAL_GetTick>
 8000ea6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eb0:	d1cb      	bne.n	8000e4a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fca5 	bl	8000800 <HAL_GetTick>
 8000eb6:	1b40      	subs	r0, r0, r5
 8000eb8:	2864      	cmp	r0, #100	; 0x64
 8000eba:	d9f5      	bls.n	8000ea8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	e18a      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec4:	d009      	beq.n	8000eda <HAL_RCC_OscConfig+0xfe>
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e7e1      	b.n	8000e9e <HAL_RCC_OscConfig+0xc2>
 8000eda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ede:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e7d4      	b.n	8000e9e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc84 	bl	8000800 <HAL_GetTick>
 8000ef8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b69      	ldr	r3, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f02:	d0a2      	beq.n	8000e4a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fc7c 	bl	8000800 <HAL_GetTick>
 8000f08:	1b40      	subs	r0, r0, r5
 8000f0a:	2864      	cmp	r0, #100	; 0x64
 8000f0c:	d9f5      	bls.n	8000efa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000f0e:	2003      	movs	r0, #3
 8000f10:	e161      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f1a:	d1a5      	bne.n	8000e68 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1c:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f013 0f02 	tst.w	r3, #2
 8000f24:	d004      	beq.n	8000f30 <HAL_RCC_OscConfig+0x154>
 8000f26:	6923      	ldr	r3, [r4, #16]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d001      	beq.n	8000f30 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e152      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4a5b      	ldr	r2, [pc, #364]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f38:	6961      	ldr	r1, [r4, #20]
 8000f3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f3e:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	f013 0f08 	tst.w	r3, #8
 8000f46:	d032      	beq.n	8000fae <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f48:	69a3      	ldr	r3, [r4, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d05b      	beq.n	8001006 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_RCC_OscConfig+0x2cc>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f54:	f7ff fc54 	bl	8000800 <HAL_GetTick>
 8000f58:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	f013 0f02 	tst.w	r3, #2
 8000f62:	d121      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f64:	f7ff fc4c 	bl	8000800 <HAL_GetTick>
 8000f68:	1b40      	subs	r0, r0, r5
 8000f6a:	2802      	cmp	r0, #2
 8000f6c:	d9f5      	bls.n	8000f5a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000f6e:	2003      	movs	r0, #3
 8000f70:	e131      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f7a:	6961      	ldr	r1, [r4, #20]
 8000f7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e7dd      	b.n	8000f40 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000f84:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <HAL_RCC_OscConfig+0x2c8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc39 	bl	8000800 <HAL_GetTick>
 8000f8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f013 0f02 	tst.w	r3, #2
 8000f98:	d0d2      	beq.n	8000f40 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fc31 	bl	8000800 <HAL_GetTick>
 8000f9e:	1b40      	subs	r0, r0, r5
 8000fa0:	2802      	cmp	r0, #2
 8000fa2:	d9f5      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e116      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff ff01 	bl	8000db0 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	f013 0f04 	tst.w	r3, #4
 8000fb4:	f000 8098 	beq.w	80010e8 <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fc0:	d133      	bne.n	800102a <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8000fc4:	69da      	ldr	r2, [r3, #28]
 8000fc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fca:	61da      	str	r2, [r3, #28]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fd6:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <HAL_RCC_OscConfig+0x2d0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fe0:	d025      	beq.n	800102e <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe2:	68e3      	ldr	r3, [r4, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d036      	beq.n	8001056 <HAL_RCC_OscConfig+0x27a>
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d14c      	bne.n	8001086 <HAL_RCC_OscConfig+0x2aa>
 8000fec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ff0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ff4:	6a1a      	ldr	r2, [r3, #32]
 8000ff6:	f022 0201 	bic.w	r2, r2, #1
 8000ffa:	621a      	str	r2, [r3, #32]
 8000ffc:	6a1a      	ldr	r2, [r3, #32]
 8000ffe:	f022 0204 	bic.w	r2, r2, #4
 8001002:	621a      	str	r2, [r3, #32]
 8001004:	e02c      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_RCC_OscConfig+0x2cc>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800100c:	f7ff fbf8 	bl	8000800 <HAL_GetTick>
 8001010:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f013 0f02 	tst.w	r3, #2
 800101a:	d0c8      	beq.n	8000fae <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fbf0 	bl	8000800 <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	2802      	cmp	r0, #2
 8001024:	d9f5      	bls.n	8001012 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8001026:	2003      	movs	r0, #3
 8001028:	e0d5      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 800102a:	2500      	movs	r5, #0
 800102c:	e7d4      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800102e:	4a1f      	ldr	r2, [pc, #124]	; (80010ac <HAL_RCC_OscConfig+0x2d0>)
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001038:	f7ff fbe2 	bl	8000800 <HAL_GetTick>
 800103c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_RCC_OscConfig+0x2d0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001046:	d1cc      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001048:	f7ff fbda 	bl	8000800 <HAL_GetTick>
 800104c:	1b80      	subs	r0, r0, r6
 800104e:	2864      	cmp	r0, #100	; 0x64
 8001050:	d9f5      	bls.n	800103e <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8001052:	2003      	movs	r0, #3
 8001054:	e0bf      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 8001058:	6a13      	ldr	r3, [r2, #32]
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001060:	68e3      	ldr	r3, [r4, #12]
 8001062:	b37b      	cbz	r3, 80010c4 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8001064:	f7ff fbcc 	bl	8000800 <HAL_GetTick>
 8001068:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	f013 0f02 	tst.w	r3, #2
 8001072:	d138      	bne.n	80010e6 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f7ff fbc4 	bl	8000800 <HAL_GetTick>
 8001078:	1b80      	subs	r0, r0, r6
 800107a:	f241 3388 	movw	r3, #5000	; 0x1388
 800107e:	4298      	cmp	r0, r3
 8001080:	d9f3      	bls.n	800106a <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
 8001084:	e0a7      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	2b05      	cmp	r3, #5
 8001088:	d012      	beq.n	80010b0 <HAL_RCC_OscConfig+0x2d4>
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_RCC_OscConfig+0x2c4>)
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	621a      	str	r2, [r3, #32]
 8001094:	6a1a      	ldr	r2, [r3, #32]
 8001096:	f022 0204 	bic.w	r2, r2, #4
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e7e0      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	42420000 	.word	0x42420000
 80010a8:	42420480 	.word	0x42420480
 80010ac:	40007000 	.word	0x40007000
 80010b0:	4b4c      	ldr	r3, [pc, #304]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 80010b2:	6a1a      	ldr	r2, [r3, #32]
 80010b4:	f042 0204 	orr.w	r2, r2, #4
 80010b8:	621a      	str	r2, [r3, #32]
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	621a      	str	r2, [r3, #32]
 80010c2:	e7cd      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 80010c4:	f7ff fb9c 	bl	8000800 <HAL_GetTick>
 80010c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ca:	4b46      	ldr	r3, [pc, #280]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	f013 0f02 	tst.w	r3, #2
 80010d2:	d008      	beq.n	80010e6 <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d4:	f7ff fb94 	bl	8000800 <HAL_GetTick>
 80010d8:	1b80      	subs	r0, r0, r6
 80010da:	f241 3388 	movw	r3, #5000	; 0x1388
 80010de:	4298      	cmp	r0, r3
 80010e0:	d9f3      	bls.n	80010ca <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e077      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 80010e6:	b9e5      	cbnz	r5, 8001122 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e8:	69e3      	ldr	r3, [r4, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d072      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ee:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 80010f0:	6852      	ldr	r2, [r2, #4]
 80010f2:	f002 020c 	and.w	r2, r2, #12
 80010f6:	2a08      	cmp	r2, #8
 80010f8:	d056      	beq.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d017      	beq.n	800112e <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <HAL_RCC_OscConfig+0x40c>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001104:	f7ff fb7c 	bl	8000800 <HAL_GetTick>
 8001108:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001112:	d047      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001114:	f7ff fb74 	bl	8000800 <HAL_GetTick>
 8001118:	1b00      	subs	r0, r0, r4
 800111a:	2802      	cmp	r0, #2
 800111c:	d9f5      	bls.n	800110a <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e059      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4a30      	ldr	r2, [pc, #192]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 8001124:	69d3      	ldr	r3, [r2, #28]
 8001126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112a:	61d3      	str	r3, [r2, #28]
 800112c:	e7dc      	b.n	80010e8 <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <HAL_RCC_OscConfig+0x40c>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001134:	f7ff fb64 	bl	8000800 <HAL_GetTick>
 8001138:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001142:	d006      	beq.n	8001152 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fb5c 	bl	8000800 <HAL_GetTick>
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f5      	bls.n	800113a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e041      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001152:	6a23      	ldr	r3, [r4, #32]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d01a      	beq.n	8001190 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115a:	4922      	ldr	r1, [pc, #136]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 800115c:	684b      	ldr	r3, [r1, #4]
 800115e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001162:	6a22      	ldr	r2, [r4, #32]
 8001164:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001166:	4302      	orrs	r2, r0
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_RCC_OscConfig+0x40c>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001172:	f7ff fb45 	bl	8000800 <HAL_GetTick>
 8001176:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001180:	d10e      	bne.n	80011a0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff fb3d 	bl	8000800 <HAL_GetTick>
 8001186:	1b00      	subs	r0, r0, r4
 8001188:	2802      	cmp	r0, #2
 800118a:	d9f5      	bls.n	8001178 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e022      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 8001192:	6853      	ldr	r3, [r2, #4]
 8001194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001198:	68a1      	ldr	r1, [r4, #8]
 800119a:	430b      	orrs	r3, r1
 800119c:	6053      	str	r3, [r2, #4]
 800119e:	e7dc      	b.n	800115a <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 80011a0:	2000      	movs	r0, #0
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
 80011a4:	2000      	movs	r0, #0
 80011a6:	e016      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d016      	beq.n	80011da <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_RCC_OscConfig+0x408>)
 80011ae:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80011b4:	6a22      	ldr	r2, [r4, #32]
 80011b6:	4291      	cmp	r1, r2
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
 80011bc:	e00b      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011be:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00a      	beq.n	80011de <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e004      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 80011cc:	2001      	movs	r0, #1
}
 80011ce:	4770      	bx	lr
        return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	b002      	add	sp, #8
 80011d8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e7fb      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 80011de:	2000      	movs	r0, #0
 80011e0:	e7f9      	b.n	80011d6 <HAL_RCC_OscConfig+0x3fa>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	42420060 	.word	0x42420060

080011ec <HAL_RCC_GetSysClockFreq>:
{
 80011ec:	b410      	push	{r4}
 80011ee:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011f0:	4c16      	ldr	r4, [pc, #88]	; (800124c <HAL_RCC_GetSysClockFreq+0x60>)
 80011f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f6:	f10d 0c18 	add.w	ip, sp, #24
 80011fa:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011fe:	8a23      	ldrh	r3, [r4, #16]
 8001200:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_RCC_GetSysClockFreq+0x64>)
 8001206:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001208:	f003 020c 	and.w	r2, r3, #12
 800120c:	2a08      	cmp	r2, #8
 800120e:	d11a      	bne.n	8001246 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001210:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001214:	4462      	add	r2, ip
 8001216:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800121a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800121e:	d105      	bne.n	800122c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <HAL_RCC_GetSysClockFreq+0x68>)
 8001222:	fb00 f002 	mul.w	r0, r0, r2
}
 8001226:	b007      	add	sp, #28
 8001228:	bc10      	pop	{r4}
 800122a:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_RCC_GetSysClockFreq+0x64>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001234:	4463      	add	r3, ip
 8001236:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <HAL_RCC_GetSysClockFreq+0x6c>)
 800123c:	fb00 f002 	mul.w	r0, r0, r2
 8001240:	fbb0 f0f3 	udiv	r0, r0, r3
 8001244:	e7ef      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001248:	e7ed      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x3a>
 800124a:	bf00      	nop
 800124c:	08001d54 	.word	0x08001d54
 8001250:	40021000 	.word	0x40021000
 8001254:	003d0900 	.word	0x003d0900
 8001258:	007a1200 	.word	0x007a1200

0800125c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800125c:	2800      	cmp	r0, #0
 800125e:	f000 80a3 	beq.w	80013a8 <HAL_RCC_ClockConfig+0x14c>
{
 8001262:	b570      	push	{r4, r5, r6, lr}
 8001264:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <HAL_RCC_ClockConfig+0x154>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	428b      	cmp	r3, r1
 8001270:	d20c      	bcs.n	800128c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4a4f      	ldr	r2, [pc, #316]	; (80013b0 <HAL_RCC_ClockConfig+0x154>)
 8001274:	6813      	ldr	r3, [r2, #0]
 8001276:	f023 0307 	bic.w	r3, r3, #7
 800127a:	430b      	orrs	r3, r1
 800127c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	428b      	cmp	r3, r1
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8001288:	2001      	movs	r0, #1
}
 800128a:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f013 0f02 	tst.w	r3, #2
 8001292:	d017      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	f013 0f04 	tst.w	r3, #4
 8001298:	d004      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800129a:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 800129c:	6853      	ldr	r3, [r2, #4]
 800129e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012a2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	f013 0f08 	tst.w	r3, #8
 80012aa:	d004      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012ac:	4a41      	ldr	r2, [pc, #260]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012ae:	6853      	ldr	r3, [r2, #4]
 80012b0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012b4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b6:	4a3f      	ldr	r2, [pc, #252]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012be:	68a0      	ldr	r0, [r4, #8]
 80012c0:	4303      	orrs	r3, r0
 80012c2:	6053      	str	r3, [r2, #4]
 80012c4:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f013 0f01 	tst.w	r3, #1
 80012cc:	d031      	beq.n	8001332 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ce:	6863      	ldr	r3, [r4, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d020      	beq.n	8001316 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d025      	beq.n	8001324 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4a36      	ldr	r2, [pc, #216]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	f012 0f02 	tst.w	r2, #2
 80012e0:	d064      	beq.n	80013ac <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e2:	4934      	ldr	r1, [pc, #208]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012e4:	684a      	ldr	r2, [r1, #4]
 80012e6:	f022 0203 	bic.w	r2, r2, #3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80012ee:	f7ff fa87 	bl	8000800 <HAL_GetTick>
 80012f2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	6862      	ldr	r2, [r4, #4]
 80012fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001302:	d016      	beq.n	8001332 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001304:	f7ff fa7c 	bl	8000800 <HAL_GetTick>
 8001308:	1b80      	subs	r0, r0, r6
 800130a:	f241 3388 	movw	r3, #5000	; 0x1388
 800130e:	4298      	cmp	r0, r3
 8001310:	d9f0      	bls.n	80012f4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e7b9      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800131e:	d1e0      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
 8001322:	e7b2      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800132c:	d1d9      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
 8001330:	e7ab      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_RCC_ClockConfig+0x154>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	42ab      	cmp	r3, r5
 800133c:	d90c      	bls.n	8001358 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_RCC_ClockConfig+0x154>)
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f023 0307 	bic.w	r3, r3, #7
 8001346:	432b      	orrs	r3, r5
 8001348:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	42ab      	cmp	r3, r5
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8001354:	2001      	movs	r0, #1
 8001356:	e798      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	f013 0f04 	tst.w	r3, #4
 800135e:	d006      	beq.n	800136e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 8001362:	6853      	ldr	r3, [r2, #4]
 8001364:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001368:	68e1      	ldr	r1, [r4, #12]
 800136a:	430b      	orrs	r3, r1
 800136c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f013 0f08 	tst.w	r3, #8
 8001374:	d007      	beq.n	8001386 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 8001378:	6853      	ldr	r3, [r2, #4]
 800137a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800137e:	6921      	ldr	r1, [r4, #16]
 8001380:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001384:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001386:	f7ff ff31 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x158>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x15c>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	40d8      	lsrs	r0, r3
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_RCC_ClockConfig+0x160>)
 800139a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_RCC_ClockConfig+0x164>)
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	f7ff f9ea 	bl	8000778 <HAL_InitTick>
  return HAL_OK;
 80013a4:	2000      	movs	r0, #0
 80013a6:	e770      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
}
 80013aa:	4770      	bx	lr
        return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e76c      	b.n	800128a <HAL_RCC_ClockConfig+0x2e>
 80013b0:	40022000 	.word	0x40022000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	08001d68 	.word	0x08001d68
 80013bc:	2000002c 	.word	0x2000002c
 80013c0:	20000034 	.word	0x20000034

080013c4 <HAL_RCC_GetHCLKFreq>:
}
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_GetHCLKFreq+0x8>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	2000002c 	.word	0x2000002c

080013d0 <HAL_RCC_GetPCLK1Freq>:
{
 80013d0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d2:	f7ff fff7 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80013e2:	40d8      	lsrs	r0, r3
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	08001d78 	.word	0x08001d78

080013f0 <HAL_RCC_GetPCLK2Freq>:
{
 80013f0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f2:	f7ff ffe7 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80013fe:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
}
 8001402:	40d8      	lsrs	r0, r3
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	08001d78 	.word	0x08001d78

08001410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001410:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001412:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001414:	6a04      	ldr	r4, [r0, #32]
 8001416:	f024 0401 	bic.w	r4, r4, #1
 800141a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800141c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800141e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001422:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001426:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800142a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800142c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800142e:	6203      	str	r3, [r0, #32]
}
 8001430:	bc10      	pop	{r4}
 8001432:	4770      	bx	lr

08001434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001434:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001436:	6a03      	ldr	r3, [r0, #32]
 8001438:	f023 0310 	bic.w	r3, r3, #16
 800143c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800143e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001440:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001442:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001446:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800144a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800144e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001452:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001454:	6203      	str	r3, [r0, #32]
}
 8001456:	bc10      	pop	{r4}
 8001458:	4770      	bx	lr

0800145a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800145a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800145c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001460:	4319      	orrs	r1, r3
 8001462:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001466:	6081      	str	r1, [r0, #8]
}
 8001468:	4770      	bx	lr

0800146a <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800146a:	2302      	movs	r3, #2
 800146c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	6893      	ldr	r3, [r2, #8]
 8001474:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001478:	2b06      	cmp	r3, #6
 800147a:	d003      	beq.n	8001484 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001484:	2301      	movs	r3, #1
 8001486:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800148a:	2000      	movs	r0, #0
 800148c:	4770      	bx	lr

0800148e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800148e:	6802      	ldr	r2, [r0, #0]
 8001490:	68d3      	ldr	r3, [r2, #12]
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	6893      	ldr	r3, [r2, #8]
 800149c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d003      	beq.n	80014ac <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	2000      	movs	r0, #0
 80014ae:	4770      	bx	lr

080014b0 <HAL_TIM_PeriodElapsedCallback>:
}
 80014b0:	4770      	bx	lr

080014b2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80014b2:	4770      	bx	lr

080014b4 <HAL_TIM_IC_CaptureCallback>:
}
 80014b4:	4770      	bx	lr

080014b6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80014b6:	4770      	bx	lr

080014b8 <HAL_TIM_TriggerCallback>:
}
 80014b8:	4770      	bx	lr

080014ba <HAL_TIM_IRQHandler>:
{
 80014ba:	b510      	push	{r4, lr}
 80014bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014be:	6803      	ldr	r3, [r0, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	f012 0f02 	tst.w	r2, #2
 80014c6:	d011      	beq.n	80014ec <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	f012 0f02 	tst.w	r2, #2
 80014ce:	d00d      	beq.n	80014ec <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014d0:	f06f 0202 	mvn.w	r2, #2
 80014d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f013 0f03 	tst.w	r3, #3
 80014e2:	d070      	beq.n	80015c6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80014e4:	f7ff ffe6 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014e8:	2300      	movs	r3, #0
 80014ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	f012 0f04 	tst.w	r2, #4
 80014f4:	d012      	beq.n	800151c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	f012 0f04 	tst.w	r2, #4
 80014fc:	d00e      	beq.n	800151c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014fe:	f06f 0204 	mvn.w	r2, #4
 8001502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001504:	2302      	movs	r3, #2
 8001506:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001510:	d05f      	beq.n	80015d2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff ffce 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001518:	2300      	movs	r3, #0
 800151a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800151c:	6823      	ldr	r3, [r4, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	f012 0f08 	tst.w	r2, #8
 8001524:	d012      	beq.n	800154c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	f012 0f08 	tst.w	r2, #8
 800152c:	d00e      	beq.n	800154c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800152e:	f06f 0208 	mvn.w	r2, #8
 8001532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001534:	2304      	movs	r3, #4
 8001536:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f013 0f03 	tst.w	r3, #3
 8001540:	d04e      	beq.n	80015e0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff ffb6 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001548:	2300      	movs	r3, #0
 800154a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	f012 0f10 	tst.w	r2, #16
 8001554:	d012      	beq.n	800157c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	f012 0f10 	tst.w	r2, #16
 800155c:	d00e      	beq.n	800157c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800155e:	f06f 0210 	mvn.w	r2, #16
 8001562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001564:	2308      	movs	r3, #8
 8001566:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001570:	d03d      	beq.n	80015ee <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff ff9e 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001578:	2300      	movs	r3, #0
 800157a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	f012 0f01 	tst.w	r2, #1
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	f012 0f01 	tst.w	r2, #1
 800158c:	d136      	bne.n	80015fc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001596:	d003      	beq.n	80015a0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800159e:	d134      	bne.n	800160a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80015a8:	d003      	beq.n	80015b2 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80015b0:	d132      	bne.n	8001618 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	f012 0f20 	tst.w	r2, #32
 80015ba:	d003      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	f012 0f20 	tst.w	r2, #32
 80015c2:	d130      	bne.n	8001626 <HAL_TIM_IRQHandler+0x16c>
}
 80015c4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c6:	f7ff ff74 	bl	80014b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ca:	4620      	mov	r0, r4
 80015cc:	f7ff ff73 	bl	80014b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80015d0:	e78a      	b.n	80014e8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff ff6d 	bl	80014b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff ff6c 	bl	80014b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80015de:	e79b      	b.n	8001518 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e0:	4620      	mov	r0, r4
 80015e2:	f7ff ff66 	bl	80014b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff ff65 	bl	80014b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80015ec:	e7ac      	b.n	8001548 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff ff5f 	bl	80014b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff5e 	bl	80014b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80015fa:	e7bd      	b.n	8001578 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015fc:	f06f 0201 	mvn.w	r2, #1
 8001600:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff54 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
 8001608:	e7c1      	b.n	800158e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800160a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800160e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001610:	4620      	mov	r0, r4
 8001612:	f000 f8fe 	bl	8001812 <HAL_TIMEx_BreakCallback>
 8001616:	e7c3      	b.n	80015a0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800161c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ff4a 	bl	80014b8 <HAL_TIM_TriggerCallback>
 8001624:	e7c5      	b.n	80015b2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001626:	f06f 0220 	mvn.w	r2, #32
 800162a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800162c:	4620      	mov	r0, r4
 800162e:	f000 f8ef 	bl	8001810 <HAL_TIMEx_CommutCallback>
}
 8001632:	e7c7      	b.n	80015c4 <HAL_TIM_IRQHandler+0x10a>

08001634 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001634:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <TIM_Base_SetConfig+0x70>)
 8001638:	4290      	cmp	r0, r2
 800163a:	d00a      	beq.n	8001652 <TIM_Base_SetConfig+0x1e>
 800163c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001640:	d007      	beq.n	8001652 <TIM_Base_SetConfig+0x1e>
 8001642:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001646:	4290      	cmp	r0, r2
 8001648:	d003      	beq.n	8001652 <TIM_Base_SetConfig+0x1e>
 800164a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164e:	4290      	cmp	r0, r2
 8001650:	d103      	bne.n	800165a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001656:	684a      	ldr	r2, [r1, #4]
 8001658:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <TIM_Base_SetConfig+0x70>)
 800165c:	4290      	cmp	r0, r2
 800165e:	d00a      	beq.n	8001676 <TIM_Base_SetConfig+0x42>
 8001660:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001664:	d007      	beq.n	8001676 <TIM_Base_SetConfig+0x42>
 8001666:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800166a:	4290      	cmp	r0, r2
 800166c:	d003      	beq.n	8001676 <TIM_Base_SetConfig+0x42>
 800166e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001672:	4290      	cmp	r0, r2
 8001674:	d103      	bne.n	800167e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800167a:	68ca      	ldr	r2, [r1, #12]
 800167c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800167e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001682:	694a      	ldr	r2, [r1, #20]
 8001684:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001686:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001688:	688b      	ldr	r3, [r1, #8]
 800168a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800168c:	680b      	ldr	r3, [r1, #0]
 800168e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <TIM_Base_SetConfig+0x70>)
 8001692:	4298      	cmp	r0, r3
 8001694:	d002      	beq.n	800169c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001696:	2301      	movs	r3, #1
 8001698:	6143      	str	r3, [r0, #20]
}
 800169a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800169c:	690b      	ldr	r3, [r1, #16]
 800169e:	6303      	str	r3, [r0, #48]	; 0x30
 80016a0:	e7f9      	b.n	8001696 <TIM_Base_SetConfig+0x62>
 80016a2:	bf00      	nop
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80016a8:	b1a8      	cbz	r0, 80016d6 <HAL_TIM_Base_Init+0x2e>
{
 80016aa:	b510      	push	{r4, lr}
 80016ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80016ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016b2:	b15b      	cbz	r3, 80016cc <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ba:	1d21      	adds	r1, r4, #4
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f7ff ffb9 	bl	8001634 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016c2:	2301      	movs	r3, #1
 80016c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016c8:	2000      	movs	r0, #0
}
 80016ca:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016d0:	f7fe fe62 	bl	8000398 <HAL_TIM_Base_MspInit>
 80016d4:	e7ee      	b.n	80016b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
}
 80016d8:	4770      	bx	lr

080016da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80016da:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80016dc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016de:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80016e6:	430b      	orrs	r3, r1
 80016e8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016ea:	6083      	str	r3, [r0, #8]
}
 80016ec:	bc10      	pop	{r4}
 80016ee:	4770      	bx	lr

080016f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d066      	beq.n	80017c6 <HAL_TIM_ConfigClockSource+0xd6>
{
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80016fc:	2301      	movs	r3, #1
 80016fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001702:	2302      	movs	r3, #2
 8001704:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800170c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001710:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001714:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001716:	680b      	ldr	r3, [r1, #0]
 8001718:	2b40      	cmp	r3, #64	; 0x40
 800171a:	d04a      	beq.n	80017b2 <HAL_TIM_ConfigClockSource+0xc2>
 800171c:	d913      	bls.n	8001746 <HAL_TIM_ConfigClockSource+0x56>
 800171e:	2b60      	cmp	r3, #96	; 0x60
 8001720:	d03d      	beq.n	800179e <HAL_TIM_ConfigClockSource+0xae>
 8001722:	d91e      	bls.n	8001762 <HAL_TIM_ConfigClockSource+0x72>
 8001724:	2b70      	cmp	r3, #112	; 0x70
 8001726:	d028      	beq.n	800177a <HAL_TIM_ConfigClockSource+0x8a>
 8001728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800172c:	d130      	bne.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800172e:	68cb      	ldr	r3, [r1, #12]
 8001730:	684a      	ldr	r2, [r1, #4]
 8001732:	6889      	ldr	r1, [r1, #8]
 8001734:	6800      	ldr	r0, [r0, #0]
 8001736:	f7ff ffd0 	bl	80016da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	6893      	ldr	r3, [r2, #8]
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6093      	str	r3, [r2, #8]
      break;
 8001744:	e024      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001746:	2b10      	cmp	r3, #16
 8001748:	d006      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x68>
 800174a:	d904      	bls.n	8001756 <HAL_TIM_ConfigClockSource+0x66>
 800174c:	2b20      	cmp	r3, #32
 800174e:	d003      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x68>
 8001750:	2b30      	cmp	r3, #48	; 0x30
 8001752:	d001      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x68>
 8001754:	e01c      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
 8001756:	b9db      	cbnz	r3, 8001790 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001758:	4619      	mov	r1, r3
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	f7ff fe7d 	bl	800145a <TIM_ITRx_SetConfig>
      break;
 8001760:	e016      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001762:	2b50      	cmp	r3, #80	; 0x50
 8001764:	d114      	bne.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001766:	68ca      	ldr	r2, [r1, #12]
 8001768:	6849      	ldr	r1, [r1, #4]
 800176a:	6800      	ldr	r0, [r0, #0]
 800176c:	f7ff fe50 	bl	8001410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001770:	2150      	movs	r1, #80	; 0x50
 8001772:	6820      	ldr	r0, [r4, #0]
 8001774:	f7ff fe71 	bl	800145a <TIM_ITRx_SetConfig>
      break;
 8001778:	e00a      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800177a:	68cb      	ldr	r3, [r1, #12]
 800177c:	684a      	ldr	r2, [r1, #4]
 800177e:	6889      	ldr	r1, [r1, #8]
 8001780:	6800      	ldr	r0, [r0, #0]
 8001782:	f7ff ffaa 	bl	80016da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800178a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800178e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001790:	2301      	movs	r3, #1
 8001792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001796:	2000      	movs	r0, #0
 8001798:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800179c:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800179e:	68ca      	ldr	r2, [r1, #12]
 80017a0:	6849      	ldr	r1, [r1, #4]
 80017a2:	6800      	ldr	r0, [r0, #0]
 80017a4:	f7ff fe46 	bl	8001434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80017a8:	2160      	movs	r1, #96	; 0x60
 80017aa:	6820      	ldr	r0, [r4, #0]
 80017ac:	f7ff fe55 	bl	800145a <TIM_ITRx_SetConfig>
      break;
 80017b0:	e7ee      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017b2:	68ca      	ldr	r2, [r1, #12]
 80017b4:	6849      	ldr	r1, [r1, #4]
 80017b6:	6800      	ldr	r0, [r0, #0]
 80017b8:	f7ff fe2a 	bl	8001410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017bc:	2140      	movs	r1, #64	; 0x40
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	f7ff fe4b 	bl	800145a <TIM_ITRx_SetConfig>
      break;
 80017c4:	e7e4      	b.n	8001790 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80017c6:	2002      	movs	r0, #2
}
 80017c8:	4770      	bx	lr

080017ca <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d01c      	beq.n	800180c <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80017d2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80017d4:	2601      	movs	r6, #1
 80017d6:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017da:	2302      	movs	r3, #2
 80017dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e0:	6802      	ldr	r2, [r0, #0]
 80017e2:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017e4:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017e6:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017ea:	680c      	ldr	r4, [r1, #0]
 80017ec:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80017ee:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017f2:	684b      	ldr	r3, [r1, #4]
 80017f4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80017f6:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80017f8:	6802      	ldr	r2, [r0, #0]
 80017fa:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80017fc:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001800:	2300      	movs	r3, #0
 8001802:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001806:	4618      	mov	r0, r3
}
 8001808:	bc70      	pop	{r4, r5, r6}
 800180a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800180c:	2002      	movs	r0, #2
}
 800180e:	4770      	bx	lr

08001810 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001810:	4770      	bx	lr

08001812 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001812:	4770      	bx	lr

08001814 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	68d3      	ldr	r3, [r2, #12]
 8001818:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800181c:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800181e:	2320      	movs	r3, #32
 8001820:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001824:	4770      	bx	lr

08001826 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001826:	6802      	ldr	r2, [r0, #0]
 8001828:	68d3      	ldr	r3, [r2, #12]
 800182a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800182e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001830:	6802      	ldr	r2, [r0, #0]
 8001832:	6953      	ldr	r3, [r2, #20]
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800183a:	2320      	movs	r3, #32
 800183c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001840:	4770      	bx	lr

08001842 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001842:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b21      	cmp	r3, #33	; 0x21
 800184a:	d12a      	bne.n	80018a2 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800184c:	6883      	ldr	r3, [r0, #8]
 800184e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001852:	d016      	beq.n	8001882 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001854:	6a03      	ldr	r3, [r0, #32]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	6202      	str	r2, [r0, #32]
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	6803      	ldr	r3, [r0, #0]
 800185e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001860:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001862:	3b01      	subs	r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001868:	b9eb      	cbnz	r3, 80018a6 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800186a:	6802      	ldr	r2, [r0, #0]
 800186c:	68d3      	ldr	r3, [r2, #12]
 800186e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001872:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001874:	6802      	ldr	r2, [r0, #0]
 8001876:	68d3      	ldr	r3, [r2, #12]
 8001878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187c:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800187e:	2000      	movs	r0, #0
 8001880:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001882:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	6802      	ldr	r2, [r0, #0]
 8001888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188c:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800188e:	6903      	ldr	r3, [r0, #16]
 8001890:	b91b      	cbnz	r3, 800189a <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8001892:	6a03      	ldr	r3, [r0, #32]
 8001894:	3302      	adds	r3, #2
 8001896:	6203      	str	r3, [r0, #32]
 8001898:	e7e2      	b.n	8001860 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 800189a:	6a03      	ldr	r3, [r0, #32]
 800189c:	3301      	adds	r3, #1
 800189e:	6203      	str	r3, [r0, #32]
 80018a0:	e7de      	b.n	8001860 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2002      	movs	r0, #2
 80018a4:	4770      	bx	lr
    return HAL_OK;
 80018a6:	2000      	movs	r0, #0
  }
}
 80018a8:	4770      	bx	lr
	...

080018ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b0:	6802      	ldr	r2, [r0, #0]
 80018b2:	6913      	ldr	r3, [r2, #16]
 80018b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b8:	68c1      	ldr	r1, [r0, #12]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018be:	6883      	ldr	r3, [r0, #8]
 80018c0:	6902      	ldr	r2, [r0, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	6942      	ldr	r2, [r0, #20]
 80018c6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80018c8:	6801      	ldr	r1, [r0, #0]
 80018ca:	68cb      	ldr	r3, [r1, #12]
 80018cc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018d0:	f023 030c 	bic.w	r3, r3, #12
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018d8:	6802      	ldr	r2, [r0, #0]
 80018da:	6953      	ldr	r3, [r2, #20]
 80018dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e0:	6981      	ldr	r1, [r0, #24]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80018e6:	6802      	ldr	r2, [r0, #0]
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <UART_SetConfig+0xc4>)
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d01f      	beq.n	800192e <UART_SetConfig+0x82>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018ee:	f7ff fd6f 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018fa:	6863      	ldr	r3, [r4, #4]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001902:	4d1c      	ldr	r5, [pc, #112]	; (8001974 <UART_SetConfig+0xc8>)
 8001904:	fba5 3200 	umull	r3, r2, r5, r0
 8001908:	0951      	lsrs	r1, r2, #5
 800190a:	2264      	movs	r2, #100	; 0x64
 800190c:	fb02 0211 	mls	r2, r2, r1, r0
 8001910:	0113      	lsls	r3, r2, #4
 8001912:	3332      	adds	r3, #50	; 0x32
 8001914:	fba5 2303 	umull	r2, r3, r5, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800191e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	6821      	ldr	r1, [r4, #0]
 8001928:	4413      	add	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800192c:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800192e:	f7ff fd5f 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001932:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001936:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001942:	4d0c      	ldr	r5, [pc, #48]	; (8001974 <UART_SetConfig+0xc8>)
 8001944:	fba5 3200 	umull	r3, r2, r5, r0
 8001948:	0951      	lsrs	r1, r2, #5
 800194a:	2264      	movs	r2, #100	; 0x64
 800194c:	fb02 0211 	mls	r2, r2, r1, r0
 8001950:	0113      	lsls	r3, r2, #4
 8001952:	3332      	adds	r3, #50	; 0x32
 8001954:	fba5 2303 	umull	r2, r3, r5, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	6821      	ldr	r1, [r4, #0]
 8001968:	4413      	add	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
 800196c:	e7de      	b.n	800192c <UART_SetConfig+0x80>
 800196e:	bf00      	nop
 8001970:	40013800 	.word	0x40013800
 8001974:	51eb851f 	.word	0x51eb851f

08001978 <HAL_UART_Init>:
  if (huart == NULL)
 8001978:	b358      	cbz	r0, 80019d2 <HAL_UART_Init+0x5a>
{
 800197a:	b510      	push	{r4, lr}
 800197c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800197e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001982:	b30b      	cbz	r3, 80019c8 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001984:	2324      	movs	r3, #36	; 0x24
 8001986:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	68d3      	ldr	r3, [r2, #12]
 800198e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001992:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ff89 	bl	80018ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6913      	ldr	r3, [r2, #16]
 800199e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019a2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	6953      	ldr	r3, [r2, #20]
 80019a8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019ac:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	68d3      	ldr	r3, [r2, #12]
 80019b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b8:	2000      	movs	r0, #0
 80019ba:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019bc:	2320      	movs	r3, #32
 80019be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80019c6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019c8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80019cc:	f7fe fd14 	bl	80003f8 <HAL_UART_MspInit>
 80019d0:	e7d8      	b.n	8001984 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80019d2:	2001      	movs	r0, #1
}
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_UART_Transmit_DMA>:
{
 80019d8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80019da:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80019de:	b2e4      	uxtb	r4, r4
 80019e0:	2c20      	cmp	r4, #32
 80019e2:	d131      	bne.n	8001a48 <HAL_UART_Transmit_DMA+0x70>
    if ((pData == NULL) || (Size == 0U))
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d031      	beq.n	8001a4c <HAL_UART_Transmit_DMA+0x74>
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d031      	beq.n	8001a50 <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 80019ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d02f      	beq.n	8001a54 <HAL_UART_Transmit_DMA+0x7c>
 80019f4:	4613      	mov	r3, r2
 80019f6:	4604      	mov	r4, r0
 80019f8:	2201      	movs	r2, #1
 80019fa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 80019fe:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001a00:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a02:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	2500      	movs	r5, #0
 8001a06:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a08:	2221      	movs	r2, #33	; 0x21
 8001a0a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001a0e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <HAL_UART_Transmit_DMA+0x80>)
 8001a12:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001a14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <HAL_UART_Transmit_DMA+0x84>)
 8001a18:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001a1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a1c:	4810      	ldr	r0, [pc, #64]	; (8001a60 <HAL_UART_Transmit_DMA+0x88>)
 8001a1e:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8001a20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a22:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001a24:	6822      	ldr	r2, [r4, #0]
 8001a26:	3204      	adds	r2, #4
 8001a28:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001a2a:	f7fe ffa5 	bl	8000978 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a34:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8001a36:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	6953      	ldr	r3, [r2, #20]
 8001a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a42:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001a44:	4628      	mov	r0, r5
 8001a46:	e000      	b.n	8001a4a <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 8001a48:	2002      	movs	r0, #2
}
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	e7fc      	b.n	8001a4a <HAL_UART_Transmit_DMA+0x72>
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7fa      	b.n	8001a4a <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 8001a54:	2002      	movs	r0, #2
 8001a56:	e7f8      	b.n	8001a4a <HAL_UART_Transmit_DMA+0x72>
 8001a58:	08001a67 	.word	0x08001a67
 8001a5c:	08001ab3 	.word	0x08001ab3
 8001a60:	08001b5d 	.word	0x08001b5d

08001a64 <HAL_UART_TxCpltCallback>:
}
 8001a64:	4770      	bx	lr

08001a66 <UART_DMATransmitCplt>:
{
 8001a66:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6a:	6802      	ldr	r2, [r0, #0]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	f012 0f20 	tst.w	r2, #32
 8001a72:	d10c      	bne.n	8001a8e <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 8001a74:	2200      	movs	r2, #0
 8001a76:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	694a      	ldr	r2, [r1, #20]
 8001a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a80:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68d3      	ldr	r3, [r2, #12]
 8001a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffe8 	bl	8001a64 <HAL_UART_TxCpltCallback>
}
 8001a94:	e7fa      	b.n	8001a8c <UART_DMATransmitCplt+0x26>

08001a96 <UART_EndTransmit_IT>:
{
 8001a96:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001a98:	6801      	ldr	r1, [r0, #0]
 8001a9a:	68cb      	ldr	r3, [r1, #12]
 8001a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aa0:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_UART_TxCpltCallback>
}
 8001aac:	2000      	movs	r0, #0
 8001aae:	bd08      	pop	{r3, pc}

08001ab0 <HAL_UART_TxHalfCpltCallback>:
}
 8001ab0:	4770      	bx	lr

08001ab2 <UART_DMATxHalfCplt>:
{
 8001ab2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8001ab4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001ab6:	f7ff fffb 	bl	8001ab0 <HAL_UART_TxHalfCpltCallback>
}
 8001aba:	bd08      	pop	{r3, pc}

08001abc <HAL_UART_RxCpltCallback>:
}
 8001abc:	4770      	bx	lr

08001abe <UART_Receive_IT>:
{
 8001abe:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ac0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b22      	cmp	r3, #34	; 0x22
 8001ac8:	d145      	bne.n	8001b56 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aca:	6883      	ldr	r3, [r0, #8]
 8001acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad0:	d00e      	beq.n	8001af0 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ad2:	6903      	ldr	r3, [r0, #16]
 8001ad4:	bb03      	cbnz	r3, 8001b18 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ad6:	6803      	ldr	r3, [r0, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001adc:	1c59      	adds	r1, r3, #1
 8001ade:	6281      	str	r1, [r0, #40]	; 0x28
 8001ae0:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8001ae2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001aea:	b1f3      	cbz	r3, 8001b2a <UART_Receive_IT+0x6c>
    return HAL_OK;
 8001aec:	2000      	movs	r0, #0
 8001aee:	e033      	b.n	8001b58 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001af0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001af2:	6903      	ldr	r3, [r0, #16]
 8001af4:	b943      	cbnz	r3, 8001b08 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001af6:	6803      	ldr	r3, [r0, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afe:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001b00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b02:	3302      	adds	r3, #2
 8001b04:	6283      	str	r3, [r0, #40]	; 0x28
 8001b06:	e7ec      	b.n	8001ae2 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b08:	6803      	ldr	r3, [r0, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001b10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b12:	3301      	adds	r3, #1
 8001b14:	6283      	str	r3, [r0, #40]	; 0x28
 8001b16:	e7e4      	b.n	8001ae2 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b18:	6803      	ldr	r3, [r0, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001b1e:	1c51      	adds	r1, r2, #1
 8001b20:	6281      	str	r1, [r0, #40]	; 0x28
 8001b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b26:	7013      	strb	r3, [r2, #0]
 8001b28:	e7db      	b.n	8001ae2 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b2a:	6802      	ldr	r2, [r0, #0]
 8001b2c:	68d3      	ldr	r3, [r2, #12]
 8001b2e:	f023 0320 	bic.w	r3, r3, #32
 8001b32:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b34:	6802      	ldr	r2, [r0, #0]
 8001b36:	68d3      	ldr	r3, [r2, #12]
 8001b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b3c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6953      	ldr	r3, [r2, #20]
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001b48:	2320      	movs	r3, #32
 8001b4a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001b4e:	f7ff ffb5 	bl	8001abc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001b52:	2000      	movs	r0, #0
 8001b54:	e000      	b.n	8001b58 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8001b56:	2002      	movs	r0, #2
}
 8001b58:	bd08      	pop	{r3, pc}

08001b5a <HAL_UART_ErrorCallback>:
}
 8001b5a:	4770      	bx	lr

08001b5c <UART_DMAError>:
{
 8001b5c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001b64:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b21      	cmp	r3, #33	; 0x21
 8001b6c:	d010      	beq.n	8001b90 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001b76:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b22      	cmp	r3, #34	; 0x22
 8001b7e:	d011      	beq.n	8001ba4 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff ffe6 	bl	8001b5a <HAL_UART_ErrorCallback>
}
 8001b8e:	bd10      	pop	{r4, pc}
 8001b90:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d0ea      	beq.n	8001b6e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff fe39 	bl	8001814 <UART_EndTxTransfer>
 8001ba2:	e7e4      	b.n	8001b6e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d0eb      	beq.n	8001b80 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7ff fe3a 	bl	8001826 <UART_EndRxTransfer>
 8001bb2:	e7e5      	b.n	8001b80 <UART_DMAError+0x24>

08001bb4 <HAL_UART_IRQHandler>:
{
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bb8:	6802      	ldr	r2, [r0, #0]
 8001bba:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bbc:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bbe:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8001bc0:	f013 000f 	ands.w	r0, r3, #15
 8001bc4:	d105      	bne.n	8001bd2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bc6:	f013 0f20 	tst.w	r3, #32
 8001bca:	d002      	beq.n	8001bd2 <HAL_UART_IRQHandler+0x1e>
 8001bcc:	f011 0f20 	tst.w	r1, #32
 8001bd0:	d153      	bne.n	8001c7a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	d067      	beq.n	8001ca6 <HAL_UART_IRQHandler+0xf2>
 8001bd6:	f012 0201 	ands.w	r2, r2, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_UART_IRQHandler+0x2e>
 8001bdc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001be0:	d061      	beq.n	8001ca6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001be2:	f013 0f01 	tst.w	r3, #1
 8001be6:	d006      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x42>
 8001be8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001bec:	d003      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001bf0:	f040 0001 	orr.w	r0, r0, #1
 8001bf4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bf6:	f013 0f04 	tst.w	r3, #4
 8001bfa:	d004      	beq.n	8001c06 <HAL_UART_IRQHandler+0x52>
 8001bfc:	b11a      	cbz	r2, 8001c06 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c00:	f040 0002 	orr.w	r0, r0, #2
 8001c04:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c06:	f013 0f02 	tst.w	r3, #2
 8001c0a:	d004      	beq.n	8001c16 <HAL_UART_IRQHandler+0x62>
 8001c0c:	b11a      	cbz	r2, 8001c16 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c10:	f040 0004 	orr.w	r0, r0, #4
 8001c14:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c16:	f013 0f08 	tst.w	r3, #8
 8001c1a:	d004      	beq.n	8001c26 <HAL_UART_IRQHandler+0x72>
 8001c1c:	b11a      	cbz	r2, 8001c26 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c20:	f042 0208 	orr.w	r2, r2, #8
 8001c24:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d048      	beq.n	8001cbe <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c2c:	f013 0f20 	tst.w	r3, #32
 8001c30:	d002      	beq.n	8001c38 <HAL_UART_IRQHandler+0x84>
 8001c32:	f011 0f20 	tst.w	r1, #32
 8001c36:	d124      	bne.n	8001c82 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c42:	f012 0f08 	tst.w	r2, #8
 8001c46:	d100      	bne.n	8001c4a <HAL_UART_IRQHandler+0x96>
 8001c48:	b33b      	cbz	r3, 8001c9a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f7ff fdeb 	bl	8001826 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001c58:	d01b      	beq.n	8001c92 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c60:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c64:	b18b      	cbz	r3, 8001c8a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_UART_IRQHandler+0x11c>)
 8001c68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c6c:	f7fe febe 	bl	80009ec <HAL_DMA_Abort_IT>
 8001c70:	b328      	cbz	r0, 8001cbe <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c72:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c76:	4798      	blx	r3
 8001c78:	e021      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff ff1f 	bl	8001abe <UART_Receive_IT>
      return;
 8001c80:	e01d      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff ff1b 	bl	8001abe <UART_Receive_IT>
 8001c88:	e7d6      	b.n	8001c38 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff ff65 	bl	8001b5a <HAL_UART_ErrorCallback>
 8001c90:	e015      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff ff61 	bl	8001b5a <HAL_UART_ErrorCallback>
 8001c98:	e011      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7ff ff5d 	bl	8001b5a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001ca4:	e00b      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001caa:	d002      	beq.n	8001cb2 <HAL_UART_IRQHandler+0xfe>
 8001cac:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cb0:	d106      	bne.n	8001cc0 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cb2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cb6:	d002      	beq.n	8001cbe <HAL_UART_IRQHandler+0x10a>
 8001cb8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001cbc:	d104      	bne.n	8001cc8 <HAL_UART_IRQHandler+0x114>
}
 8001cbe:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff fdbe 	bl	8001842 <UART_Transmit_IT>
    return;
 8001cc6:	e7fa      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff fee4 	bl	8001a96 <UART_EndTransmit_IT>
    return;
 8001cce:	e7f6      	b.n	8001cbe <HAL_UART_IRQHandler+0x10a>
 8001cd0:	08001cd5 	.word	0x08001cd5

08001cd4 <UART_DMAAbortOnError>:
{
 8001cd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001cdc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001cde:	f7ff ff3c 	bl	8001b5a <HAL_UART_ErrorCallback>
}
 8001ce2:	bd08      	pop	{r3, pc}

08001ce4 <__libc_init_array>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	4e0c      	ldr	r6, [pc, #48]	; (8001d1c <__libc_init_array+0x38>)
 8001cea:	4c0d      	ldr	r4, [pc, #52]	; (8001d20 <__libc_init_array+0x3c>)
 8001cec:	1ba4      	subs	r4, r4, r6
 8001cee:	10a4      	asrs	r4, r4, #2
 8001cf0:	42a5      	cmp	r5, r4
 8001cf2:	d109      	bne.n	8001d08 <__libc_init_array+0x24>
 8001cf4:	f000 f822 	bl	8001d3c <_init>
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	4e0a      	ldr	r6, [pc, #40]	; (8001d24 <__libc_init_array+0x40>)
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <__libc_init_array+0x44>)
 8001cfe:	1ba4      	subs	r4, r4, r6
 8001d00:	10a4      	asrs	r4, r4, #2
 8001d02:	42a5      	cmp	r5, r4
 8001d04:	d105      	bne.n	8001d12 <__libc_init_array+0x2e>
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d0c:	4798      	blx	r3
 8001d0e:	3501      	adds	r5, #1
 8001d10:	e7ee      	b.n	8001cf0 <__libc_init_array+0xc>
 8001d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d16:	4798      	blx	r3
 8001d18:	3501      	adds	r5, #1
 8001d1a:	e7f2      	b.n	8001d02 <__libc_init_array+0x1e>
 8001d1c:	08001d80 	.word	0x08001d80
 8001d20:	08001d80 	.word	0x08001d80
 8001d24:	08001d80 	.word	0x08001d80
 8001d28:	08001d84 	.word	0x08001d84

08001d2c <memset>:
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4402      	add	r2, r0
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d100      	bne.n	8001d36 <memset+0xa>
 8001d34:	4770      	bx	lr
 8001d36:	f803 1b01 	strb.w	r1, [r3], #1
 8001d3a:	e7f9      	b.n	8001d30 <memset+0x4>

08001d3c <_init>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

08001d48 <_fini>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr
