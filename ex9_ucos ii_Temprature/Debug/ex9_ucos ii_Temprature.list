
ex9_ucos ii_Temprature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004474  08004474  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004474  08004474  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004474  08004474  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004474  08004474  00014474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800447c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d78  2000005c  080044d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003dd4  080044d8  00023dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c47  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003055  00000000  00000000  00037ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016501  00000000  00000000  0003ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aed6  00000000  00000000  000531b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075cc9  00000000  00000000  0005e087  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  000d3dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004228 	.word	0x08004228

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004228 	.word	0x08004228

0800014c <OS_CPU_SR_Save>:
@                          :
@                 }
@********************************************************************************************************
.thumb_func
OS_CPU_SR_Save:
    MRS     R0, PRIMASK                                         @ Set prio int mask to mask all (except faults)
 800014c:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 8000150:	b672      	cpsid	i
    BX      LR
 8000152:	4770      	bx	lr

08000154 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    MSR     PRIMASK, R0
 8000154:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 8000158:	4770      	bx	lr

0800015a <OSStartHighRdy>:
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 800015a:	481f      	ldr	r0, [pc, #124]	; (80001d8 <OS_CPU_PendSVHandler_nosave+0x2e>)
    LDR     R1, =NVIC_PENDSV_PRI
 800015c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    STRB    R1, [R0]
 8000160:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000162:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000164:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000168:	481c      	ldr	r0, [pc, #112]	; (80001dc <OS_CPU_PendSVHandler_nosave+0x32>)
    LDR     R1, [R0]
 800016a:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1    
 800016c:	f381 8808 	msr	MSP, r1

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000170:	481b      	ldr	r0, [pc, #108]	; (80001e0 <OS_CPU_PendSVHandler_nosave+0x36>)
    MOVS    R1, #1
 8000172:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000174:	7001      	strb	r1, [r0, #0]
    
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000176:	481b      	ldr	r0, [pc, #108]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 8000178:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 800017c:	6001      	str	r1, [r0, #0]

    CPSIE   I                                                   @ Enable interrupts at processor level
 800017e:	b662      	cpsie	i

08000180 <OSStartHang>:

OSStartHang:
    B       OSStartHang                                         @ Should never get here
 8000180:	e7fe      	b.n	8000180 <OSStartHang>

08000182 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000182:	4818      	ldr	r0, [pc, #96]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 8000184:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000188:	6001      	str	r1, [r0, #0]
    BX      LR
 800018a:	4770      	bx	lr

0800018c <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800018c:	4815      	ldr	r0, [pc, #84]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 800018e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000192:	6001      	str	r1, [r0, #0]
    BX      LR
 8000194:	4770      	bx	lr

08000196 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000196:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000198:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 800019c:	b128      	cbz	r0, 80001aa <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
 800019e:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
 80001a0:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 80001a4:	4910      	ldr	r1, [pc, #64]	; (80001e8 <OS_CPU_PendSVHandler_nosave+0x3e>)
    LDR     R1, [R1]
 80001a6:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80001a8:	6008      	str	r0, [r1, #0]

080001aa <OS_CPU_PendSVHandler_nosave>:

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
 80001aa:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80001ac:	480f      	ldr	r0, [pc, #60]	; (80001ec <OS_CPU_PendSVHandler_nosave+0x42>)
    BLX     R0
 80001ae:	4780      	blx	r0
    POP     {R14}
 80001b0:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 80001b4:	480e      	ldr	r0, [pc, #56]	; (80001f0 <OS_CPU_PendSVHandler_nosave+0x46>)
    LDR     R1, =OSPrioHighRdy
 80001b6:	490f      	ldr	r1, [pc, #60]	; (80001f4 <OS_CPU_PendSVHandler_nosave+0x4a>)
    LDRB    R2, [R1]
 80001b8:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80001ba:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCur                                       @ OSTCBCur  = OSTCBHighRdy;
 80001bc:	480a      	ldr	r0, [pc, #40]	; (80001e8 <OS_CPU_PendSVHandler_nosave+0x3e>)
    LDR     R1, =OSTCBHighRdy
 80001be:	490e      	ldr	r1, [pc, #56]	; (80001f8 <OS_CPU_PendSVHandler_nosave+0x4e>)
    LDR     R2, [R1]
 80001c0:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 80001c2:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80001c4:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process stack
 80001c6:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
 80001ca:	3020      	adds	r0, #32
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80001cc:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0x04                                       @ Ensure exception return uses process stack
 80001d0:	f04e 0e04 	orr.w	lr, lr, #4
    CPSIE   I
 80001d4:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80001d6:	4770      	bx	lr
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 80001d8:	e000ed22 	.word	0xe000ed22
    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001dc:	2000187c 	.word	0x2000187c
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001e0:	20001acd 	.word	0x20001acd
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80001e4:	e000ed04 	.word	0xe000ed04
    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 80001e8:	200022c0 	.word	0x200022c0
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80001ec:	08002425 	.word	0x08002425
    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 80001f0:	20001da8 	.word	0x20001da8
    LDR     R1, =OSPrioHighRdy
 80001f4:	20001ad6 	.word	0x20001ad6
    LDR     R1, =OSTCBHighRdy
 80001f8:	200020a4 	.word	0x200020a4

080001fc <DHT11GPIOModeSwitch>:
/**
 * @brief 主机GPIO模式切换
 * 
 */
void DHT11GPIOModeSwitch(uint8_t mode)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8000214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000218:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800021e:	2303      	movs	r3, #3
 8000220:	617b      	str	r3, [r7, #20]

    if(mode == MODE_INPUT)
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d102      	bne.n	800022e <DHT11GPIOModeSwitch+0x32>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e004      	b.n	8000238 <DHT11GPIOModeSwitch+0x3c>
    else if(mode == MODE_OUTPUT)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d101      	bne.n	8000238 <DHT11GPIOModeSwitch+0x3c>
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
    
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4619      	mov	r1, r3
 800023e:	4803      	ldr	r0, [pc, #12]	; (800024c <DHT11GPIOModeSwitch+0x50>)
 8000240:	f000 fe06 	bl	8000e50 <HAL_GPIO_Init>
}
 8000244:	bf00      	nop
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010800 	.word	0x40010800

08000250 <DHT11Start>:
 * 主机发送低电平信号开始传输,维持20ms,
 * 随后主机拉高30us,切换至输入模式,DHT响应信号拉低后拉高,最后拉低代表数据传输开始
 * 
 */
void DHT11Start(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    /* GPIO Output Pull-up Mode, 拉低作为开始信号 */
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	4818      	ldr	r0, [pc, #96]	; (80002bc <DHT11Start+0x6c>)
 800025c:	f000 ff69 	bl	8001132 <HAL_GPIO_WritePin>
    /* 延迟20ms保证DHT11能检测到起始信号 */
    HAL_Delay(2000);
 8000260:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000264:	f000 fcf2 	bl	8000c4c <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	4813      	ldr	r0, [pc, #76]	; (80002bc <DHT11Start+0x6c>)
 8000270:	f000 ff5f 	bl	8001132 <HAL_GPIO_WritePin>
    DHT11GPIOModeSwitch(MODE_INPUT);
 8000274:	2001      	movs	r0, #1
 8000276:	f7ff ffc1 	bl	80001fc <DHT11GPIOModeSwitch>
    HAL_Delay(3);
 800027a:	2003      	movs	r0, #3
 800027c:	f000 fce6 	bl	8000c4c <HAL_Delay>
    while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) != RESET);
 8000280:	bf00      	nop
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <DHT11Start+0x6c>)
 8000288:	f000 ff3c 	bl	8001104 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f7      	bne.n	8000282 <DHT11Start+0x32>
    while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) != SET);
 8000292:	bf00      	nop
 8000294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000298:	4808      	ldr	r0, [pc, #32]	; (80002bc <DHT11Start+0x6c>)
 800029a:	f000 ff33 	bl	8001104 <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d1f7      	bne.n	8000294 <DHT11Start+0x44>
    while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) != RESET);
 80002a4:	bf00      	nop
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <DHT11Start+0x6c>)
 80002ac:	f000 ff2a 	bl	8001104 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f7      	bne.n	80002a6 <DHT11Start+0x56>
    /* 此时数据传输开始 */
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010800 	.word	0x40010800

080002c0 <DHT11ReceiveAndCheck>:
 * @brief 接收数据并作校验
 * @attention 高位先出
 * 
 */
void DHT11ReceiveAndCheck(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
    uint8_t cnt, tmp[5] = {0, 0, 0, 0, 0};
 80002c6:	463b      	mov	r3, r7
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	711a      	strb	r2, [r3, #4]
    uint8_t status;
    for (cnt = 1; cnt <= 40; cnt++)
 80002ce:	2301      	movs	r3, #1
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	e077      	b.n	80003c4 <DHT11ReceiveAndCheck+0x104>
    {
        /* 时间上与上升沿对齐 */
        while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) != SET);
 80002d4:	bf00      	nop
 80002d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002da:	484a      	ldr	r0, [pc, #296]	; (8000404 <DHT11ReceiveAndCheck+0x144>)
 80002dc:	f000 ff12 	bl	8001104 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d1f7      	bne.n	80002d6 <DHT11ReceiveAndCheck+0x16>
        HAL_Delay(3);
 80002e6:	2003      	movs	r0, #3
 80002e8:	f000 fcb0 	bl	8000c4c <HAL_Delay>
        /* 延迟30us以后还是高电平说明接收到'1', 低电平说明接收到'0' */
        status = HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin);
 80002ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f0:	4844      	ldr	r0, [pc, #272]	; (8000404 <DHT11ReceiveAndCheck+0x144>)
 80002f2:	f000 ff07 	bl	8001104 <HAL_GPIO_ReadPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	71bb      	strb	r3, [r7, #6]
        if (cnt <= 8)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b08      	cmp	r3, #8
 80002fe:	d80d      	bhi.n	800031c <DHT11ReceiveAndCheck+0x5c>
            tmp[0] |= (((uint8_t)status) << (8 - cnt));     //湿度整数字节
 8000300:	783b      	ldrb	r3, [r7, #0]
 8000302:	b25a      	sxtb	r2, r3
 8000304:	79b9      	ldrb	r1, [r7, #6]
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f1c3 0308 	rsb	r3, r3, #8
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	b25b      	sxtb	r3, r3
 8000312:	4313      	orrs	r3, r2
 8000314:	b25b      	sxtb	r3, r3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	703b      	strb	r3, [r7, #0]
 800031a:	e03f      	b.n	800039c <DHT11ReceiveAndCheck+0xdc>
        else if (cnt <= 16)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b10      	cmp	r3, #16
 8000320:	d80d      	bhi.n	800033e <DHT11ReceiveAndCheck+0x7e>
            tmp[1] |= (((uint8_t)status) << (16 - cnt));    //湿度小数字节
 8000322:	787b      	ldrb	r3, [r7, #1]
 8000324:	b25a      	sxtb	r2, r3
 8000326:	79b9      	ldrb	r1, [r7, #6]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f1c3 0310 	rsb	r3, r3, #16
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	b25b      	sxtb	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b25b      	sxtb	r3, r3
 8000338:	b2db      	uxtb	r3, r3
 800033a:	707b      	strb	r3, [r7, #1]
 800033c:	e02e      	b.n	800039c <DHT11ReceiveAndCheck+0xdc>
        else if (cnt <= 24)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b18      	cmp	r3, #24
 8000342:	d80d      	bhi.n	8000360 <DHT11ReceiveAndCheck+0xa0>
            tmp[2] |= (((uint8_t)status) << (24 - cnt));    //温度整数字节
 8000344:	78bb      	ldrb	r3, [r7, #2]
 8000346:	b25a      	sxtb	r2, r3
 8000348:	79b9      	ldrb	r1, [r7, #6]
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f1c3 0318 	rsb	r3, r3, #24
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	b25b      	sxtb	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	b25b      	sxtb	r3, r3
 800035a:	b2db      	uxtb	r3, r3
 800035c:	70bb      	strb	r3, [r7, #2]
 800035e:	e01d      	b.n	800039c <DHT11ReceiveAndCheck+0xdc>
        else if (cnt <= 32)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b20      	cmp	r3, #32
 8000364:	d80d      	bhi.n	8000382 <DHT11ReceiveAndCheck+0xc2>
            tmp[3] |= (((uint8_t)status) << (32 - cnt));    //温度小数字节
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	b25a      	sxtb	r2, r3
 800036a:	79b9      	ldrb	r1, [r7, #6]
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	f1c3 0320 	rsb	r3, r3, #32
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	b25b      	sxtb	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	b25b      	sxtb	r3, r3
 800037c:	b2db      	uxtb	r3, r3
 800037e:	70fb      	strb	r3, [r7, #3]
 8000380:	e00c      	b.n	800039c <DHT11ReceiveAndCheck+0xdc>
        else
            tmp[4] |= (((uint8_t)status) << (40 - cnt));    //校验和
 8000382:	793b      	ldrb	r3, [r7, #4]
 8000384:	b25a      	sxtb	r2, r3
 8000386:	79b9      	ldrb	r1, [r7, #6]
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800038e:	fa01 f303 	lsl.w	r3, r1, r3
 8000392:	b25b      	sxtb	r3, r3
 8000394:	4313      	orrs	r3, r2
 8000396:	b25b      	sxtb	r3, r3
 8000398:	b2db      	uxtb	r3, r3
 800039a:	713b      	strb	r3, [r7, #4]

        if (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == SET)
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <DHT11ReceiveAndCheck+0x144>)
 80003a2:	f000 feaf 	bl	8001104 <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d108      	bne.n	80003be <DHT11ReceiveAndCheck+0xfe>
        {   
            /* 针对读到'1'的情况 */
            while(HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) != RESET);    
 80003ac:	bf00      	nop
 80003ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b2:	4814      	ldr	r0, [pc, #80]	; (8000404 <DHT11ReceiveAndCheck+0x144>)
 80003b4:	f000 fea6 	bl	8001104 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1f7      	bne.n	80003ae <DHT11ReceiveAndCheck+0xee>
    for (cnt = 1; cnt <= 40; cnt++)
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3301      	adds	r3, #1
 80003c2:	71fb      	strb	r3, [r7, #7]
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2b28      	cmp	r3, #40	; 0x28
 80003c8:	d984      	bls.n	80002d4 <DHT11ReceiveAndCheck+0x14>
        }
    }

    if (tmp[4] == tmp[0] + tmp[1] + tmp[2] + tmp[3])
 80003ca:	793b      	ldrb	r3, [r7, #4]
 80003cc:	461a      	mov	r2, r3
 80003ce:	783b      	ldrb	r3, [r7, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	787b      	ldrb	r3, [r7, #1]
 80003d4:	440b      	add	r3, r1
 80003d6:	78b9      	ldrb	r1, [r7, #2]
 80003d8:	440b      	add	r3, r1
 80003da:	78f9      	ldrb	r1, [r7, #3]
 80003dc:	440b      	add	r3, r1
 80003de:	429a      	cmp	r2, r3
 80003e0:	d10b      	bne.n	80003fa <DHT11ReceiveAndCheck+0x13a>
    {
        humidity = tmp[0];
 80003e2:	783a      	ldrb	r2, [r7, #0]
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <DHT11ReceiveAndCheck+0x148>)
 80003e6:	701a      	strb	r2, [r3, #0]
        frac_hum = tmp[1];
 80003e8:	787a      	ldrb	r2, [r7, #1]
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <DHT11ReceiveAndCheck+0x14c>)
 80003ec:	701a      	strb	r2, [r3, #0]
        temperature = tmp[2];
 80003ee:	78ba      	ldrb	r2, [r7, #2]
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <DHT11ReceiveAndCheck+0x150>)
 80003f2:	701a      	strb	r2, [r3, #0]
        frac_temp = tmp[3];
 80003f4:	78fa      	ldrb	r2, [r7, #3]
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <DHT11ReceiveAndCheck+0x154>)
 80003f8:	701a      	strb	r2, [r3, #0]
    }
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010800 	.word	0x40010800
 8000408:	20000850 	.word	0x20000850
 800040c:	20001065 	.word	0x20001065
 8000410:	2000007c 	.word	0x2000007c
 8000414:	20001064 	.word	0x20001064

08000418 <DigitChoice>:
 * @param dig 
 * @arg DIG1, DIG2, DIG3, DIG4代表从左至右位
 * 
 */
void DigitChoice(uint8_t endig)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
    uint8_t digarr[4] = {RESET, RESET, RESET, RESET};
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
    digarr[endig - 1] = SET;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	3b01      	subs	r3, #1
 800042a:	f107 0210 	add.w	r2, r7, #16
 800042e:	4413      	add	r3, r2
 8000430:	2201      	movs	r2, #1
 8000432:	f803 2c04 	strb.w	r2, [r3, #-4]

    HAL_GPIO_WritePin(DIG1_GPIO_Port, DIG1_Pin, digarr[0]);
 8000436:	7b3b      	ldrb	r3, [r7, #12]
 8000438:	461a      	mov	r2, r3
 800043a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <DigitChoice+0x5c>)
 8000440:	f000 fe77 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIG2_GPIO_Port, DIG2_Pin, digarr[1]);
 8000444:	7b7b      	ldrb	r3, [r7, #13]
 8000446:	461a      	mov	r2, r3
 8000448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044c:	480a      	ldr	r0, [pc, #40]	; (8000478 <DigitChoice+0x60>)
 800044e:	f000 fe70 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, digarr[2]);
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	461a      	mov	r2, r3
 8000456:	2101      	movs	r1, #1
 8000458:	4807      	ldr	r0, [pc, #28]	; (8000478 <DigitChoice+0x60>)
 800045a:	f000 fe6a 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, digarr[3]);
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	461a      	mov	r2, r3
 8000462:	2104      	movs	r1, #4
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <DigitChoice+0x60>)
 8000466:	f000 fe64 	bl	8001132 <HAL_GPIO_WritePin>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40011000 	.word	0x40011000
 8000478:	40010800 	.word	0x40010800

0800047c <DisplayOneDigit>:
 * @param num 
 * @arg 0, 1, ... , 9
 * 
 */
void DisplayOneDigit(uint8_t dig, uint8_t num)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	4613      	mov	r3, r2
 800048a:	71bb      	strb	r3, [r7, #6]
    DigitChoice(dig);
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ffc2 	bl	8000418 <DigitChoice>

    HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, DigTbl[num][0]);
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	4a2a      	ldr	r2, [pc, #168]	; (8000540 <DisplayOneDigit+0xc4>)
 8000498:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800049c:	461a      	mov	r2, r3
 800049e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a2:	4828      	ldr	r0, [pc, #160]	; (8000544 <DisplayOneDigit+0xc8>)
 80004a4:	f000 fe45 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, DigTbl[num][1]);
 80004a8:	79bb      	ldrb	r3, [r7, #6]
 80004aa:	4a25      	ldr	r2, [pc, #148]	; (8000540 <DisplayOneDigit+0xc4>)
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	4413      	add	r3, r2
 80004b0:	785b      	ldrb	r3, [r3, #1]
 80004b2:	461a      	mov	r2, r3
 80004b4:	2102      	movs	r1, #2
 80004b6:	4824      	ldr	r0, [pc, #144]	; (8000548 <DisplayOneDigit+0xcc>)
 80004b8:	f000 fe3b 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, DigTbl[num][2]);
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <DisplayOneDigit+0xc4>)
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	4413      	add	r3, r2
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	461a      	mov	r2, r3
 80004c8:	2110      	movs	r1, #16
 80004ca:	481f      	ldr	r0, [pc, #124]	; (8000548 <DisplayOneDigit+0xcc>)
 80004cc:	f000 fe31 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, DigTbl[num][3]);
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <DisplayOneDigit+0xc4>)
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	4413      	add	r3, r2
 80004d8:	78db      	ldrb	r3, [r3, #3]
 80004da:	461a      	mov	r2, r3
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	481a      	ldr	r0, [pc, #104]	; (8000548 <DisplayOneDigit+0xcc>)
 80004e0:	f000 fe27 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, DigTbl[num][4]);
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <DisplayOneDigit+0xc4>)
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	4413      	add	r3, r2
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	461a      	mov	r2, r3
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	4815      	ldr	r0, [pc, #84]	; (8000548 <DisplayOneDigit+0xcc>)
 80004f4:	f000 fe1d 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, DigTbl[num][5]);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	4a11      	ldr	r2, [pc, #68]	; (8000540 <DisplayOneDigit+0xc4>)
 80004fc:	00db      	lsls	r3, r3, #3
 80004fe:	4413      	add	r3, r2
 8000500:	795b      	ldrb	r3, [r3, #5]
 8000502:	461a      	mov	r2, r3
 8000504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <DisplayOneDigit+0xcc>)
 800050a:	f000 fe12 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, DigTbl[num][6]);
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <DisplayOneDigit+0xc4>)
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4413      	add	r3, r2
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	461a      	mov	r2, r3
 800051a:	2108      	movs	r1, #8
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <DisplayOneDigit+0xcc>)
 800051e:	f000 fe08 	bl	8001132 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, DigTbl[num][7]);
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <DisplayOneDigit+0xc4>)
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	4413      	add	r3, r2
 800052a:	79db      	ldrb	r3, [r3, #7]
 800052c:	461a      	mov	r2, r3
 800052e:	2120      	movs	r1, #32
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <DisplayOneDigit+0xcc>)
 8000532:	f000 fdfe 	bl	8001132 <HAL_GPIO_WritePin>

 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	40011000 	.word	0x40011000
 8000548:	40010800 	.word	0x40010800

0800054c <Task_Uart>:
/**
 * @brief 每隔一秒向PC串口发送一次温湿度数据
 * 
 */
void Task_Uart(void *pdata)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
    int16_t cpu_sr;

    while(1)
    {
        OS_ENTER_CRITICAL();
 8000554:	f7ff fdfa 	bl	800014c <OS_CPU_SR_Save>
 8000558:	4603      	mov	r3, r0
 800055a:	81fb      	strh	r3, [r7, #14]
        HAL_UART_Transmit(&huart1, (uint8_t *)UartSendBuf, sizeof(UartSendBuf), 1000);
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	2221      	movs	r2, #33	; 0x21
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <Task_Uart+0x34>)
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <Task_Uart+0x38>)
 8000566:	f001 fc8e 	bl	8001e86 <HAL_UART_Transmit>
        OS_EXIT_CRITICAL();
 800056a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fdf0 	bl	8000154 <OS_CPU_SR_Restore>
        OSTimeDly(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f003 fc16 	bl	8003da8 <OSTimeDly>
        OS_ENTER_CRITICAL();
 800057c:	e7ea      	b.n	8000554 <Task_Uart+0x8>
 800057e:	bf00      	nop
 8000580:	080042c4 	.word	0x080042c4
 8000584:	20000854 	.word	0x20000854

08000588 <Task_DHT11Read>:
/**
 * @brief 每隔一秒读取一次DHT11的温湿度数据
 * 
 */
void Task_DHT11Read(void *pdata)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    while(1)
    {
        DHT11Start();
 8000590:	f7ff fe5e 	bl	8000250 <DHT11Start>
        DHT11ReceiveAndCheck();
 8000594:	f7ff fe94 	bl	80002c0 <DHT11ReceiveAndCheck>
        OSTimeDly(2000);
 8000598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800059c:	f003 fc04 	bl	8003da8 <OSTimeDly>
        DHT11Start();
 80005a0:	e7f6      	b.n	8000590 <Task_DHT11Read+0x8>
	...

080005a4 <Task_Display>:
/**
 * @brief 实时在LED数码管上交替显示温度和湿度
 * 
 */
void Task_Display(void *pdata)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    uint8_t tmp, tmparr[4];
    uint8_t i;
    uint16_t cnt = 0, cpu_sr;
 80005ac:	2300      	movs	r3, #0
 80005ae:	82bb      	strh	r3, [r7, #20]
  
    while(1)
    {
        if (cnt == 0)
 80005b0:	8abb      	ldrh	r3, [r7, #20]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d12c      	bne.n	8000610 <Task_Display+0x6c>
        {
            OS_ENTER_CRITICAL();
 80005b6:	f7ff fdc9 	bl	800014c <OS_CPU_SR_Save>
 80005ba:	4603      	mov	r3, r0
 80005bc:	827b      	strh	r3, [r7, #18]
            tmp = temperature;
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <Task_Display+0x110>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	75fb      	strb	r3, [r7, #23]
            OS_EXIT_CRITICAL();
 80005c4:	8a7b      	ldrh	r3, [r7, #18]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fdc4 	bl	8000154 <OS_CPU_SR_Restore>
            for(i = 4; i >= 1; i--)
 80005cc:	2304      	movs	r3, #4
 80005ce:	75bb      	strb	r3, [r7, #22]
 80005d0:	e01a      	b.n	8000608 <Task_Display+0x64>
            {
                tmparr[i-1] = tmp % 10;
 80005d2:	7dbb      	ldrb	r3, [r7, #22]
 80005d4:	1e58      	subs	r0, r3, #1
 80005d6:	7dfa      	ldrb	r2, [r7, #23]
 80005d8:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <Task_Display+0x114>)
 80005da:	fba3 1302 	umull	r1, r3, r3, r2
 80005de:	08d9      	lsrs	r1, r3, #3
 80005e0:	460b      	mov	r3, r1
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	4403      	add	r3, r0
 80005f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
                tmp /= 10;
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <Task_Display+0x114>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	08db      	lsrs	r3, r3, #3
 8000600:	75fb      	strb	r3, [r7, #23]
            for(i = 4; i >= 1; i--)
 8000602:	7dbb      	ldrb	r3, [r7, #22]
 8000604:	3b01      	subs	r3, #1
 8000606:	75bb      	strb	r3, [r7, #22]
 8000608:	7dbb      	ldrb	r3, [r7, #22]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1e1      	bne.n	80005d2 <Task_Display+0x2e>
 800060e:	e034      	b.n	800067a <Task_Display+0xd6>
            }
        }     
        else if (cnt == 100)
 8000610:	8abb      	ldrh	r3, [r7, #20]
 8000612:	2b64      	cmp	r3, #100	; 0x64
 8000614:	d12c      	bne.n	8000670 <Task_Display+0xcc>
        {
            OS_ENTER_CRITICAL();
 8000616:	f7ff fd99 	bl	800014c <OS_CPU_SR_Save>
 800061a:	4603      	mov	r3, r0
 800061c:	827b      	strh	r3, [r7, #18]
            tmp = humidity;
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <Task_Display+0x118>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	75fb      	strb	r3, [r7, #23]
            OS_EXIT_CRITICAL();
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fd94 	bl	8000154 <OS_CPU_SR_Restore>
            for(i = 4; i >= 1; i--)
 800062c:	2304      	movs	r3, #4
 800062e:	75bb      	strb	r3, [r7, #22]
 8000630:	e01a      	b.n	8000668 <Task_Display+0xc4>
            {
                tmparr[i-1] = tmp % 10;
 8000632:	7dbb      	ldrb	r3, [r7, #22]
 8000634:	1e58      	subs	r0, r3, #1
 8000636:	7dfa      	ldrb	r2, [r7, #23]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <Task_Display+0x114>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	08d9      	lsrs	r1, r3, #3
 8000640:	460b      	mov	r3, r1
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4403      	add	r3, r0
 8000652:	f803 2c0c 	strb.w	r2, [r3, #-12]
                tmp /= 10;
 8000656:	7dfb      	ldrb	r3, [r7, #23]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <Task_Display+0x114>)
 800065a:	fba2 2303 	umull	r2, r3, r2, r3
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	75fb      	strb	r3, [r7, #23]
            for(i = 4; i >= 1; i--)
 8000662:	7dbb      	ldrb	r3, [r7, #22]
 8000664:	3b01      	subs	r3, #1
 8000666:	75bb      	strb	r3, [r7, #22]
 8000668:	7dbb      	ldrb	r3, [r7, #22]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1e1      	bne.n	8000632 <Task_Display+0x8e>
 800066e:	e004      	b.n	800067a <Task_Display+0xd6>
            }
        }
        else if (cnt == 200) 
 8000670:	8abb      	ldrh	r3, [r7, #20]
 8000672:	2bc8      	cmp	r3, #200	; 0xc8
 8000674:	d101      	bne.n	800067a <Task_Display+0xd6>
            cnt = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	82bb      	strh	r3, [r7, #20]

        for(i = 1; i <= 4; i++)
 800067a:	2301      	movs	r3, #1
 800067c:	75bb      	strb	r3, [r7, #22]
 800067e:	e011      	b.n	80006a4 <Task_Display+0x100>
        {
            DisplayOneDigit(i, tmparr[i-1]);
 8000680:	7dbb      	ldrb	r3, [r7, #22]
 8000682:	3b01      	subs	r3, #1
 8000684:	f107 0218 	add.w	r2, r7, #24
 8000688:	4413      	add	r3, r2
 800068a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fef2 	bl	800047c <DisplayOneDigit>
            OSTimeDly(60);
 8000698:	203c      	movs	r0, #60	; 0x3c
 800069a:	f003 fb85 	bl	8003da8 <OSTimeDly>
        for(i = 1; i <= 4; i++)
 800069e:	7dbb      	ldrb	r3, [r7, #22]
 80006a0:	3301      	adds	r3, #1
 80006a2:	75bb      	strb	r3, [r7, #22]
 80006a4:	7dbb      	ldrb	r3, [r7, #22]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d9ea      	bls.n	8000680 <Task_Display+0xdc>
        }
        cnt ++;
 80006aa:	8abb      	ldrh	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	82bb      	strh	r3, [r7, #20]
        if (cnt == 0)
 80006b0:	e77e      	b.n	80005b0 <Task_Display+0xc>
 80006b2:	bf00      	nop
 80006b4:	2000007c 	.word	0x2000007c
 80006b8:	cccccccd 	.word	0xcccccccd
 80006bc:	20000850 	.word	0x20000850

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    uint8_t cnt;
    /* USER CODE END 1 */
    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80006c6:	f000 fa8f 	bl	8000be8 <HAL_Init>
    /* USER CODE BEGIN Init */
    /* USER CODE END Init */
    /* Configure the system clock */
    SystemClock_Config();
 80006ca:	f000 f83b 	bl	8000744 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80006ce:	f000 f8a9 	bl	8000824 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80006d2:	f000 f87d 	bl	80007d0 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    for (cnt = 1; cnt <= 100; cnt++)
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e006      	b.n	80006ea <main+0x2a>
    {
        HAL_Delay(2000);
 80006dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e0:	f000 fab4 	bl	8000c4c <HAL_Delay>
    for (cnt = 1; cnt <= 100; cnt++)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3301      	adds	r3, #1
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b64      	cmp	r3, #100	; 0x64
 80006ee:	d9f5      	bls.n	80006dc <main+0x1c>
    }
    OSInit();
 80006f0:	f002 f816 	bl	8002720 <OSInit>
  /* SysTick Frequency: 72MHz, time per beat: 0.5ms */
    OS_CPU_SysTickInit(36000 - 1);    
 80006f4:	f648 409f 	movw	r0, #35999	; 0x8c9f
 80006f8:	f001 fed8 	bl	80024ac <OS_CPU_SysTickInit>
    OSTaskCreate(Task_Uart, (void *)0, (OS_STK *)&TASK_UART_STK[TASK_UART_STK_SIZE - 1], TASK_UART_PRIO);
 80006fc:	2307      	movs	r3, #7
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <main+0x6c>)
 8000700:	2100      	movs	r1, #0
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <main+0x70>)
 8000704:	f003 f852 	bl	80037ac <OSTaskCreate>
    OSTaskCreate(Task_DHT11Read, (void *)0, (OS_STK *)&TASK_DHT11READ_STK[TASK_DHT11READ_STK_SIZE - 1], TASK_DHT11READ_PRIO);
 8000708:	2305      	movs	r3, #5
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <main+0x74>)
 800070c:	2100      	movs	r1, #0
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <main+0x78>)
 8000710:	f003 f84c 	bl	80037ac <OSTaskCreate>
    OSTaskCreate(Task_Display, (void *)0, (OS_STK *)TASK_DISPLAY_STK[TASK_DISPLAY_STK_SIZE - 1], TASK_DISPLAY_PRIO);
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <main+0x7c>)
 8000716:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 800071a:	461a      	mov	r2, r3
 800071c:	2306      	movs	r3, #6
 800071e:	2100      	movs	r1, #0
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <main+0x80>)
 8000722:	f003 f843 	bl	80037ac <OSTaskCreate>
    OSStart();
 8000726:	f002 f8cd 	bl	80028c4 <OSStart>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 800072a:	e7fe      	b.n	800072a <main+0x6a>
 800072c:	20001834 	.word	0x20001834
 8000730:	0800054d 	.word	0x0800054d
 8000734:	2000084c 	.word	0x2000084c
 8000738:	08000589 	.word	0x08000589
 800073c:	20000894 	.word	0x20000894
 8000740:	080005a5 	.word	0x080005a5

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b090      	sub	sp, #64	; 0x40
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2228      	movs	r2, #40	; 0x28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fd60 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000782:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fce9 	bl	8001164 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000798:	f000 f8c8 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ff54 	bl	8001664 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007c2:	f000 f8b3 	bl	800092c <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3740      	adds	r7, #64	; 0x40
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART1_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART1_UART_Init+0x4c>)
 8000808:	f001 faf0 	bl	8001dec <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f88b 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000854 	.word	0x20000854
 8000820:	40013800 	.word	0x40013800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <MX_GPIO_Init+0xd8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_GPIO_Init+0xd8>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_GPIO_Init+0xd8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_GPIO_Init+0xd8>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a29      	ldr	r2, [pc, #164]	; (80008fc <MX_GPIO_Init+0xd8>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_GPIO_Init+0xd8>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0320 	and.w	r3, r3, #32
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_GPIO_Init+0xd8>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a23      	ldr	r2, [pc, #140]	; (80008fc <MX_GPIO_Init+0xd8>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_GPIO_Init+0xd8>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG1_Pin|SEG_A_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000886:	481e      	ldr	r0, [pc, #120]	; (8000900 <MX_GPIO_Init+0xdc>)
 8000888:	f000 fc53 	bl	8001132 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIG3_Pin|SEG_B_Pin|DIG4_Pin|SEG_G_Pin 
 800088c:	2201      	movs	r2, #1
 800088e:	f641 11ff 	movw	r1, #6655	; 0x19ff
 8000892:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_GPIO_Init+0xe0>)
 8000894:	f000 fc4d 	bl	8001132 <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_DP_Pin|SEG_D_Pin|SEG_E_Pin 
                          |DHT11_DATA_Pin|DIG2_Pin|SEG_F_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DIG1_Pin SEG_A_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|SEG_A_Pin;
 8000898:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_GPIO_Init+0xdc>)
 80008b2:	f000 facd 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG3_Pin SEG_B_Pin DIG4_Pin SEG_G_Pin 
                           SEG_C_Pin SEG_DP_Pin SEG_D_Pin SEG_E_Pin 
                           DIG2_Pin SEG_F_Pin */
  GPIO_InitStruct.Pin = DIG3_Pin|SEG_B_Pin|DIG4_Pin|SEG_G_Pin 
 80008b6:	f641 03ff 	movw	r3, #6399	; 0x18ff
 80008ba:	613b      	str	r3, [r7, #16]
                          |SEG_C_Pin|SEG_DP_Pin|SEG_D_Pin|SEG_E_Pin 
                          |DIG2_Pin|SEG_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_GPIO_Init+0xe0>)
 80008d0:	f000 fabe 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 80008d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0xe0>)
 80008ee:	f000 faaf 	bl	8000e50 <HAL_GPIO_Init>

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40011000 	.word	0x40011000
 8000904:	40010800 	.word	0x40010800

08000908 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d101      	bne.n	800091e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091a:	f000 f97b 	bl	8000c14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40000800 	.word	0x40000800

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x5c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x60>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_MspInit+0x60>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_UART_MspInit+0x8c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d131      	bne.n	8000a20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <HAL_UART_MspInit+0x94>)
 8000a02:	f000 fa25 	bl	8000e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x94>)
 8000a1c:	f000 fa18 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	201e      	movs	r0, #30
 8000a4a:	f000 f9d6 	bl	8000dfa <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8000a4e:	201e      	movs	r0, #30
 8000a50:	f000 f9ef 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_InitTick+0xa0>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6c:	f107 0210 	add.w	r2, r7, #16
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 ff72 	bl	8001960 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a7c:	f000 ff48 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8000a80:	4603      	mov	r3, r0
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <HAL_InitTick+0xa4>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	0c9b      	lsrs	r3, r3, #18
 8000a90:	3b01      	subs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_InitTick+0xa8>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <HAL_InitTick+0xac>)
 8000a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (10000 / 1000) - 1;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_InitTick+0xa8>)
 8000a9c:	2209      	movs	r2, #9
 8000a9e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_InitTick+0xa8>)
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_InitTick+0xa8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_InitTick+0xa8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000ab2:	480a      	ldr	r0, [pc, #40]	; (8000adc <HAL_InitTick+0xa8>)
 8000ab4:	f000 ffa2 	bl	80019fc <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d104      	bne.n	8000ac8 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <HAL_InitTick+0xa8>)
 8000ac0:	f000 ffd0 	bl	8001a64 <HAL_TIM_Base_Start_IT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	e000      	b.n	8000aca <HAL_InitTick+0x96>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20001838 	.word	0x20001838
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <HardFault_Handler+0x4>

08000af6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <BusFault_Handler+0x4>

08000b02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM4_IRQHandler+0x10>)
 8000b26:	f000 ffc0 	bl	8001aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20001838 	.word	0x20001838

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x5c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x5c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <SystemInit+0x5c>)
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	4911      	ldr	r1, [pc, #68]	; (8000b90 <SystemInit+0x5c>)
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <SystemInit+0x60>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <SystemInit+0x5c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <SystemInit+0x5c>)
 8000b56:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <SystemInit+0x5c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <SystemInit+0x5c>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SystemInit+0x5c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <SystemInit+0x5c>)
 8000b72:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b76:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SystemInit+0x5c>)
 8000b7a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b7e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SystemInit+0x64>)
 8000b82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b86:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40021000 	.word	0x40021000
 8000b94:	f8ff0000 	.word	0xf8ff0000
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b9e:	e003      	b.n	8000ba8 <LoopCopyDataInit>

08000ba0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ba2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ba6:	3104      	adds	r1, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba8:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bb0:	d3f6      	bcc.n	8000ba0 <CopyDataInit>
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bb4:	e002      	b.n	8000bbc <LoopFillZerobss>

08000bb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb8:	f842 3b04 	str.w	r3, [r2], #4

08000bbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bc0:	d3f9      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bc2:	f7ff ffb7 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 fb03 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bca:	f7ff fd79 	bl	80006c0 <main>
  bx lr
 8000bce:	4770      	bx	lr
  ldr r3, =_sidata
 8000bd0:	0800447c 	.word	0x0800447c
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd8:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000bdc:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000be0:	20003dd4 	.word	0x20003dd4

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f8f3 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ff18 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fe98 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000058 	.word	0x20000058
 8000c34:	20001878 	.word	0x20001878

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20001878 	.word	0x20001878

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_Delay+0x40>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000058 	.word	0x20000058

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4906      	ldr	r1, [pc, #24]	; (8000d28 <__NVIC_EnableIRQ+0x34>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff4f 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff64 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ffb2 	bl	8000d80 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff81 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff57 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b08b      	sub	sp, #44	; 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e62:	e127      	b.n	80010b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e64:	2201      	movs	r2, #1
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8116 	bne.w	80010ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d034      	beq.n	8000ef4 <HAL_GPIO_Init+0xa4>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d80d      	bhi.n	8000eaa <HAL_GPIO_Init+0x5a>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d02b      	beq.n	8000eea <HAL_GPIO_Init+0x9a>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d804      	bhi.n	8000ea0 <HAL_GPIO_Init+0x50>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d031      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d01c      	beq.n	8000ed8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9e:	e048      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d043      	beq.n	8000f2c <HAL_GPIO_Init+0xdc>
 8000ea4:	2b11      	cmp	r3, #17
 8000ea6:	d01b      	beq.n	8000ee0 <HAL_GPIO_Init+0x90>
          break;
 8000ea8:	e043      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eaa:	4a89      	ldr	r2, [pc, #548]	; (80010d0 <HAL_GPIO_Init+0x280>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d026      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000eb0:	4a87      	ldr	r2, [pc, #540]	; (80010d0 <HAL_GPIO_Init+0x280>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d806      	bhi.n	8000ec4 <HAL_GPIO_Init+0x74>
 8000eb6:	4a87      	ldr	r2, [pc, #540]	; (80010d4 <HAL_GPIO_Init+0x284>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d020      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000ebc:	4a86      	ldr	r2, [pc, #536]	; (80010d8 <HAL_GPIO_Init+0x288>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d01d      	beq.n	8000efe <HAL_GPIO_Init+0xae>
          break;
 8000ec2:	e036      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec4:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_GPIO_Init+0x28c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d019      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000eca:	4a85      	ldr	r2, [pc, #532]	; (80010e0 <HAL_GPIO_Init+0x290>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d016      	beq.n	8000efe <HAL_GPIO_Init+0xae>
 8000ed0:	4a84      	ldr	r2, [pc, #528]	; (80010e4 <HAL_GPIO_Init+0x294>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0xae>
          break;
 8000ed6:	e02c      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e028      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e023      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e01e      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	330c      	adds	r3, #12
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e019      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f06:	2304      	movs	r3, #4
 8000f08:	623b      	str	r3, [r7, #32]
          break;
 8000f0a:	e012      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d105      	bne.n	8000f20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	611a      	str	r2, [r3, #16]
          break;
 8000f1e:	e008      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f20:	2308      	movs	r3, #8
 8000f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	615a      	str	r2, [r3, #20]
          break;
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2bff      	cmp	r3, #255	; 0xff
 8000f36:	d801      	bhi.n	8000f3c <HAL_GPIO_Init+0xec>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	e001      	b.n	8000f40 <HAL_GPIO_Init+0xf0>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3304      	adds	r3, #4
 8000f40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2bff      	cmp	r3, #255	; 0xff
 8000f46:	d802      	bhi.n	8000f4e <HAL_GPIO_Init+0xfe>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x104>
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3b08      	subs	r3, #8
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	6a39      	ldr	r1, [r7, #32]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 8096 	beq.w	80010ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f82:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <HAL_GPIO_Init+0x298>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f9a:	4a54      	ldr	r2, [pc, #336]	; (80010ec <HAL_GPIO_Init+0x29c>)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4b      	ldr	r2, [pc, #300]	; (80010f0 <HAL_GPIO_Init+0x2a0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0x19e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4a      	ldr	r2, [pc, #296]	; (80010f4 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d00d      	beq.n	8000fea <HAL_GPIO_Init+0x19a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a49      	ldr	r2, [pc, #292]	; (80010f8 <HAL_GPIO_Init+0x2a8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_GPIO_Init+0x196>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a48      	ldr	r2, [pc, #288]	; (80010fc <HAL_GPIO_Init+0x2ac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <HAL_GPIO_Init+0x192>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x1a0>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001000:	493a      	ldr	r1, [pc, #232]	; (80010ec <HAL_GPIO_Init+0x29c>)
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001028:	4b35      	ldr	r3, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	43db      	mvns	r3, r3
 8001030:	4933      	ldr	r1, [pc, #204]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001032:	4013      	ands	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	492e      	ldr	r1, [pc, #184]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	604b      	str	r3, [r1, #4]
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4929      	ldr	r1, [pc, #164]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800105a:	4013      	ands	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	4924      	ldr	r1, [pc, #144]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
 8001076:	e006      	b.n	8001086 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	43db      	mvns	r3, r3
 8001080:	491f      	ldr	r1, [pc, #124]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001082:	4013      	ands	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	491a      	ldr	r1, [pc, #104]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4915      	ldr	r1, [pc, #84]	; (8001100 <HAL_GPIO_Init+0x2b0>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3301      	adds	r3, #1
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	fa22 f303 	lsr.w	r3, r2, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f47f aed0 	bne.w	8000e64 <HAL_GPIO_Init+0x14>
  }
}
 80010c4:	bf00      	nop
 80010c6:	372c      	adds	r7, #44	; 0x2c
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	10210000 	.word	0x10210000
 80010d4:	10110000 	.word	0x10110000
 80010d8:	10120000 	.word	0x10120000
 80010dc:	10310000 	.word	0x10310000
 80010e0:	10320000 	.word	0x10320000
 80010e4:	10220000 	.word	0x10220000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40011400 	.word	0x40011400
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	4013      	ands	r3, r2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	807b      	strh	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001142:	787b      	ldrb	r3, [r7, #1]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800114e:	e003      	b.n	8001158 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e26c      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8087 	beq.w	8001292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001184:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b04      	cmp	r3, #4
 800118e:	d00c      	beq.n	80011aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001190:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d112      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
 800119c:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d10b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d06c      	beq.n	8001290 <HAL_RCC_OscConfig+0x12c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d168      	bne.n	8001290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e246      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x76>
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a7f      	ldr	r2, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e02e      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7a      	ldr	r2, [pc, #488]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0xbc>
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a67      	ldr	r2, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fcfa 	bl	8000c38 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fcf6 	bl	8000c38 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1fa      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xe4>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fce6 	bl	8000c38 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fce2 	bl	8000c38 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1e6      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x10c>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1ba      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4939      	ldr	r1, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fc9b 	bl	8000c38 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fc97 	bl	8000c38 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e19b      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4927      	ldr	r1, [pc, #156]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc7a 	bl	8000c38 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc76 	bl	8000c38 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e17a      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d03a      	beq.n	80013e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fc5a 	bl	8000c38 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fc56 	bl	8000c38 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e15a      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fb0a 	bl	80019c0 <RCC_Delay>
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fc40 	bl	8000c38 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ba:	e00f      	b.n	80013dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc3c 	bl	8000c38 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d908      	bls.n	80013dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e140      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	42420000 	.word	0x42420000
 80013d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b9e      	ldr	r3, [pc, #632]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e9      	bne.n	80013bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a6 	beq.w	8001542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b97      	ldr	r3, [pc, #604]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b94      	ldr	r3, [pc, #592]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a93      	ldr	r2, [pc, #588]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b8b      	ldr	r3, [pc, #556]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a8a      	ldr	r2, [pc, #552]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbfd 	bl	8000c38 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbf9 	bl	8000c38 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0fd      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b81      	ldr	r3, [pc, #516]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x312>
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x334>
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a75      	ldr	r2, [pc, #468]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b73      	ldr	r3, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a72      	ldr	r2, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	e01c      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x356>
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a6c      	ldr	r2, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e00b      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a63      	ldr	r2, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d015      	beq.n	8001506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbad 	bl	8000c38 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fba9 	bl	8000c38 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0ab      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ee      	beq.n	80014e2 <HAL_RCC_OscConfig+0x37e>
 8001504:	e014      	b.n	8001530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fb97 	bl	8000c38 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb93 	bl	8000c38 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e095      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ee      	bne.n	800150e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8081 	beq.w	800164e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d061      	beq.n	800161c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d146      	bne.n	80015ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb67 	bl	8000c38 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb63 	bl	8000c38 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e067      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	492d      	ldr	r1, [pc, #180]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a19      	ldr	r1, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	430b      	orrs	r3, r1
 80015ba:	4927      	ldr	r1, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb37 	bl	8000c38 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb33 	bl	8000c38 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e037      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x46a>
 80015ec:	e02f      	b.n	800164e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb20 	bl	8000c38 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fb1c 	bl	8000c38 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e020      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x498>
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e013      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa70 	bl	8000c38 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa6c 	bl	8000c38 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4601      	mov	r1, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	fa21 f303 	lsr.w	r3, r1, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f90e 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	080042e8 	.word	0x080042e8
 8001830:	20000050 	.word	0x20000050
 8001834:	20000054 	.word	0x20000054

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02d      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02d      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800188a:	4413      	add	r3, r2
 800188c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001890:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0c5b      	lsrs	r3, r3, #17
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018aa:	4413      	add	r3, r2
 80018ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b6:	fb02 f203 	mul.w	r2, r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	e004      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	623b      	str	r3, [r7, #32]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d6:	623b      	str	r3, [r7, #32]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	6a3b      	ldr	r3, [r7, #32]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc90      	pop	{r4, r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	08004240 	.word	0x08004240
 80018ec:	08004250 	.word	0x08004250
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	003d0900 	.word	0x003d0900

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_RCC_GetHCLKFreq+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000050 	.word	0x20000050

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff2 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001918:	4601      	mov	r1, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5cd3      	ldrb	r3, [r2, r3]
 8001928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	080042f8 	.word	0x080042f8

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffde 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0adb      	lsrs	r3, r3, #11
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	080042f8 	.word	0x080042f8

08001960 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	220f      	movs	r2, #15
 800196e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_RCC_GetClockConfig+0x58>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_RCC_GetClockConfig+0x58>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_RCC_GetClockConfig+0x58>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_RCC_GetClockConfig+0x58>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_GetClockConfig+0x5c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0207 	and.w	r2, r3, #7
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40022000 	.word	0x40022000

080019c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <RCC_Delay+0x34>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <RCC_Delay+0x38>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019dc:	bf00      	nop
  }
  while (Delay --);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	60fa      	str	r2, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f9      	bne.n	80019dc <RCC_Delay+0x1c>
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000050 	.word	0x20000050
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e01d      	b.n	8001a4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f815 	bl	8001a52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f000 f962 	bl	8001d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d007      	beq.n	8001a9e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d122      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d11b      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0202 	mvn.w	r2, #2
 8001ad6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8ed 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
 8001af2:	e005      	b.n	8001b00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8e0 	bl	8001cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8ef 	bl	8001cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d122      	bne.n	8001b5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d11b      	bne.n	8001b5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f06f 0204 	mvn.w	r2, #4
 8001b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8c3 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
 8001b46:	e005      	b.n	8001b54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8b6 	bl	8001cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8c5 	bl	8001cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d122      	bne.n	8001bae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d11b      	bne.n	8001bae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0208 	mvn.w	r2, #8
 8001b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2204      	movs	r2, #4
 8001b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f899 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f88c 	bl	8001cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f89b 	bl	8001cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0210 	mvn.w	r2, #16
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f86f 	bl	8001ccc <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f862 	bl	8001cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f871 	bl	8001cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10e      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0201 	mvn.w	r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7fe fe6d 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b80      	cmp	r3, #128	; 0x80
 8001c3a:	d10e      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b80      	cmp	r3, #128	; 0x80
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8c0 	bl	8001dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d10e      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f835 	bl	8001cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d10e      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d107      	bne.n	8001cb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0220 	mvn.w	r2, #32
 8001caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f88b 	bl	8001dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00b      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d22:	d007      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <TIM_Base_SetConfig+0xbc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <TIM_Base_SetConfig+0x30>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <TIM_Base_SetConfig+0xc0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d108      	bne.n	8001d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <TIM_Base_SetConfig+0xbc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <TIM_Base_SetConfig+0xc0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <TIM_Base_SetConfig+0xb8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	615a      	str	r2, [r3, #20]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e03f      	b.n	8001e7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fdc2 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f90b 	bl	800204c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b088      	sub	sp, #32
 8001e8a:	af02      	add	r7, sp, #8
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	f040 8083 	bne.w	8001fae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_UART_Transmit+0x2e>
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e07b      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Transmit+0x40>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e074      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2221      	movs	r2, #33	; 0x21
 8001ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001edc:	f7fe feac 	bl	8000c38 <HAL_GetTick>
 8001ee0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eee:	e042      	b.n	8001f76 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f06:	d122      	bne.n	8001f4e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f850 	bl	8001fb8 <UART_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e046      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3302      	adds	r3, #2
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	e017      	b.n	8001f76 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	e013      	b.n	8001f76 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f82d 	bl	8001fb8 <UART_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e023      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1b7      	bne.n	8001ef0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2200      	movs	r2, #0
 8001f88:	2140      	movs	r1, #64	; 0x40
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f814 	bl	8001fb8 <UART_WaitOnFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e00a      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc8:	e02c      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d028      	beq.n	8002024 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fd8:	f7fe fe2e 	bl	8000c38 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d21d      	bcs.n	8002024 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ff6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e00f      	b.n	8002044 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4013      	ands	r3, r2
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	429a      	cmp	r2, r3
 8002040:	d0c3      	beq.n	8001fca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002086:	f023 030c 	bic.w	r3, r3, #12
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	430b      	orrs	r3, r1
 8002092:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <UART_SetConfig+0x1ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d14e      	bne.n	8002152 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020b4:	f7ff fc40 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 80020b8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009a      	lsls	r2, r3, #2
 80020c4:	441a      	add	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <UART_SetConfig+0x1b0>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	0119      	lsls	r1, r3, #4
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <UART_SetConfig+0x1b0>)
 80020f2:	fba3 0302 	umull	r0, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2064      	movs	r0, #100	; 0x64
 80020fa:	fb00 f303 	mul.w	r3, r0, r3
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	3332      	adds	r3, #50	; 0x32
 8002104:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <UART_SetConfig+0x1b0>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002110:	4419      	add	r1, r3
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fbb2 f2f3 	udiv	r2, r2, r3
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <UART_SetConfig+0x1b0>)
 800212a:	fba3 0302 	umull	r0, r3, r3, r2
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2064      	movs	r0, #100	; 0x64
 8002132:	fb00 f303 	mul.w	r3, r0, r3
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	3332      	adds	r3, #50	; 0x32
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <UART_SetConfig+0x1b0>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	f003 020f 	and.w	r2, r3, #15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	440a      	add	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002150:	e04d      	b.n	80021ee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002152:	f7ff fbdd 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002156:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	009a      	lsls	r2, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <UART_SetConfig+0x1b0>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	0119      	lsls	r1, r3, #4
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	009a      	lsls	r2, r3, #2
 8002182:	441a      	add	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fbb2 f2f3 	udiv	r2, r2, r3
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <UART_SetConfig+0x1b0>)
 8002190:	fba3 0302 	umull	r0, r3, r3, r2
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	2064      	movs	r0, #100	; 0x64
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	3332      	adds	r3, #50	; 0x32
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <UART_SetConfig+0x1b0>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ae:	4419      	add	r1, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009a      	lsls	r2, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <UART_SetConfig+0x1b0>)
 80021c8:	fba3 0302 	umull	r0, r3, r3, r2
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	2064      	movs	r0, #100	; 0x64
 80021d0:	fb00 f303 	mul.w	r3, r0, r3
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	3332      	adds	r3, #50	; 0x32
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <UART_SetConfig+0x1b0>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	f003 020f 	and.w	r2, r3, #15
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	440a      	add	r2, r1
 80021ec:	609a      	str	r2, [r3, #8]
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40013800 	.word	0x40013800
 80021fc:	51eb851f 	.word	0x51eb851f

08002200 <App_TaskCreateHook>:
*********************************************************************************************************
*/

#if (OS_APP_HOOKS_EN > 0)
void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#else
    (void)ptcb;
#endif
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <App_TaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <App_TaskReturnHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <App_TaskStatHook>:
* Returns    : none
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
    INT32U   size;
    OS_STK  *pstk;

                                                           /* Clear exception stack for stack checking.*/
    pstk = &OS_CPU_ExceptStk[0];
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <OSInitHookBegin+0x3c>)
 8002280:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 8002286:	e007      	b.n	8002298 <OSInitHookBegin+0x20>
        size--;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	603a      	str	r2, [r7, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f4      	bne.n	8002288 <OSInitHookBegin+0x10>
    }

    OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <OSInitHookBegin+0x40>)
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <OSInitHookBegin+0x44>)
 80022a2:	601a      	str	r2, [r3, #0]

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <OSInitHookBegin+0x48>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]
#endif
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20001880 	.word	0x20001880
 80022b8:	2000187c 	.word	0x2000187c
 80022bc:	20001a7c 	.word	0x20001a7c
 80022c0:	20000078 	.word	0x20000078

080022c4 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff91 	bl	8002200 <App_TaskCreateHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff8f 	bl	8002212 <App_TaskDelHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8002300:	f7ff ff90 	bl	8002224 <App_TaskIdleHook>
#endif
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff8d 	bl	8002230 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8002322:	f7ff ff8e 	bl	8002242 <App_TaskStatHook>
#endif
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <OSTaskStkInit>:
*              2) All tasks run in Thread mode, using process stack.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	807b      	strh	r3, [r7, #2]
    OS_STK *stk;


    (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    stk       = ptos;                            /* Load stack pointer                                 */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	617b      	str	r3, [r7, #20]

                                                 /* Registers stacked as if auto-saved on exception    */
    *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002344:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3b04      	subs	r3, #4
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3b04      	subs	r3, #4
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <OSTaskStkInit+0xf4>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3b04      	subs	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800236a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3b04      	subs	r3, #4
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002378:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3b04      	subs	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002386:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3b04      	subs	r3, #4
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002394:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3b04      	subs	r3, #4
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	601a      	str	r2, [r3, #0]

                                                 /* Remaining registers saved on process stack         */
    *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3b04      	subs	r3, #4
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80023ae:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3b04      	subs	r3, #4
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80023bc:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3b04      	subs	r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80023ca:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3b04      	subs	r3, #4
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80023d8:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3b04      	subs	r3, #4
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80023e6:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3b04      	subs	r3, #4
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80023f4:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3b04      	subs	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002402:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3b04      	subs	r3, #4
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002410:	601a      	str	r2, [r3, #0]

    return (stk);
 8002412:	697b      	ldr	r3, [r7, #20]
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	08003d49 	.word	0x08003d49

08002424 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8002428:	f7ff ff11 	bl	800224e <App_TaskSwHook>
#endif
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff0e 	bl	800225a <App_TCBInitHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 800244c:	f7ff ff0e 	bl	800226c <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <OSTimeTickHook+0x2c>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <OSTimeTickHook+0x2c>)
 800245a:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <OSTimeTickHook+0x2c>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	2b63      	cmp	r3, #99	; 0x63
 8002462:	d904      	bls.n	800246e <OSTimeTickHook+0x26>
        OSTmrCtr = 0;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <OSTimeTickHook+0x2c>)
 8002466:	2200      	movs	r2, #0
 8002468:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 800246a:	f001 fcef 	bl	8003e4c <OSTmrSignal>
    }
#endif
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000078 	.word	0x20000078

08002478 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    OS_CPU_SR  cpu_sr;


    OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
 800247e:	f7fd fe65 	bl	800014c <OS_CPU_SR_Save>
 8002482:	6078      	str	r0, [r7, #4]
    OSIntNesting++;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <OS_CPU_SysTickHandler+0x30>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <OS_CPU_SysTickHandler+0x30>)
 800248e:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fd fe5f 	bl	8000154 <OS_CPU_SR_Restore>

    OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
 8002496:	f000 fa3d 	bl	8002914 <OSTimeTick>

    OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
 800249a:	f000 f95f 	bl	800275c <OSIntExit>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200022bc 	.word	0x200022bc

080024ac <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
    OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
 80024b4:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <OS_CPU_SysTickInit+0x38>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	6013      	str	r3, [r2, #0]
                                                 /* Set prio of SysTick handler to min prio.           */
    OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <OS_CPU_SysTickInit+0x3c>)
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	701a      	strb	r2, [r3, #0]
                                                 /* Enable timer.                                      */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <OS_CPU_SysTickInit+0x40>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <OS_CPU_SysTickInit+0x40>)
 80024c8:	f043 0305 	orr.w	r3, r3, #5
 80024cc:	6013      	str	r3, [r2, #0]
                                                 /* Enable timer interrupt.                            */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <OS_CPU_SysTickInit+0x40>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a06      	ldr	r2, [pc, #24]	; (80024ec <OS_CPU_SysTickInit+0x40>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	e000e014 	.word	0xe000e014
 80024e8:	e000ed23 	.word	0xe000ed23
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <OSDebugInit+0xf4>)
 80024f8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <OSDebugInit+0xf8>)
 80024fc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 80024fe:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <OSDebugInit+0xfc>)
 8002500:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <OSDebugInit+0x100>)
 8002504:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <OSDebugInit+0x104>)
 8002508:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <OSDebugInit+0x108>)
 800250c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <OSDebugInit+0x10c>)
 8002510:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <OSDebugInit+0x110>)
 8002514:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <OSDebugInit+0x114>)
 8002518:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <OSDebugInit+0x118>)
 800251c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <OSDebugInit+0x11c>)
 8002520:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <OSDebugInit+0x120>)
 8002524:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <OSDebugInit+0x124>)
 8002528:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <OSDebugInit+0x128>)
 800252c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <OSDebugInit+0x12c>)
 8002530:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <OSDebugInit+0x130>)
 8002534:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <OSDebugInit+0x134>)
 8002538:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <OSDebugInit+0x138>)
 800253c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <OSDebugInit+0x13c>)
 8002540:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <OSDebugInit+0x140>)
 8002544:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <OSDebugInit+0x144>)
 8002548:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <OSDebugInit+0x148>)
 800254c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <OSDebugInit+0x14c>)
 8002550:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <OSDebugInit+0x150>)
 8002554:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <OSDebugInit+0x154>)
 8002558:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <OSDebugInit+0x158>)
 800255c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <OSDebugInit+0x15c>)
 8002560:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <OSDebugInit+0x160>)
 8002564:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <OSDebugInit+0x164>)
 8002568:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <OSDebugInit+0x168>)
 800256c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 800256e:	4b3b      	ldr	r3, [pc, #236]	; (800265c <OSDebugInit+0x16c>)
 8002570:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <OSDebugInit+0x170>)
 8002574:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <OSDebugInit+0x174>)
 8002578:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <OSDebugInit+0x178>)
 800257c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <OSDebugInit+0x17c>)
 8002580:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <OSDebugInit+0x180>)
 8002584:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <OSDebugInit+0x184>)
 8002588:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <OSDebugInit+0x188>)
 800258c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <OSDebugInit+0x18c>)
 8002590:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <OSDebugInit+0x190>)
 8002594:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <OSDebugInit+0x194>)
 8002598:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <OSDebugInit+0x198>)
 800259c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 800259e:	4b3b      	ldr	r3, [pc, #236]	; (800268c <OSDebugInit+0x19c>)
 80025a0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <OSDebugInit+0x1a0>)
 80025a4:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 80025a6:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <OSDebugInit+0x1a4>)
 80025a8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <OSDebugInit+0x1a8>)
 80025ac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <OSDebugInit+0x1ac>)
 80025b0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <OSDebugInit+0x1b0>)
 80025b4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <OSDebugInit+0x1b4>)
 80025b8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <OSDebugInit+0x1b8>)
 80025bc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <OSDebugInit+0x1bc>)
 80025c0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 80025c2:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <OSDebugInit+0x1c0>)
 80025c4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <OSDebugInit+0x1c4>)
 80025c8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <OSDebugInit+0x1c8>)
 80025cc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <OSDebugInit+0x1cc>)
 80025d0:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <OSDebugInit+0x1d0>)
 80025d4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <OSDebugInit+0x1d4>)
 80025d8:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	08004300 	.word	0x08004300
 80025e8:	08004304 	.word	0x08004304
 80025ec:	0800430a 	.word	0x0800430a
 80025f0:	0800430c 	.word	0x0800430c
 80025f4:	08004308 	.word	0x08004308
 80025f8:	0800430e 	.word	0x0800430e
 80025fc:	08004310 	.word	0x08004310
 8002600:	08004312 	.word	0x08004312
 8002604:	08004314 	.word	0x08004314
 8002608:	08004316 	.word	0x08004316
 800260c:	08004318 	.word	0x08004318
 8002610:	0800431a 	.word	0x0800431a
 8002614:	0800431c 	.word	0x0800431c
 8002618:	0800431e 	.word	0x0800431e
 800261c:	08004320 	.word	0x08004320
 8002620:	08004322 	.word	0x08004322
 8002624:	08004324 	.word	0x08004324
 8002628:	08004326 	.word	0x08004326
 800262c:	08004328 	.word	0x08004328
 8002630:	0800432a 	.word	0x0800432a
 8002634:	0800432c 	.word	0x0800432c
 8002638:	0800432e 	.word	0x0800432e
 800263c:	08004330 	.word	0x08004330
 8002640:	08004332 	.word	0x08004332
 8002644:	08004334 	.word	0x08004334
 8002648:	08004336 	.word	0x08004336
 800264c:	08004338 	.word	0x08004338
 8002650:	0800433a 	.word	0x0800433a
 8002654:	0800433c 	.word	0x0800433c
 8002658:	0800433e 	.word	0x0800433e
 800265c:	08004340 	.word	0x08004340
 8002660:	08004342 	.word	0x08004342
 8002664:	08004344 	.word	0x08004344
 8002668:	08004346 	.word	0x08004346
 800266c:	08004348 	.word	0x08004348
 8002670:	0800434a 	.word	0x0800434a
 8002674:	0800434c 	.word	0x0800434c
 8002678:	0800434e 	.word	0x0800434e
 800267c:	08004350 	.word	0x08004350
 8002680:	08004352 	.word	0x08004352
 8002684:	08004354 	.word	0x08004354
 8002688:	08004356 	.word	0x08004356
 800268c:	08004358 	.word	0x08004358
 8002690:	0800435a 	.word	0x0800435a
 8002694:	20001b28 	.word	0x20001b28
 8002698:	20001a84 	.word	0x20001a84
 800269c:	0800435e 	.word	0x0800435e
 80026a0:	08004360 	.word	0x08004360
 80026a4:	08004362 	.word	0x08004362
 80026a8:	08004364 	.word	0x08004364
 80026ac:	08004366 	.word	0x08004366
 80026b0:	08004368 	.word	0x08004368
 80026b4:	0800436a 	.word	0x0800436a
 80026b8:	0800436c 	.word	0x0800436c
 80026bc:	0800436e 	.word	0x0800436e
 80026c0:	0800435c 	.word	0x0800435c
 80026c4:	08004370 	.word	0x08004370

080026c8 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <OSEventNameSet+0x54>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <OSEventNameSet+0x20>
        *perr = OS_ERR_NAME_SET_ISR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2212      	movs	r2, #18
 80026e4:	701a      	strb	r2, [r3, #0]
        return;
 80026e6:	e015      	b.n	8002714 <OSEventNameSet+0x4c>
    }
    switch (pevent->OSEventType) {
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d903      	bls.n	80026fa <OSEventNameSet+0x32>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
             return;
 80026f8:	e00c      	b.n	8002714 <OSEventNameSet+0x4c>
             break;
 80026fa:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80026fc:	f7fd fd26 	bl	800014c <OS_CPU_SR_Save>
 8002700:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8002708:	6978      	ldr	r0, [r7, #20]
 800270a:	f7fd fd23 	bl	8000154 <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
}
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200022bc 	.word	0x200022bc

08002720 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8002724:	f7ff fda8 	bl	8002278 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8002728:	f000 fb36 	bl	8002d98 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 800272c:	f000 fb72 	bl	8002e14 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8002730:	f000 fbec 	bl	8002f0c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8002734:	f000 fae4 	bl	8002d00 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8002738:	f000 fe4a 	bl	80033d0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 800273c:	f000 feb8 	bl	80034b0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8002740:	f000 fef6 	bl	8003530 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8002744:	f000 fb96 	bl	8002e74 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8002748:	f000 fbba 	bl	8002ec0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 800274c:	f001 fb90 	bl	8003e70 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8002750:	f7ff fdb8 	bl	80022c4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8002754:	f7ff fecc 	bl	80024f0 <OSDebugInit>
#endif
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}

0800275c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <OSIntExit+0x84>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d133      	bne.n	80027d6 <OSIntExit+0x7a>
        OS_ENTER_CRITICAL();
 800276e:	f7fd fced 	bl	800014c <OS_CPU_SR_Save>
 8002772:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <OSIntExit+0x88>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <OSIntExit+0x2c>
            OSIntNesting--;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <OSIntExit+0x88>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <OSIntExit+0x88>)
 8002786:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <OSIntExit+0x88>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11f      	bne.n	80027d0 <OSIntExit+0x74>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <OSIntExit+0x8c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11b      	bne.n	80027d0 <OSIntExit+0x74>
                OS_SchedNew();
 8002798:	f000 fc60 	bl	800305c <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <OSIntExit+0x90>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <OSIntExit+0x94>)
 80027a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <OSIntExit+0x98>)
 80027aa:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <OSIntExit+0x90>)
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <OSIntExit+0x9c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d00b      	beq.n	80027d0 <OSIntExit+0x74>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <OSIntExit+0x98>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027be:	3201      	adds	r2, #1
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <OSIntExit+0xa0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <OSIntExit+0xa0>)
 80027ca:	6013      	str	r3, [r2, #0]
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 80027cc:	f7fd fcde 	bl	800018c <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fd fcbf 	bl	8000154 <OS_CPU_SR_Restore>
    }
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20001acd 	.word	0x20001acd
 80027e4:	200022bc 	.word	0x200022bc
 80027e8:	20001ac4 	.word	0x20001ac4
 80027ec:	20001ad6 	.word	0x20001ad6
 80027f0:	20003cd0 	.word	0x20003cd0
 80027f4:	200020a4 	.word	0x200020a4
 80027f8:	20001da8 	.word	0x20001da8
 80027fc:	2000202c 	.word	0x2000202c

08002800 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <OSSchedLock+0x44>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d113      	bne.n	800283a <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
 8002812:	f7fd fc9b 	bl	800014c <OS_CPU_SR_Save>
 8002816:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <OSSchedLock+0x48>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <OSSchedLock+0x4c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d005      	beq.n	8002834 <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <OSSchedLock+0x4c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <OSSchedLock+0x4c>)
 8002832:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd fc8d 	bl	8000154 <OS_CPU_SR_Restore>
    }
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20001acd 	.word	0x20001acd
 8002848:	200022bc 	.word	0x200022bc
 800284c:	20001ac4 	.word	0x20001ac4

08002850 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <OSSchedUnlock+0x68>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d125      	bne.n	80028ae <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
 8002862:	f7fd fc73 	bl	800014c <OS_CPU_SR_Save>
 8002866:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <OSSchedUnlock+0x6c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11b      	bne.n	80028a8 <OSSchedUnlock+0x58>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <OSSchedUnlock+0x70>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <OSSchedUnlock+0x50>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <OSSchedUnlock+0x70>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3b01      	subs	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <OSSchedUnlock+0x70>)
 8002882:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <OSSchedUnlock+0x70>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fd fc61 	bl	8000154 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8002892:	f000 fba1 	bl	8002fd8 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8002896:	e00a      	b.n	80028ae <OSSchedUnlock+0x5e>
                    OS_EXIT_CRITICAL();
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fd fc5b 	bl	8000154 <OS_CPU_SR_Restore>
}
 800289e:	e006      	b.n	80028ae <OSSchedUnlock+0x5e>
                OS_EXIT_CRITICAL();
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fd fc57 	bl	8000154 <OS_CPU_SR_Restore>
}
 80028a6:	e002      	b.n	80028ae <OSSchedUnlock+0x5e>
            OS_EXIT_CRITICAL();
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7fd fc53 	bl	8000154 <OS_CPU_SR_Restore>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20001acd 	.word	0x20001acd
 80028bc:	200022bc 	.word	0x200022bc
 80028c0:	20001ac4 	.word	0x20001ac4

080028c4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <OSStart+0x38>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d113      	bne.n	80028f8 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 80028d0:	f000 fbc4 	bl	800305c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <OSStart+0x3c>)
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <OSStart+0x40>)
 80028da:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <OSStart+0x3c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <OSStart+0x44>)
 80028e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <OSStart+0x48>)
 80028ea:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <OSStart+0x48>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a07      	ldr	r2, [pc, #28]	; (8002910 <OSStart+0x4c>)
 80028f2:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 80028f4:	f7fd fc31 	bl	800015a <OSStartHighRdy>
    }
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20001acd 	.word	0x20001acd
 8002900:	20001ad6 	.word	0x20001ad6
 8002904:	20001da8 	.word	0x20001da8
 8002908:	20003cd0 	.word	0x20003cd0
 800290c:	200020a4 	.word	0x200020a4
 8002910:	200022c0 	.word	0x200022c0

08002914 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 800291e:	f7ff fd93 	bl	8002448 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8002922:	f7fd fc13 	bl	800014c <OS_CPU_SR_Save>
 8002926:	6078      	str	r0, [r7, #4]
    OSTime++;
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <OSTimeTick+0x120>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a41      	ldr	r2, [pc, #260]	; (8002a34 <OSTimeTick+0x120>)
 8002930:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fd fc0e 	bl	8000154 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8002938:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <OSTimeTick+0x124>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d176      	bne.n	8002a2e <OSTimeTick+0x11a>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <OSTimeTick+0x128>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d006      	beq.n	8002956 <OSTimeTick+0x42>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d007      	beq.n	800295c <OSTimeTick+0x48>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <OSTimeTick+0x54>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8002950:	2301      	movs	r3, #1
 8002952:	72fb      	strb	r3, [r7, #11]
                 break;
 8002954:	e00e      	b.n	8002974 <OSTimeTick+0x60>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8002956:	2300      	movs	r3, #0
 8002958:	72fb      	strb	r3, [r7, #11]
                 break;
 800295a:	e00b      	b.n	8002974 <OSTimeTick+0x60>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 800295c:	2301      	movs	r3, #1
 800295e:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8002960:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <OSTimeTick+0x128>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
                 break;
 8002966:	e005      	b.n	8002974 <OSTimeTick+0x60>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8002968:	2301      	movs	r3, #1
 800296a:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 800296c:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <OSTimeTick+0x128>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
                 break;
 8002972:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d058      	beq.n	8002a2c <OSTimeTick+0x118>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <OSTimeTick+0x12c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8002980:	e04e      	b.n	8002a20 <OSTimeTick+0x10c>
            OS_ENTER_CRITICAL();
 8002982:	f7fd fbe3 	bl	800014c <OS_CPU_SR_Save>
 8002986:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	2b00      	cmp	r3, #0
 800298e:	d041      	beq.n	8002a14 <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d138      	bne.n	8002a14 <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a8:	f003 0337 	and.w	r3, r3, #55	; 0x37
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b6:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029ca:	e003      	b.n	80029d4 <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <OSTimeTick+0x130>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <OSTimeTick+0x130>)
 80029f2:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <OSTimeTick+0x134>)
 80029fe:	5c9a      	ldrb	r2, [r3, r2]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <OSTimeTick+0x134>)
 8002a12:	545a      	strb	r2, [r3, r1]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd fb9a 	bl	8000154 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a26:	2b3f      	cmp	r3, #63	; 0x3f
 8002a28:	d1ab      	bne.n	8002982 <OSTimeTick+0x6e>
 8002a2a:	e000      	b.n	8002a2e <OSTimeTick+0x11a>
            return;
 8002a2c:	bf00      	nop
        }
    }
}
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200022c8 	.word	0x200022c8
 8002a38:	20001acd 	.word	0x20001acd
 8002a3c:	20001e28 	.word	0x20001e28
 8002a40:	20001dac 	.word	0x20001dac
 8002a44:	200020ac 	.word	0x200020ac
 8002a48:	200020b0 	.word	0x200020b0

08002a4c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	460b      	mov	r3, r1
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	7a9b      	ldrb	r3, [r3, #10]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <OS_EventTaskRdy+0xd4>)
 8002a76:	5c9b      	ldrb	r3, [r3, r2]
 8002a78:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	7adb      	ldrb	r3, [r3, #11]
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <OS_EventTaskRdy+0xd4>)
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	7dbb      	ldrb	r3, [r7, #22]
 8002a92:	4413      	add	r3, r2
 8002a94:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8002a96:	7d7b      	ldrb	r3, [r7, #21]
 8002a98:	4a25      	ldr	r2, [pc, #148]	; (8002b30 <OS_EventTaskRdy+0xd8>)
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	79ba      	ldrb	r2, [r7, #6]
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d113      	bne.n	8002b00 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <OS_EventTaskRdy+0xdc>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <OS_EventTaskRdy+0xdc>)
 8002ae8:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <OS_EventTaskRdy+0xe0>)
 8002aee:	5cd1      	ldrb	r1, [r2, r3]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	b2d1      	uxtb	r1, r2
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <OS_EventTaskRdy+0xe0>)
 8002afe:	54d1      	strb	r1, [r2, r3]
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	6938      	ldr	r0, [r7, #16]
 8002b04:	f000 f870 	bl	8002be8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4619      	mov	r1, r3
 8002b16:	6938      	ldr	r0, [r7, #16]
 8002b18:	f000 f895 	bl	8002c46 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8002b22:	7d7b      	ldrb	r3, [r7, #21]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08004374 	.word	0x08004374
 8002b30:	20003cd0 	.word	0x20003cd0
 8002b34:	200020ac 	.word	0x200020ac
 8002b38:	200020b0 	.word	0x200020b0

08002b3c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	7ada      	ldrb	r2, [r3, #11]
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b64:	491d      	ldr	r1, [pc, #116]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	440b      	add	r3, r1
 8002b74:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7a9a      	ldrb	r2, [r3, #10]
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b82:	4313      	orrs	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b92:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <OS_EventTaskWait+0xa4>)
 8002b98:	5cd1      	ldrb	r1, [r2, r3]
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	400a      	ands	r2, r1
 8002baa:	b2d1      	uxtb	r1, r2
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <OS_EventTaskWait+0xa4>)
 8002bae:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <OS_EventTaskWait+0xa4>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10b      	bne.n	8002bd2 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <OS_EventTaskWait+0xa0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <OS_EventTaskWait+0xa8>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <OS_EventTaskWait+0xa8>)
 8002bd0:	701a      	strb	r2, [r3, #0]
    }
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	200022c0 	.word	0x200022c0
 8002be0:	200020b0 	.word	0x200020b0
 8002be4:	200020ac 	.word	0x200020ac

08002be8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf8:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	7ad9      	ldrb	r1, [r3, #11]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	b2d1      	uxtb	r1, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	460a      	mov	r2, r1
 8002c18:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	7adb      	ldrb	r3, [r3, #11]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7a9a      	ldrb	r2, [r3, #10]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c30:	43db      	mvns	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	729a      	strb	r2, [r3, #10]
    }
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c56:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c5e:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c66:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8002c72:	e022      	b.n	8002cba <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	7ad9      	ldrb	r1, [r3, #11]
 8002c7c:	7b7b      	ldrb	r3, [r7, #13]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	400a      	ands	r2, r1
 8002c86:	b2d1      	uxtb	r1, r2
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	7adb      	ldrb	r3, [r3, #11]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	7a9a      	ldrb	r2, [r3, #10]
 8002ca0:	7bbb      	ldrb	r3, [r7, #14]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1d9      	bne.n	8002c74 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e007      	b.n	8002cee <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	3301      	adds	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	d9f4      	bls.n	8002cde <OS_EventWaitListInit+0x14>
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8002d06:	f241 0168 	movw	r1, #4200	; 0x1068
 8002d0a:	4820      	ldr	r0, [pc, #128]	; (8002d8c <OS_InitEventList+0x8c>)
 8002d0c:	f000 f94c 	bl	8002fa8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8002d10:	2300      	movs	r3, #0
 8002d12:	81fb      	strh	r3, [r7, #14]
 8002d14:	e01e      	b.n	8002d54 <OS_InitEventList+0x54>
        ix_next = ix + 1u;
 8002d16:	89fb      	ldrh	r3, [r7, #14]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8002d1c:	89fa      	ldrh	r2, [r7, #14]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <OS_InitEventList+0x8c>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <OS_InitEventList+0x8c>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <OS_InitEventList+0x90>)
 8002d4c:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	3301      	adds	r3, #1
 8002d52:	81fb      	strh	r3, [r7, #14]
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	2bad      	cmp	r3, #173	; 0xad
 8002d58:	d9dd      	bls.n	8002d16 <OS_InitEventList+0x16>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8002d5a:	89fa      	ldrh	r2, [r7, #14]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <OS_InitEventList+0x8c>)
 8002d66:	4413      	add	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <OS_InitEventList+0x90>)
 8002d7a:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <OS_InitEventList+0x94>)
 8002d7e:	4a03      	ldr	r2, [pc, #12]	; (8002d8c <OS_InitEventList+0x8c>)
 8002d80:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200024d0 	.word	0x200024d0
 8002d90:	08004254 	.word	0x08004254
 8002d94:	200022b8 	.word	0x200022b8

08002d98 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <OS_InitMisc+0x50>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <OS_InitMisc+0x54>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <OS_InitMisc+0x58>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <OS_InitMisc+0x5c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <OS_InitMisc+0x60>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <OS_InitMisc+0x64>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <OS_InitMisc+0x68>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <OS_InitMisc+0x6c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <OS_InitMisc+0x70>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <OS_InitMisc+0x74>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <OS_InitMisc+0x78>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
#endif
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	200022c8 	.word	0x200022c8
 8002dec:	200022bc 	.word	0x200022bc
 8002df0:	20001ac4 	.word	0x20001ac4
 8002df4:	2000203d 	.word	0x2000203d
 8002df8:	20001acd 	.word	0x20001acd
 8002dfc:	2000202c 	.word	0x2000202c
 8002e00:	20001ad0 	.word	0x20001ad0
 8002e04:	20003dd0 	.word	0x20003dd0
 8002e08:	20002034 	.word	0x20002034
 8002e0c:	20003ccc 	.word	0x20003ccc
 8002e10:	20001acc 	.word	0x20001acc

08002e14 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <OS_InitRdyList+0x48>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	71fb      	strb	r3, [r7, #7]
 8002e24:	e006      	b.n	8002e34 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <OS_InitRdyList+0x4c>)
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	3301      	adds	r3, #1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b07      	cmp	r3, #7
 8002e38:	d9f5      	bls.n	8002e26 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <OS_InitRdyList+0x50>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <OS_InitRdyList+0x54>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <OS_InitRdyList+0x58>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <OS_InitRdyList+0x5c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	200020ac 	.word	0x200020ac
 8002e60:	200020b0 	.word	0x200020b0
 8002e64:	20001da8 	.word	0x20001da8
 8002e68:	20001ad6 	.word	0x20001ad6
 8002e6c:	200020a4 	.word	0x200020a4
 8002e70:	200022c0 	.word	0x200022c0

08002e74 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <OS_InitTaskIdle+0x3c>)
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	233f      	movs	r3, #63	; 0x3f
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <OS_InitTaskIdle+0x40>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <OS_InitTaskIdle+0x44>)
 8002e98:	f000 fce6 	bl	8003868 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4906      	ldr	r1, [pc, #24]	; (8002ebc <OS_InitTaskIdle+0x48>)
 8002ea2:	203f      	movs	r0, #63	; 0x3f
 8002ea4:	f000 fe32 	bl	8003b0c <OSTaskNameSet>
#endif
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	200022d0 	.word	0x200022d0
 8002eb4:	200024cc 	.word	0x200024cc
 8002eb8:	080030a5 	.word	0x080030a5
 8002ebc:	08004258 	.word	0x08004258

08002ec0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	9304      	str	r3, [sp, #16]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <OS_InitTaskStat+0x3c>)
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	233e      	movs	r3, #62	; 0x3e
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <OS_InitTaskStat+0x40>)
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4808      	ldr	r0, [pc, #32]	; (8002f04 <OS_InitTaskStat+0x44>)
 8002ee4:	f000 fcc0 	bl	8003868 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	461a      	mov	r2, r3
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <OS_InitTaskStat+0x48>)
 8002eee:	203e      	movs	r0, #62	; 0x3e
 8002ef0:	f000 fe0c 	bl	8003b0c <OSTaskNameSet>
#endif
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20001e2c 	.word	0x20001e2c
 8002f00:	20002028 	.word	0x20002028
 8002f04:	080030d1 	.word	0x080030d1
 8002f08:	08004268 	.word	0x08004268

08002f0c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8002f12:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8002f16:	481f      	ldr	r0, [pc, #124]	; (8002f94 <OS_InitTCBList+0x88>)
 8002f18:	f000 f846 	bl	8002fa8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8002f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f20:	481d      	ldr	r0, [pc, #116]	; (8002f98 <OS_InitTCBList+0x8c>)
 8002f22:	f000 f841 	bl	8002fa8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e019      	b.n	8002f60 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2258      	movs	r2, #88	; 0x58
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <OS_InitTCBList+0x88>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2258      	movs	r2, #88	; 0x58
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <OS_InitTCBList+0x88>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <OS_InitTCBList+0x90>)
 8002f58:	651a      	str	r2, [r3, #80]	; 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b14      	cmp	r3, #20
 8002f64:	d9e2      	bls.n	8002f2c <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2258      	movs	r2, #88	; 0x58
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <OS_InitTCBList+0x88>)
 8002f70:	4413      	add	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <OS_InitTCBList+0x90>)
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <OS_InitTCBList+0x94>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <OS_InitTCBList+0x98>)
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <OS_InitTCBList+0x88>)
 8002f8a:	601a      	str	r2, [r3, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20003538 	.word	0x20003538
 8002f98:	20003cd0 	.word	0x20003cd0
 8002f9c:	08004254 	.word	0x08004254
 8002fa0:	20001dac 	.word	0x20001dac
 8002fa4:	20002038 	.word	0x20002038

08002fa8 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8002fb4:	e007      	b.n	8002fc6 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
        size--;
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f4      	bne.n	8002fb6 <OS_MemClr+0xe>
    }
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8002fe2:	f7fd f8b3 	bl	800014c <OS_CPU_SR_Save>
 8002fe6:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <OS_Sched+0x68>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11f      	bne.n	8003030 <OS_Sched+0x58>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <OS_Sched+0x6c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11b      	bne.n	8003030 <OS_Sched+0x58>
            OS_SchedNew();
 8002ff8:	f000 f830 	bl	800305c <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <OS_Sched+0x70>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <OS_Sched+0x74>)
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	4a11      	ldr	r2, [pc, #68]	; (8003050 <OS_Sched+0x78>)
 800300a:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <OS_Sched+0x70>)
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <OS_Sched+0x7c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d00b      	beq.n	8003030 <OS_Sched+0x58>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <OS_Sched+0x78>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301e:	3201      	adds	r2, #1
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <OS_Sched+0x80>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <OS_Sched+0x80>)
 800302a:	6013      	str	r3, [r2, #0]
                OS_TASK_SW();                          /* Perform a context switch                     */
 800302c:	f7fd f8a9 	bl	8000182 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd f88f 	bl	8000154 <OS_CPU_SR_Restore>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200022bc 	.word	0x200022bc
 8003044:	20001ac4 	.word	0x20001ac4
 8003048:	20001ad6 	.word	0x20001ad6
 800304c:	20003cd0 	.word	0x20003cd0
 8003050:	200020a4 	.word	0x200020a4
 8003054:	20001da8 	.word	0x20001da8
 8003058:	2000202c 	.word	0x2000202c

0800305c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <OS_SchedNew+0x38>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <OS_SchedNew+0x3c>)
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	b2da      	uxtb	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	4909      	ldr	r1, [pc, #36]	; (800309c <OS_SchedNew+0x40>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	4619      	mov	r1, r3
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <OS_SchedNew+0x3c>)
 800307e:	5c5b      	ldrb	r3, [r3, r1]
 8003080:	4413      	add	r3, r2
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <OS_SchedNew+0x44>)
 8003086:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200020ac 	.word	0x200020ac
 8003098:	08004374 	.word	0x08004374
 800309c:	200020b0 	.word	0x200020b0
 80030a0:	20001ad6 	.word	0x20001ad6

080030a4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80030b0:	f7fd f84c 	bl	800014c <OS_CPU_SR_Save>
 80030b4:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <OS_TaskIdle+0x28>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <OS_TaskIdle+0x28>)
 80030be:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fd f847 	bl	8000154 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80030c6:	f7ff f919 	bl	80022fc <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80030ca:	e7f1      	b.n	80030b0 <OS_TaskIdle+0xc>
 80030cc:	20001ad0 	.word	0x20001ad0

080030d0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80030dc:	e002      	b.n	80030e4 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80030de:	20c8      	movs	r0, #200	; 0xc8
 80030e0:	f000 fe62 	bl	8003da8 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80030e4:	4b21      	ldr	r3, [pc, #132]	; (800316c <OS_TaskStat+0x9c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f8      	beq.n	80030de <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <OS_TaskStat+0xa0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a20      	ldr	r2, [pc, #128]	; (8003174 <OS_TaskStat+0xa4>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <OS_TaskStat+0xa0>)
 80030fa:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80030fc:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <OS_TaskStat+0xa0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 8003104:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <OS_TaskStat+0xa8>)
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 800310a:	20ff      	movs	r0, #255	; 0xff
 800310c:	f000 fda6 	bl	8003c5c <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8003110:	f7fd f81c 	bl	800014c <OS_CPU_SR_Save>
 8003114:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <OS_TaskStat+0xa0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2264      	movs	r2, #100	; 0x64
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	4a16      	ldr	r2, [pc, #88]	; (800317c <OS_TaskStat+0xac>)
 8003122:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7fd f815 	bl	8000154 <OS_CPU_SR_Restore>
    for (;;) {
        OS_ENTER_CRITICAL();
 800312a:	f7fd f80f 	bl	800014c <OS_CPU_SR_Save>
 800312e:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <OS_TaskStat+0xac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <OS_TaskStat+0xb0>)
 8003136:	6013      	str	r3, [r2, #0]
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <OS_TaskStat+0xac>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7fd f808 	bl	8000154 <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <OS_TaskStat+0xb0>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <OS_TaskStat+0xa0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <OS_TaskStat+0xa8>)
 800315a:	701a      	strb	r2, [r3, #0]
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 800315c:	f7ff f8df 	bl	800231e <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8003160:	f000 f810 	bl	8003184 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8003164:	2064      	movs	r0, #100	; 0x64
 8003166:	f000 fe1f 	bl	8003da8 <OSTimeDly>
        OS_ENTER_CRITICAL();
 800316a:	e7de      	b.n	800312a <OS_TaskStat+0x5a>
 800316c:	20003ccc 	.word	0x20003ccc
 8003170:	20002034 	.word	0x20002034
 8003174:	51eb851f 	.word	0x51eb851f
 8003178:	2000203c 	.word	0x2000203c
 800317c:	20001ad0 	.word	0x20001ad0
 8003180:	20003dd0 	.word	0x20003dd0

08003184 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	e023      	b.n	80031d8 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8003190:	463a      	mov	r2, r7
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd00 	bl	8003b9c <OSTaskStkChk>
 800319c:	4603      	mov	r3, r0
 800319e:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d115      	bne.n	80031d2 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <OS_TaskStatStkChk+0x64>)
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d00a      	beq.n	80031d2 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	441a      	add	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	64da      	str	r2, [r3, #76]	; 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	3301      	adds	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b3f      	cmp	r3, #63	; 0x3f
 80031dc:	d9d8      	bls.n	8003190 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20003cd0 	.word	0x20003cd0

080031ec <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4603      	mov	r3, r0
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	4613      	mov	r3, r2
 80031fe:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
 8003204:	f7fc ffa2 	bl	800014c <OS_CPU_SR_Save>
 8003208:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <OS_TCBInit+0x1c8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80c5 	beq.w	80033a2 <OS_TCBInit+0x1b6>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <OS_TCBInit+0x1c8>)
 800321e:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003220:	69b8      	ldr	r0, [r7, #24]
 8003222:	f7fc ff97 	bl	8000154 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324e:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003254:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003260:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	89ba      	ldrh	r2, [r7, #12]
 8003266:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	b2da      	uxtb	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b2da      	uxtb	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003290:	461a      	mov	r2, r3
 8003292:	2301      	movs	r3, #1
 8003294:	4093      	lsls	r3, r2
 8003296:	b2da      	uxtb	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80032a4:	461a      	mov	r2, r3
 80032a6:	2301      	movs	r3, #1
 80032a8:	4093      	lsls	r3, r2
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart = 0uL;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot   = 0uL;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed     = 0uL;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	4a33      	ldr	r2, [pc, #204]	; (80033b8 <OS_TCBInit+0x1cc>)
 80032ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80032ee:	2300      	movs	r3, #0
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	e009      	b.n	8003308 <OS_TCBInit+0x11c>
            ptcb->OSTCBRegTbl[i] = 0u;
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	3314      	adds	r3, #20
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	3301      	adds	r3, #1
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	7ffb      	ldrb	r3, [r7, #31]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f2      	beq.n	80032f4 <OS_TCBInit+0x108>
        }
#endif

        OSTCBInitHook(ptcb);
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff f88e 	bl	8002430 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8003314:	f7fc ff1a 	bl	800014c <OS_CPU_SR_Save>
 8003318:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	4927      	ldr	r1, [pc, #156]	; (80033bc <OS_TCBInit+0x1d0>)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8003324:	69b8      	ldr	r0, [r7, #24]
 8003326:	f7fc ff15 	bl	8000154 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	f7fe ffd0 	bl	80022d0 <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
 8003330:	f7fc ff0c 	bl	800014c <OS_CPU_SR_Save>
 8003334:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <OS_TCBInit+0x1d4>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <OS_TCBInit+0x1d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <OS_TCBInit+0x168>
            OSTCBList->OSTCBPrev = ptcb;
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <OS_TCBInit+0x1d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <OS_TCBInit+0x1d4>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <OS_TCBInit+0x1d8>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	b2da      	uxtb	r2, r3
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <OS_TCBInit+0x1d8>)
 800336a:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003372:	461a      	mov	r2, r3
 8003374:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <OS_TCBInit+0x1dc>)
 8003376:	5c9a      	ldrb	r2, [r3, r2]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8003384:	4313      	orrs	r3, r2
 8003386:	b2da      	uxtb	r2, r3
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <OS_TCBInit+0x1dc>)
 800338a:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <OS_TCBInit+0x1e0>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <OS_TCBInit+0x1e0>)
 8003396:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8003398:	69b8      	ldr	r0, [r7, #24]
 800339a:	f7fc fedb 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 800339e:	2300      	movs	r3, #0
 80033a0:	e003      	b.n	80033aa <OS_TCBInit+0x1be>
    }
    OS_EXIT_CRITICAL();
 80033a2:	69b8      	ldr	r0, [r7, #24]
 80033a4:	f7fc fed6 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 80033a8:	2342      	movs	r3, #66	; 0x42
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20002038 	.word	0x20002038
 80033b8:	08004254 	.word	0x08004254
 80033bc:	20003cd0 	.word	0x20003cd0
 80033c0:	20001dac 	.word	0x20001dac
 80033c4:	200020ac 	.word	0x200020ac
 80033c8:	200020b0 	.word	0x200020b0
 80033cc:	2000203d 	.word	0x2000203d

080033d0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 80033d6:	2150      	movs	r1, #80	; 0x50
 80033d8:	481b      	ldr	r0, [pc, #108]	; (8003448 <OS_FlagInit+0x78>)
 80033da:	f7ff fde5 	bl	8002fa8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80033de:	2300      	movs	r3, #0
 80033e0:	81fb      	strh	r3, [r7, #14]
 80033e2:	e018      	b.n	8003416 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	3301      	adds	r3, #1
 80033e8:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4a16      	ldr	r2, [pc, #88]	; (8003448 <OS_FlagInit+0x78>)
 80033f0:	4413      	add	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4a13      	ldr	r2, [pc, #76]	; (8003448 <OS_FlagInit+0x78>)
 80033fa:	4413      	add	r3, r2
 80033fc:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <OS_FlagInit+0x7c>)
 800340e:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	3301      	adds	r3, #1
 8003414:	81fb      	strh	r3, [r7, #14]
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d9e3      	bls.n	80033e4 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <OS_FlagInit+0x78>)
 8003422:	4413      	add	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4a05      	ldr	r2, [pc, #20]	; (800344c <OS_FlagInit+0x7c>)
 8003436:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <OS_FlagInit+0x80>)
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <OS_FlagInit+0x78>)
 800343c:	601a      	str	r2, [r3, #0]
#endif
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001ad8 	.word	0x20001ad8
 800344c:	08004278 	.word	0x08004278
 8003450:	20003cc8 	.word	0x20003cc8

08003454 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e008      	b.n	800349a <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr

080034b0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 80034b6:	2178      	movs	r1, #120	; 0x78
 80034b8:	481a      	ldr	r0, [pc, #104]	; (8003524 <OS_MemInit+0x74>)
 80034ba:	f7ff fd75 	bl	8002fa8 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 80034be:	2300      	movs	r3, #0
 80034c0:	80fb      	strh	r3, [r7, #6]
 80034c2:	e017      	b.n	80034f4 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4a15      	ldr	r2, [pc, #84]	; (8003524 <OS_MemInit+0x74>)
 80034d0:	4413      	add	r3, r2
 80034d2:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <OS_MemInit+0x74>)
 80034e2:	441a      	add	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <OS_MemInit+0x78>)
 80034ec:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	3301      	adds	r3, #1
 80034f2:	80fb      	strh	r3, [r7, #6]
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d9e4      	bls.n	80034c4 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4a07      	ldr	r2, [pc, #28]	; (8003524 <OS_MemInit+0x74>)
 8003506:	4413      	add	r3, r2
 8003508:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <OS_MemInit+0x78>)
 8003514:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <OS_MemInit+0x7c>)
 8003518:	4a02      	ldr	r2, [pc, #8]	; (8003524 <OS_MemInit+0x74>)
 800351a:	601a      	str	r2, [r3, #0]
#endif
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20001db0 	.word	0x20001db0
 8003528:	0800427c 	.word	0x0800427c
 800352c:	20002040 	.word	0x20002040

08003530 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8003536:	2160      	movs	r1, #96	; 0x60
 8003538:	4819      	ldr	r0, [pc, #100]	; (80035a0 <OS_QInit+0x70>)
 800353a:	f7ff fd35 	bl	8002fa8 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 800353e:	2300      	movs	r3, #0
 8003540:	81fb      	strh	r3, [r7, #14]
 8003542:	e018      	b.n	8003576 <OS_QInit+0x46>
        ix_next = ix + 1u;
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	3301      	adds	r3, #1
 8003548:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 800354a:	89fa      	ldrh	r2, [r7, #14]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4a12      	ldr	r2, [pc, #72]	; (80035a0 <OS_QInit+0x70>)
 8003556:	4413      	add	r3, r2
 8003558:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <OS_QInit+0x70>)
 8003566:	4413      	add	r3, r2
 8003568:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	3301      	adds	r3, #1
 8003574:	81fb      	strh	r3, [r7, #14]
 8003576:	89fb      	ldrh	r3, [r7, #14]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d9e3      	bls.n	8003544 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 800357c:	89fa      	ldrh	r2, [r7, #14]
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <OS_QInit+0x70>)
 8003588:	4413      	add	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <OS_QInit+0x74>)
 8003594:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <OS_QInit+0x70>)
 8003596:	601a      	str	r2, [r3, #0]
#endif
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20002044 	.word	0x20002044
 80035a4:	200020a8 	.word	0x200020a8

080035a8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <OSSemCreate+0x6c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 80035be:	2300      	movs	r3, #0
 80035c0:	e024      	b.n	800360c <OSSemCreate+0x64>
    }
    OS_ENTER_CRITICAL();
 80035c2:	f7fc fdc3 	bl	800014c <OS_CPU_SR_Save>
 80035c6:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <OSSemCreate+0x70>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <OSSemCreate+0x70>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <OSSemCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <OSSemCreate+0x70>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <OSSemCreate+0x70>)
 80035de:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7fc fdb7 	bl	8000154 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <OSSemCreate+0x62>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2203      	movs	r2, #3
 80035f0:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <OSSemCreate+0x74>)
 8003602:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f7ff fb60 	bl	8002cca <OS_EventWaitListInit>
    }
    return (pevent);
 800360a:	68bb      	ldr	r3, [r7, #8]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200022bc 	.word	0x200022bc
 8003618:	200022b8 	.word	0x200022b8
 800361c:	08004280 	.word	0x08004280

08003620 <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d003      	beq.n	8003640 <OSSemPend+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
        return;
 800363e:	e072      	b.n	8003726 <OSSemPend+0x106>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8003640:	4b3a      	ldr	r3, [pc, #232]	; (800372c <OSSemPend+0x10c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <OSSemPend+0x30>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
        return;
 800364e:	e06a      	b.n	8003726 <OSSemPend+0x106>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8003650:	4b37      	ldr	r3, [pc, #220]	; (8003730 <OSSemPend+0x110>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <OSSemPend+0x40>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	220d      	movs	r2, #13
 800365c:	701a      	strb	r2, [r3, #0]
        return;
 800365e:	e062      	b.n	8003726 <OSSemPend+0x106>
    }
    OS_ENTER_CRITICAL();
 8003660:	f7fc fd74 	bl	800014c <OS_CPU_SR_Save>
 8003664:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	891b      	ldrh	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	891b      	ldrh	r3, [r3, #8]
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7fc fd6a 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
        return;
 8003686:	e04e      	b.n	8003726 <OSSemPend+0x106>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <OSSemPend+0x114>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <OSSemPend+0x114>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800369e:	4b25      	ldr	r3, [pc, #148]	; (8003734 <OSSemPend+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <OSSemPend+0x114>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fa43 	bl	8002b3c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7fc fd4c 	bl	8000154 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 80036bc:	f7ff fc8c 	bl	8002fd8 <OS_Sched>
    OS_ENTER_CRITICAL();
 80036c0:	f7fc fd44 	bl	800014c <OS_CPU_SR_Save>
 80036c4:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <OSSemPend+0x114>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <OSSemPend+0xb8>
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d004      	beq.n	80036e0 <OSSemPend+0xc0>
 80036d6:	e007      	b.n	80036e8 <OSSemPend+0xc8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
             break;
 80036de:	e00d      	b.n	80036fc <OSSemPend+0xdc>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	220e      	movs	r2, #14
 80036e4:	701a      	strb	r2, [r3, #0]
             break;
 80036e6:	e009      	b.n	80036fc <OSSemPend+0xdc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <OSSemPend+0x114>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68f9      	ldr	r1, [r7, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fa7a 	bl	8002be8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	220a      	movs	r2, #10
 80036f8:	701a      	strb	r2, [r3, #0]
             break;
 80036fa:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <OSSemPend+0x114>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <OSSemPend+0x114>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <OSSemPend+0x114>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2200      	movs	r2, #0
 8003716:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <OSSemPend+0x114>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f7fc fd17 	bl	8000154 <OS_CPU_SR_Restore>
}
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	200022bc 	.word	0x200022bc
 8003730:	20001ac4 	.word	0x20001ac4
 8003734:	200022c0 	.word	0x200022c0

08003738 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d001      	beq.n	8003750 <OSSemPost+0x18>
        return (OS_ERR_EVENT_TYPE);
 800374c:	2301      	movs	r3, #1
 800374e:	e028      	b.n	80037a2 <OSSemPost+0x6a>
    }
    OS_ENTER_CRITICAL();
 8003750:	f7fc fcfc 	bl	800014c <OS_CPU_SR_Save>
 8003754:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a9b      	ldrb	r3, [r3, #10]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <OSSemPost+0x40>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 800375e:	2300      	movs	r3, #0
 8003760:	2201      	movs	r2, #1
 8003762:	2100      	movs	r1, #0
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff f977 	bl	8002a58 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7fc fcf2 	bl	8000154 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8003770:	f7ff fc32 	bl	8002fd8 <OS_Sched>
        return (OS_ERR_NONE);
 8003774:	2300      	movs	r3, #0
 8003776:	e014      	b.n	80037a2 <OSSemPost+0x6a>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	891b      	ldrh	r3, [r3, #8]
 800377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003780:	4293      	cmp	r3, r2
 8003782:	d00a      	beq.n	800379a <OSSemPost+0x62>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	891b      	ldrh	r3, [r3, #8]
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7fc fcdf 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8003796:	2300      	movs	r3, #0
 8003798:	e003      	b.n	80037a2 <OSSemPost+0x6a>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7fc fcda 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
 80037a0:	2333      	movs	r3, #51	; 0x33
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 80037be:	f7fc fcc5 	bl	800014c <OS_CPU_SR_Save>
 80037c2:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <OSTaskCreate+0xb0>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <OSTaskCreate+0x2a>
        OS_EXIT_CRITICAL();
 80037cc:	69f8      	ldr	r0, [r7, #28]
 80037ce:	f7fc fcc1 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 80037d2:	233c      	movs	r3, #60	; 0x3c
 80037d4:	e03d      	b.n	8003852 <OSTaskCreate+0xa6>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <OSTaskCreate+0xb4>)
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d133      	bne.n	800384a <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <OSTaskCreate+0xb4>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 80037ec:	69f8      	ldr	r0, [r7, #28]
 80037ee:	f7fc fcb1 	bl	8000154 <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 80037f2:	2300      	movs	r3, #0
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fe fd97 	bl	800232c <OSTaskStkInit>
 80037fe:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8003800:	78f8      	ldrb	r0, [r7, #3]
 8003802:	2300      	movs	r3, #0
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	2200      	movs	r2, #0
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	f7ff fcea 	bl	80031ec <OS_TCBInit>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <OSTaskCreate+0x84>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <OSTaskCreate+0xb8>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10d      	bne.n	8003846 <OSTaskCreate+0x9a>
                OS_Sched();
 800382a:	f7ff fbd5 	bl	8002fd8 <OS_Sched>
 800382e:	e00a      	b.n	8003846 <OSTaskCreate+0x9a>
            }
        } else {
            OS_ENTER_CRITICAL();
 8003830:	f7fc fc8c 	bl	800014c <OS_CPU_SR_Save>
 8003834:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	4a09      	ldr	r2, [pc, #36]	; (8003860 <OSTaskCreate+0xb4>)
 800383a:	2100      	movs	r1, #0
 800383c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8003840:	69f8      	ldr	r0, [r7, #28]
 8003842:	f7fc fc87 	bl	8000154 <OS_CPU_SR_Restore>
        }
        return (err);
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	e003      	b.n	8003852 <OSTaskCreate+0xa6>
    }
    OS_EXIT_CRITICAL();
 800384a:	69f8      	ldr	r0, [r7, #28]
 800384c:	f7fc fc82 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8003850:	2328      	movs	r3, #40	; 0x28
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200022bc 	.word	0x200022bc
 8003860:	20003cd0 	.word	0x20003cd0
 8003864:	20001acd 	.word	0x20001acd

08003868 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	; 0x30
 800386c:	af04      	add	r7, sp, #16
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 800387a:	f7fc fc67 	bl	800014c <OS_CPU_SR_Save>
 800387e:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <OSTaskCreateExt+0xbc>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <OSTaskCreateExt+0x2a>
        OS_EXIT_CRITICAL();
 8003888:	69f8      	ldr	r0, [r7, #28]
 800388a:	f7fc fc63 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800388e:	233c      	movs	r3, #60	; 0x3c
 8003890:	e044      	b.n	800391c <OSTaskCreateExt+0xb4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <OSTaskCreateExt+0xc0>)
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d13a      	bne.n	8003914 <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <OSTaskCreateExt+0xc0>)
 80038a2:	2101      	movs	r1, #1
 80038a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 80038a8:	69f8      	ldr	r0, [r7, #28]
 80038aa:	f7fc fc53 	bl	8000154 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80038ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038b0:	461a      	mov	r2, r3
 80038b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038b6:	f000 fa55 	bl	8003d64 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80038ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7fe fd33 	bl	800232c <OSTaskStkInit>
 80038c6:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80038c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038ca:	78f8      	ldrb	r0, [r7, #3]
 80038cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	f7ff fc85 	bl	80031ec <OS_TCBInit>
 80038e2:	4603      	mov	r3, r0
 80038e4:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <OSTaskCreateExt+0x92>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 80038ec:	4b0f      	ldr	r3, [pc, #60]	; (800392c <OSTaskCreateExt+0xc4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10d      	bne.n	8003910 <OSTaskCreateExt+0xa8>
                OS_Sched();
 80038f4:	f7ff fb70 	bl	8002fd8 <OS_Sched>
 80038f8:	e00a      	b.n	8003910 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 80038fa:	f7fc fc27 	bl	800014c <OS_CPU_SR_Save>
 80038fe:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <OSTaskCreateExt+0xc0>)
 8003904:	2100      	movs	r1, #0
 8003906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 800390a:	69f8      	ldr	r0, [r7, #28]
 800390c:	f7fc fc22 	bl	8000154 <OS_CPU_SR_Restore>
        }
        return (err);
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	e003      	b.n	800391c <OSTaskCreateExt+0xb4>
    }
    OS_EXIT_CRITICAL();
 8003914:	69f8      	ldr	r0, [r7, #28]
 8003916:	f7fc fc1d 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 800391a:	2328      	movs	r3, #40	; 0x28
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200022bc 	.word	0x200022bc
 8003928:	20003cd0 	.word	0x20003cd0
 800392c:	20001acd 	.word	0x20001acd

08003930 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
#endif



    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 800393e:	4b68      	ldr	r3, [pc, #416]	; (8003ae0 <OSTaskDel+0x1b0>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8003946:	2340      	movs	r3, #64	; 0x40
 8003948:	e0c6      	b.n	8003ad8 <OSTaskDel+0x1a8>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	2b3f      	cmp	r3, #63	; 0x3f
 800394e:	d101      	bne.n	8003954 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8003950:	233e      	movs	r3, #62	; 0x3e
 8003952:	e0c1      	b.n	8003ad8 <OSTaskDel+0x1a8>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8003954:	f7fc fbfa 	bl	800014c <OS_CPU_SR_Save>
 8003958:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2bff      	cmp	r3, #255	; 0xff
 800395e:	d104      	bne.n	800396a <OSTaskDel+0x3a>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8003960:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <OSTaskDel+0x1b4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003968:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	4a5e      	ldr	r2, [pc, #376]	; (8003ae8 <OSTaskDel+0x1b8>)
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <OSTaskDel+0x54>
        OS_EXIT_CRITICAL();
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7fc fbea 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003980:	2343      	movs	r3, #67	; 0x43
 8003982:	e0a9      	b.n	8003ad8 <OSTaskDel+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d104      	bne.n	8003994 <OSTaskDel+0x64>
        OS_EXIT_CRITICAL();
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7fc fbe2 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8003990:	233d      	movs	r3, #61	; 0x3d
 8003992:	e0a1      	b.n	8003ad8 <OSTaskDel+0x1a8>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800399a:	461a      	mov	r2, r3
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <OSTaskDel+0x1bc>)
 800399e:	5c9a      	ldrb	r2, [r3, r2]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039a6:	43db      	mvns	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	6939      	ldr	r1, [r7, #16]
 80039ac:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 80039b0:	4013      	ands	r3, r2
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b4d      	ldr	r3, [pc, #308]	; (8003aec <OSTaskDel+0x1bc>)
 80039b6:	545a      	strb	r2, [r3, r1]
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039be:	461a      	mov	r2, r3
 80039c0:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <OSTaskDel+0x1bc>)
 80039c2:	5c9b      	ldrb	r3, [r3, r2]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <OSTaskDel+0xae>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039ce:	43db      	mvns	r3, r3
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <OSTaskDel+0x1c0>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	4013      	ands	r3, r2
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b45      	ldr	r3, [pc, #276]	; (8003af0 <OSTaskDel+0x1c0>)
 80039dc:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <OSTaskDel+0xc2>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4619      	mov	r1, r3
 80039ec:	6938      	ldr	r0, [r7, #16]
 80039ee:	f7ff f8fb 	bl	8002be8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <OSTaskDel+0xd6>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4619      	mov	r1, r3
 8003a00:	6938      	ldr	r0, [r7, #16]
 8003a02:	f7ff f920 	bl	8002c46 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <OSTaskDel+0xe8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fd1e 	bl	8003454 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2bff      	cmp	r3, #255	; 0xff
 8003a34:	d005      	beq.n	8003a42 <OSTaskDel+0x112>
        OSLockNesting++;
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a40:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7fc fb86 	bl	8000154 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8003a48:	f7ff f800 	bl	8002a4c <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8003a4c:	f7fc fb7e 	bl	800014c <OS_CPU_SR_Save>
 8003a50:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <OSTaskDel+0x136>
        OSLockNesting--;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <OSTaskDel+0x1c4>)
 8003a64:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8003a66:	6938      	ldr	r0, [r7, #16]
 8003a68:	f7fe fc3d 	bl	80022e6 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <OSTaskDel+0x1c8>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <OSTaskDel+0x1c8>)
 8003a76:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <OSTaskDel+0x1b8>)
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <OSTaskDel+0x16c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <OSTaskDel+0x1cc>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e009      	b.n	8003ab0 <OSTaskDel+0x180>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	6952      	ldr	r2, [r2, #20]
 8003aa4:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	6992      	ldr	r2, [r2, #24]
 8003aae:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <OSTaskDel+0x1d0>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <OSTaskDel+0x1d0>)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <OSTaskDel+0x1d4>)
 8003ac2:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7fc fb45 	bl	8000154 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <OSTaskDel+0x1d8>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <OSTaskDel+0x1a6>
        OS_Sched();                                     /* Find new highest priority task              */
 8003ad2:	f7ff fa81 	bl	8002fd8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200022bc 	.word	0x200022bc
 8003ae4:	200022c0 	.word	0x200022c0
 8003ae8:	20003cd0 	.word	0x20003cd0
 8003aec:	200020b0 	.word	0x200020b0
 8003af0:	200020ac 	.word	0x200020ac
 8003af4:	20001ac4 	.word	0x20001ac4
 8003af8:	2000203d 	.word	0x2000203d
 8003afc:	20001dac 	.word	0x20001dac
 8003b00:	20002038 	.word	0x20002038
 8003b04:	08004284 	.word	0x08004284
 8003b08:	20001acd 	.word	0x20001acd

08003b0c <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <OSTaskNameSet+0x84>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <OSTaskNameSet+0x22>
        *perr = OS_ERR_NAME_SET_ISR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2212      	movs	r2, #18
 8003b2a:	701a      	strb	r2, [r3, #0]
        return;
 8003b2c:	e02c      	b.n	8003b88 <OSTaskNameSet+0x7c>
    }
    OS_ENTER_CRITICAL();
 8003b2e:	f7fc fb0d 	bl	800014c <OS_CPU_SR_Save>
 8003b32:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2bff      	cmp	r3, #255	; 0xff
 8003b38:	d104      	bne.n	8003b44 <OSTaskNameSet+0x38>
        prio = OSTCBCur->OSTCBPrio;
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <OSTaskNameSet+0x88>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b42:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <OSTaskNameSet+0x8c>)
 8003b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4c:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <OSTaskNameSet+0x56>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f7fc fafd 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2243      	movs	r2, #67	; 0x43
 8003b5e:	701a      	strb	r2, [r3, #0]
        return;
 8003b60:	e012      	b.n	8003b88 <OSTaskNameSet+0x7c>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d106      	bne.n	8003b76 <OSTaskNameSet+0x6a>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8003b68:	6978      	ldr	r0, [r7, #20]
 8003b6a:	f7fc faf3 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2243      	movs	r2, #67	; 0x43
 8003b72:	701a      	strb	r2, [r3, #0]
        return;
 8003b74:	e008      	b.n	8003b88 <OSTaskNameSet+0x7c>
    }
    ptcb->OSTCBTaskName = pname;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
    OS_EXIT_CRITICAL();
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7fc fae9 	bl	8000154 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
}
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200022bc 	.word	0x200022bc
 8003b94:	200022c0 	.word	0x200022c0
 8003b98:	20003cd0 	.word	0x20003cd0

08003b9c <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8003bb8:	f7fc fac8 	bl	800014c <OS_CPU_SR_Save>
 8003bbc:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2bff      	cmp	r3, #255	; 0xff
 8003bc2:	d104      	bne.n	8003bce <OSTaskStkChk+0x32>
        prio = OSTCBCur->OSTCBPrio;
 8003bc4:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <OSTaskStkChk+0xb8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003bcc:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <OSTaskStkChk+0xbc>)
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d104      	bne.n	8003be8 <OSTaskStkChk+0x4c>
        OS_EXIT_CRITICAL();
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7fc fab8 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003be4:	2343      	movs	r3, #67	; 0x43
 8003be6:	e030      	b.n	8003c4a <OSTaskStkChk+0xae>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d104      	bne.n	8003bf8 <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7fc fab0 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003bf4:	2343      	movs	r3, #67	; 0x43
 8003bf6:	e028      	b.n	8003c4a <OSTaskStkChk+0xae>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	8a1b      	ldrh	r3, [r3, #16]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <OSTaskStkChk+0x72>
        OS_EXIT_CRITICAL();
 8003c04:	6978      	ldr	r0, [r7, #20]
 8003c06:	f7fc faa5 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8003c0a:	2345      	movs	r3, #69	; 0x45
 8003c0c:	e01d      	b.n	8003c4a <OSTaskStkChk+0xae>
    }
    nfree = 0u;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8003c1e:	6978      	ldr	r0, [r7, #20]
 8003c20:	f7fc fa98 	bl	8000154 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8003c24:	e002      	b.n	8003c2c <OSTaskStkChk+0x90>
        nfree++;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	61fa      	str	r2, [r7, #28]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f6      	beq.n	8003c26 <OSTaskStkChk+0x8a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200022c0 	.word	0x200022c0
 8003c58:	20003cd0 	.word	0x20003cd0

08003c5c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8003c6a:	f7fc fa6f 	bl	800014c <OS_CPU_SR_Save>
 8003c6e:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d107      	bne.n	8003c86 <OSTaskSuspend+0x2a>
        prio = OSTCBCur->OSTCBPrio;
 8003c76:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <OSTaskSuspend+0xdc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c7e:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
 8003c84:	e00b      	b.n	8003c9e <OSTaskSuspend+0x42>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8003c86:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <OSTaskSuspend+0xdc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003c8e:	79fa      	ldrb	r2, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d102      	bne.n	8003c9a <OSTaskSuspend+0x3e>
        self = OS_TRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	e001      	b.n	8003c9e <OSTaskSuspend+0x42>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <OSTaskSuspend+0xe0>)
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d104      	bne.n	8003cb8 <OSTaskSuspend+0x5c>
        OS_EXIT_CRITICAL();
 8003cae:	6938      	ldr	r0, [r7, #16]
 8003cb0:	f7fc fa50 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8003cb4:	2348      	movs	r3, #72	; 0x48
 8003cb6:	e03a      	b.n	8003d2e <OSTaskSuspend+0xd2>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d104      	bne.n	8003cc8 <OSTaskSuspend+0x6c>
        OS_EXIT_CRITICAL();
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f7fc fa48 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003cc4:	2343      	movs	r3, #67	; 0x43
 8003cc6:	e032      	b.n	8003d2e <OSTaskSuspend+0xd2>
    }
    y            = ptcb->OSTCBY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cce:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <OSTaskSuspend+0xe4>)
 8003cd4:	5cd1      	ldrb	r1, [r2, r3]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	b2d1      	uxtb	r1, r2
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <OSTaskSuspend+0xe4>)
 8003ce8:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <OSTaskSuspend+0xe4>)
 8003cee:	5cd3      	ldrb	r3, [r2, r3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <OSTaskSuspend+0xae>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <OSTaskSuspend+0xe8>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <OSTaskSuspend+0xe8>)
 8003d08:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8003d1c:	6938      	ldr	r0, [r7, #16]
 8003d1e:	f7fc fa19 	bl	8000154 <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <OSTaskSuspend+0xd0>
        OS_Sched();                                             /* Find new highest priority task      */
 8003d28:	f7ff f956 	bl	8002fd8 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200022c0 	.word	0x200022c0
 8003d3c:	20003cd0 	.word	0x20003cd0
 8003d40:	200020b0 	.word	0x200020b0
 8003d44:	200020ac 	.word	0x200020ac

08003d48 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <OS_TaskReturn+0x18>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fad9 	bl	8002308 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8003d56:	20ff      	movs	r0, #255	; 0xff
 8003d58:	f7ff fdea 	bl	8003930 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200022c0 	.word	0x200022c0

08003d64 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8003d86:	e007      	b.n	8003d98 <OS_TaskStkClr+0x34>
                size--;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	60fa      	str	r2, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f4      	bne.n	8003d88 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <OSTimeDly+0x90>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d137      	bne.n	8003e2c <OSTimeDly+0x84>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <OSTimeDly+0x94>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d135      	bne.n	8003e30 <OSTimeDly+0x88>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d033      	beq.n	8003e32 <OSTimeDly+0x8a>
        OS_ENTER_CRITICAL();
 8003dca:	f7fc f9bf 	bl	800014c <OS_CPU_SR_Save>
 8003dce:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <OSTimeDly+0x98>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dd8:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <OSTimeDly+0x9c>)
 8003dde:	5cd1      	ldrb	r1, [r2, r3]
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <OSTimeDly+0x98>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de8:	43db      	mvns	r3, r3
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	7afb      	ldrb	r3, [r7, #11]
 8003dee:	400a      	ands	r2, r1
 8003df0:	b2d1      	uxtb	r1, r2
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <OSTimeDly+0x9c>)
 8003df4:	54d1      	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0u) {
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	4a12      	ldr	r2, [pc, #72]	; (8003e44 <OSTimeDly+0x9c>)
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <OSTimeDly+0x70>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <OSTimeDly+0x98>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <OSTimeDly+0xa0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <OSTimeDly+0xa0>)
 8003e16:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <OSTimeDly+0x98>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
        OS_EXIT_CRITICAL();
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7fc f997 	bl	8000154 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8003e26:	f7ff f8d7 	bl	8002fd8 <OS_Sched>
 8003e2a:	e002      	b.n	8003e32 <OSTimeDly+0x8a>
        return;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <OSTimeDly+0x8a>
        return;
 8003e30:	bf00      	nop
    }
}
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200022bc 	.word	0x200022bc
 8003e3c:	20001ac4 	.word	0x20001ac4
 8003e40:	200022c0 	.word	0x200022c0
 8003e44:	200020b0 	.word	0x200020b0
 8003e48:	200020ac 	.word	0x200020ac

08003e4c <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <OSTmrSignal+0x20>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fc6e 	bl	8003738 <OSSemPost>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	71fb      	strb	r3, [r7, #7]
    return (err);
 8003e60:	79fb      	ldrb	r3, [r7, #7]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20001ac8 	.word	0x20001ac8

08003e70 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8003e76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003e7a:	4838      	ldr	r0, [pc, #224]	; (8003f5c <OSTmr_Init+0xec>)
 8003e7c:	f7ff f894 	bl	8002fa8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	4837      	ldr	r0, [pc, #220]	; (8003f60 <OSTmr_Init+0xf0>)
 8003e84:	f7ff f890 	bl	8002fa8 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8003e88:	2300      	movs	r3, #0
 8003e8a:	82fb      	strh	r3, [r7, #22]
 8003e8c:	e022      	b.n	8003ed4 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8003e8e:	8afb      	ldrh	r3, [r7, #22]
 8003e90:	3301      	adds	r3, #1
 8003e92:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8003e94:	8afa      	ldrh	r2, [r7, #22]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <OSTmr_Init+0xec>)
 8003ea0:	4413      	add	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8003ea4:	89fa      	ldrh	r2, [r7, #14]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4a2b      	ldr	r2, [pc, #172]	; (8003f5c <OSTmr_Init+0xec>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2264      	movs	r2, #100	; 0x64
 8003eb8:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <OSTmr_Init+0xf4>)
 8003ecc:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	82fb      	strh	r3, [r7, #22]
 8003ed4:	8afb      	ldrh	r3, [r7, #22]
 8003ed6:	2b0e      	cmp	r3, #14
 8003ed8:	d9d9      	bls.n	8003e8e <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 8003eda:	8afa      	ldrh	r2, [r7, #22]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <OSTmr_Init+0xec>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2264      	movs	r2, #100	; 0x64
 8003eee:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <OSTmr_Init+0xf4>)
 8003f02:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <OSTmr_Init+0xf8>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <OSTmr_Init+0xfc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <OSTmr_Init+0x100>)
 8003f12:	2210      	movs	r2, #16
 8003f14:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 8003f16:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <OSTmr_Init+0x104>)
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <OSTmr_Init+0xec>)
 8003f1a:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7ff fb43 	bl	80035a8 <OSSemCreate>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b14      	ldr	r3, [pc, #80]	; (8003f78 <OSTmr_Init+0x108>)
 8003f26:	601a      	str	r2, [r3, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7ff fb3d 	bl	80035a8 <OSSemCreate>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <OSTmr_Init+0x10c>)
 8003f32:	601a      	str	r2, [r3, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <OSTmr_Init+0x108>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	1dfa      	adds	r2, r7, #7
 8003f3a:	4911      	ldr	r1, [pc, #68]	; (8003f80 <OSTmr_Init+0x110>)
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fbc3 	bl	80026c8 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <OSTmr_Init+0x10c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1dfa      	adds	r2, r7, #7
 8003f48:	490e      	ldr	r1, [pc, #56]	; (8003f84 <OSTmr_Init+0x114>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fbbc 	bl	80026c8 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8003f50:	f000 f81a 	bl	8003f88 <OSTmr_InitTask>
}
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20001b28 	.word	0x20001b28
 8003f60:	20001a84 	.word	0x20001a84
 8003f64:	08004288 	.word	0x08004288
 8003f68:	200022c4 	.word	0x200022c4
 8003f6c:	20001ad4 	.word	0x20001ad4
 8003f70:	20002030 	.word	0x20002030
 8003f74:	20001a80 	.word	0x20001a80
 8003f78:	200022cc 	.word	0x200022cc
 8003f7c:	20001ac8 	.word	0x20001ac8
 8003f80:	0800428c 	.word	0x0800428c
 8003f84:	080042a0 	.word	0x080042a0

08003f88 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8003f8e:	2303      	movs	r3, #3
 8003f90:	9304      	str	r3, [sp, #16]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9303      	str	r3, [sp, #12]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	9302      	str	r3, [sp, #8]
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <OSTmr_InitTask+0x3c>)
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	233d      	movs	r3, #61	; 0x3d
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <OSTmr_InitTask+0x40>)
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4808      	ldr	r0, [pc, #32]	; (8003fcc <OSTmr_InitTask+0x44>)
 8003fac:	f7ff fc5c 	bl	8003868 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8003fb0:	1dfb      	adds	r3, r7, #7
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4906      	ldr	r1, [pc, #24]	; (8003fd0 <OSTmr_InitTask+0x48>)
 8003fb6:	203d      	movs	r0, #61	; 0x3d
 8003fb8:	f7ff fda8 	bl	8003b0c <OSTaskNameSet>
#endif
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200020b8 	.word	0x200020b8
 8003fc8:	200022b4 	.word	0x200022b4
 8003fcc:	08004125 	.word	0x08004125
 8003fd0:	080042b4 	.word	0x080042b4

08003fd4 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <OSTmr_Link+0xb8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	615a      	str	r2, [r3, #20]
 8003ffc:	e012      	b.n	8004024 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <OSTmr_Link+0xb8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	615a      	str	r2, [r3, #20]
 8004014:	e006      	b.n	8004024 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <OSTmr_Link+0xb8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8004030:	8afb      	ldrh	r3, [r7, #22]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <OSTmr_Link+0xbc>)
 8004036:	4413      	add	r3, r2
 8004038:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <OSTmr_Link+0x82>
        pspoke->OSTmrFirst   = ptmr;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2201      	movs	r2, #1
 8004052:	809a      	strh	r2, [r3, #4]
 8004054:	e011      	b.n	800407a <OSTmr_Link+0xa6>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	889b      	ldrh	r3, [r3, #4]
 8004072:	3301      	adds	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200022c4 	.word	0x200022c4
 8004090:	20001a84 	.word	0x20001a84

08004094 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80040a8:	8afb      	ldrh	r3, [r7, #22]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <OSTmr_Unlink+0x8c>)
 80040ae:	4413      	add	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d10c      	bne.n	80040d6 <OSTmr_Unlink+0x42>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <OSTmr_Unlink+0x60>
            ptmr1->OSTmrPrev = (void *)0;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
 80040d4:	e00e      	b.n	80040f4 <OSTmr_Unlink+0x60>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <OSTmr_Unlink+0x60>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	889b      	ldrh	r3, [r3, #4]
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	809a      	strh	r2, [r3, #4]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20001a84 	.word	0x20001a84

08004124 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <OSTmr_Task+0xa0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f107 020b 	add.w	r2, r7, #11
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fa72 	bl	8003620 <OSSemPend>
        OSSchedLock();
 800413c:	f7fe fb60 	bl	8002800 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <OSTmr_Task+0xa4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <OSTmr_Task+0xa4>)
 8004148:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <OSTmr_Task+0xa4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8004156:	8b7b      	ldrh	r3, [r7, #26]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <OSTmr_Task+0xa8>)
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8004166:	e027      	b.n	80041b8 <OSTmr_Task+0x94>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <OSTmr_Task+0xa4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d11c      	bne.n	80041b4 <OSTmr_Task+0x90>
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 800417a:	69f8      	ldr	r0, [r7, #28]
 800417c:	f7ff ff8a 	bl	8004094 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004186:	2b02      	cmp	r3, #2
 8004188:	d104      	bne.n	8004194 <OSTmr_Task+0x70>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 800418a:	2101      	movs	r1, #1
 800418c:	69f8      	ldr	r0, [r7, #28]
 800418e:	f7ff ff21 	bl	8003fd4 <OSTmr_Link>
 8004192:	e003      	b.n	800419c <OSTmr_Task+0x78>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <OSTmr_Task+0x90>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4611      	mov	r1, r2
 80041b0:	69f8      	ldr	r0, [r7, #28]
 80041b2:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1d4      	bne.n	8004168 <OSTmr_Task+0x44>
        }
        OSSchedUnlock();
 80041be:	f7fe fb47 	bl	8002850 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80041c2:	e7b3      	b.n	800412c <OSTmr_Task+0x8>
 80041c4:	20001ac8 	.word	0x20001ac8
 80041c8:	200022c4 	.word	0x200022c4
 80041cc:	20001a84 	.word	0x20001a84

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	2500      	movs	r5, #0
 80041d4:	4e0c      	ldr	r6, [pc, #48]	; (8004208 <__libc_init_array+0x38>)
 80041d6:	4c0d      	ldr	r4, [pc, #52]	; (800420c <__libc_init_array+0x3c>)
 80041d8:	1ba4      	subs	r4, r4, r6
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	42a5      	cmp	r5, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	f000 f822 	bl	8004228 <_init>
 80041e4:	2500      	movs	r5, #0
 80041e6:	4e0a      	ldr	r6, [pc, #40]	; (8004210 <__libc_init_array+0x40>)
 80041e8:	4c0a      	ldr	r4, [pc, #40]	; (8004214 <__libc_init_array+0x44>)
 80041ea:	1ba4      	subs	r4, r4, r6
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	42a5      	cmp	r5, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041f8:	4798      	blx	r3
 80041fa:	3501      	adds	r5, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004202:	4798      	blx	r3
 8004204:	3501      	adds	r5, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	08004474 	.word	0x08004474
 800420c:	08004474 	.word	0x08004474
 8004210:	08004474 	.word	0x08004474
 8004214:	08004478 	.word	0x08004478

08004218 <memset>:
 8004218:	4603      	mov	r3, r0
 800421a:	4402      	add	r2, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <_init>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	bf00      	nop
 800422c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422e:	bc08      	pop	{r3}
 8004230:	469e      	mov	lr, r3
 8004232:	4770      	bx	lr

08004234 <_fini>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr
