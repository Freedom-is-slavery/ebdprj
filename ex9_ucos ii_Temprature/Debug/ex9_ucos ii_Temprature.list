
ex9_ucos ii_Temprature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039f4  080039f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d8c  2000000c  08003a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d98  08003a08  00022d98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119f3  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f2  00000000  00000000  00031a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00034220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001519a  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000865c  00000000  00000000  0004aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072d83  00000000  00000000  0005350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b0  00000000  00000000  000c630c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037cc 	.word	0x080037cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037cc 	.word	0x080037cc

0800014c <OS_CPU_SR_Save>:
@                          :
@                 }
@********************************************************************************************************
.thumb_func
OS_CPU_SR_Save:
    MRS     R0, PRIMASK                                         @ Set prio int mask to mask all (except faults)
 800014c:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 8000150:	b672      	cpsid	i
    BX      LR
 8000152:	4770      	bx	lr

08000154 <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    MSR     PRIMASK, R0
 8000154:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 8000158:	4770      	bx	lr

0800015a <OSStartHighRdy>:
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 800015a:	481f      	ldr	r0, [pc, #124]	; (80001d8 <OS_CPU_PendSVHandler_nosave+0x2e>)
    LDR     R1, =NVIC_PENDSV_PRI
 800015c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    STRB    R1, [R0]
 8000160:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000162:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000164:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000168:	481c      	ldr	r0, [pc, #112]	; (80001dc <OS_CPU_PendSVHandler_nosave+0x32>)
    LDR     R1, [R0]
 800016a:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1    
 800016c:	f381 8808 	msr	MSP, r1

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000170:	481b      	ldr	r0, [pc, #108]	; (80001e0 <OS_CPU_PendSVHandler_nosave+0x36>)
    MOVS    R1, #1
 8000172:	2101      	movs	r1, #1
    STRB    R1, [R0]
 8000174:	7001      	strb	r1, [r0, #0]
    
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000176:	481b      	ldr	r0, [pc, #108]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 8000178:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 800017c:	6001      	str	r1, [r0, #0]

    CPSIE   I                                                   @ Enable interrupts at processor level
 800017e:	b662      	cpsie	i

08000180 <OSStartHang>:

OSStartHang:
    B       OSStartHang                                         @ Should never get here
 8000180:	e7fe      	b.n	8000180 <OSStartHang>

08000182 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000182:	4818      	ldr	r0, [pc, #96]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 8000184:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000188:	6001      	str	r1, [r0, #0]
    BX      LR
 800018a:	4770      	bx	lr

0800018c <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800018c:	4815      	ldr	r0, [pc, #84]	; (80001e4 <OS_CPU_PendSVHandler_nosave+0x3a>)
    LDR     R1, =NVIC_PENDSVSET
 800018e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000192:	6001      	str	r1, [r0, #0]
    BX      LR
 8000194:	4770      	bx	lr

08000196 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000196:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000198:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 800019c:	b128      	cbz	r0, 80001aa <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
 800019e:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
 80001a0:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 80001a4:	4910      	ldr	r1, [pc, #64]	; (80001e8 <OS_CPU_PendSVHandler_nosave+0x3e>)
    LDR     R1, [R1]
 80001a6:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80001a8:	6008      	str	r0, [r1, #0]

080001aa <OS_CPU_PendSVHandler_nosave>:

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
 80001aa:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80001ac:	480f      	ldr	r0, [pc, #60]	; (80001ec <OS_CPU_PendSVHandler_nosave+0x42>)
    BLX     R0
 80001ae:	4780      	blx	r0
    POP     {R14}
 80001b0:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 80001b4:	480e      	ldr	r0, [pc, #56]	; (80001f0 <OS_CPU_PendSVHandler_nosave+0x46>)
    LDR     R1, =OSPrioHighRdy
 80001b6:	490f      	ldr	r1, [pc, #60]	; (80001f4 <OS_CPU_PendSVHandler_nosave+0x4a>)
    LDRB    R2, [R1]
 80001b8:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80001ba:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCur                                       @ OSTCBCur  = OSTCBHighRdy;
 80001bc:	480a      	ldr	r0, [pc, #40]	; (80001e8 <OS_CPU_PendSVHandler_nosave+0x3e>)
    LDR     R1, =OSTCBHighRdy
 80001be:	490e      	ldr	r1, [pc, #56]	; (80001f8 <OS_CPU_PendSVHandler_nosave+0x4e>)
    LDR     R2, [R1]
 80001c0:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 80001c2:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80001c4:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process stack
 80001c6:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
 80001ca:	3020      	adds	r0, #32
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80001cc:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0x04                                       @ Ensure exception return uses process stack
 80001d0:	f04e 0e04 	orr.w	lr, lr, #4
    CPSIE   I
 80001d4:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 80001d6:	4770      	bx	lr
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 80001d8:	e000ed22 	.word	0xe000ed22
    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001dc:	20000840 	.word	0x20000840
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001e0:	20000a91 	.word	0x20000a91
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80001e4:	e000ed04 	.word	0xe000ed04
    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 80001e8:	20001284 	.word	0x20001284
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80001ec:	080019c9 	.word	0x080019c9
    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 80001f0:	20000d6c 	.word	0x20000d6c
    LDR     R1, =OSPrioHighRdy
 80001f4:	20000a9a 	.word	0x20000a9a
    LDR     R1, =OSTCBHighRdy
 80001f8:	20001068 	.word	0x20001068

080001fc <LED_Task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_Task(void *pdata)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  while(1)
  {
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <LED_Task+0x1c>)
 800020a:	f000 fc83 	bl	8000b14 <HAL_GPIO_TogglePin>
    OSTimeDly(1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000212:	f003 f89b 	bl	800334c <OSTimeDly>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000216:	e7f5      	b.n	8000204 <LED_Task+0x8>
 8000218:	40011000 	.word	0x40011000

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 f9d2 	bl	80005c8 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f81a 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f85e 	bl	80002e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 800022c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000230:	f000 f9fc 	bl	800062c <HAL_Delay>
  OSInit();
 8000234:	f001 fd46 	bl	8001cc4 <OSInit>
  OS_CPU_SysTickInit(0XFFFFu);
 8000238:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800023c:	f001 fc08 	bl	8001a50 <OS_CPU_SysTickInit>
  OSTaskCreate(LED_Task, (void *)0, (OS_STK *)&LED_TASK_STK[LED_TASK_STK_SIZE - 1], LED_TASK_PRIO);
 8000240:	230a      	movs	r3, #10
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <main+0x38>)
 8000244:	2100      	movs	r1, #0
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <main+0x3c>)
 8000248:	f002 fd82 	bl	8002d50 <OSTaskCreate>
  OSStart();
 800024c:	f001 fe0c 	bl	8001e68 <OSStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x34>
 8000252:	bf00      	nop
 8000254:	200007f8 	.word	0x200007f8
 8000258:	080001fd 	.word	0x080001fd

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 faa6 	bl	80037bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fc4d 	bl	8000b44 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b0:	f000 f878 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 feb8 	bl	8001044 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002da:	f000 f863 	bl	80003a4 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <MX_GPIO_Init+0x90>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0x90>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0x90>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <MX_GPIO_Init+0x94>)
 800034c:	f000 fbca 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035e:	2303      	movs	r3, #3
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x94>)
 800036a:	f000 fa61 	bl	8000830 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000

08000380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d101      	bne.n	8000396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000392:	f000 f92f 	bl	80005f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40000800 	.word	0x40000800

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08c      	sub	sp, #48	; 0x30
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8000424:	2200      	movs	r2, #0
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	201e      	movs	r0, #30
 800042a:	f000 f9d6 	bl	80007da <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800042e:	201e      	movs	r0, #30
 8000430:	f000 f9ef 	bl	8000812 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <HAL_InitTick+0xa0>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	4a1e      	ldr	r2, [pc, #120]	; (80004b4 <HAL_InitTick+0xa0>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	61d3      	str	r3, [r2, #28]
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <HAL_InitTick+0xa0>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800044c:	f107 0210 	add.w	r2, r7, #16
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f000 ff5e 	bl	8001318 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800045c:	f000 ff48 	bl	80012f0 <HAL_RCC_GetPCLK1Freq>
 8000460:	4603      	mov	r3, r0
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <HAL_InitTick+0xa4>)
 800046a:	fba2 2303 	umull	r2, r3, r2, r3
 800046e:	0c9b      	lsrs	r3, r3, #18
 8000470:	3b01      	subs	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_InitTick+0xa8>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <HAL_InitTick+0xac>)
 8000478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <HAL_InitTick+0xa8>)
 800047c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000480:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_InitTick+0xa8>)
 8000484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000486:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_InitTick+0xa8>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HAL_InitTick+0xa8>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <HAL_InitTick+0xa8>)
 8000496:	f000 ff8d 	bl	80013b4 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d104      	bne.n	80004aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <HAL_InitTick+0xa8>)
 80004a2:	f000 ffbb 	bl	800141c <HAL_TIM_Base_Start_IT>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e000      	b.n	80004ac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3730      	adds	r7, #48	; 0x30
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	431bde83 	.word	0x431bde83
 80004bc:	200007fc 	.word	0x200007fc
 80004c0:	40000800 	.word	0x40000800

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <HardFault_Handler+0x4>

080004d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <MemManage_Handler+0x4>

080004dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <BusFault_Handler+0x4>

080004e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <TIM4_IRQHandler+0x10>)
 8000506:	f000 ffac 	bl	8001462 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200007fc 	.word	0x200007fc

08000514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <SystemInit+0x5c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <SystemInit+0x5c>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <SystemInit+0x5c>)
 8000526:	685a      	ldr	r2, [r3, #4]
 8000528:	4911      	ldr	r1, [pc, #68]	; (8000570 <SystemInit+0x5c>)
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <SystemInit+0x60>)
 800052c:	4013      	ands	r3, r2
 800052e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <SystemInit+0x5c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <SystemInit+0x5c>)
 8000536:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800053a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <SystemInit+0x5c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <SystemInit+0x5c>)
 8000546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SystemInit+0x5c>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <SystemInit+0x5c>)
 8000552:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000556:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <SystemInit+0x5c>)
 800055a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800055e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SystemInit+0x64>)
 8000562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000566:	609a      	str	r2, [r3, #8]
#endif 
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	40021000 	.word	0x40021000
 8000574:	f8ff0000 	.word	0xf8ff0000
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800057c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800057e:	e003      	b.n	8000588 <LoopCopyDataInit>

08000580 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000582:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000584:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000586:	3104      	adds	r1, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800058c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800058e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000590:	d3f6      	bcc.n	8000580 <CopyDataInit>
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000594:	e002      	b.n	800059c <LoopFillZerobss>

08000596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000598:	f842 3b04 	str.w	r3, [r2], #4

0800059c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800059e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005a0:	d3f9      	bcc.n	8000596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a2:	f7ff ffb7 	bl	8000514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f003 f8e5 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fe37 	bl	800021c <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r3, =_sidata
 80005b0:	080039fc 	.word	0x080039fc
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005c0:	20002d98 	.word	0x20002d98

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f8f3 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff18 	bl	8000414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff fee4 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	2000083c 	.word	0x2000083c

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	2000083c 	.word	0x2000083c

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff0 	bl	8000618 <HAL_GetTick>
 8000638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000644:	d005      	beq.n	8000652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_Delay+0x40>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000652:	bf00      	nop
 8000654:	f7ff ffe0 	bl	8000618 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <HAL_Delay+0x28>
  {
  }
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000008 	.word	0x20000008

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <__NVIC_EnableIRQ+0x34>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff4f 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff64 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ffb2 	bl	8000760 <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff81 	bl	800070c <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff57 	bl	80006d4 <__NVIC_EnableIRQ>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000842:	e127      	b.n	8000a94 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000844:	2201      	movs	r2, #1
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	429a      	cmp	r2, r3
 800085e:	f040 8116 	bne.w	8000a8e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b12      	cmp	r3, #18
 8000868:	d034      	beq.n	80008d4 <HAL_GPIO_Init+0xa4>
 800086a:	2b12      	cmp	r3, #18
 800086c:	d80d      	bhi.n	800088a <HAL_GPIO_Init+0x5a>
 800086e:	2b02      	cmp	r3, #2
 8000870:	d02b      	beq.n	80008ca <HAL_GPIO_Init+0x9a>
 8000872:	2b02      	cmp	r3, #2
 8000874:	d804      	bhi.n	8000880 <HAL_GPIO_Init+0x50>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d031      	beq.n	80008de <HAL_GPIO_Init+0xae>
 800087a:	2b01      	cmp	r3, #1
 800087c:	d01c      	beq.n	80008b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800087e:	e048      	b.n	8000912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000880:	2b03      	cmp	r3, #3
 8000882:	d043      	beq.n	800090c <HAL_GPIO_Init+0xdc>
 8000884:	2b11      	cmp	r3, #17
 8000886:	d01b      	beq.n	80008c0 <HAL_GPIO_Init+0x90>
          break;
 8000888:	e043      	b.n	8000912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800088a:	4a89      	ldr	r2, [pc, #548]	; (8000ab0 <HAL_GPIO_Init+0x280>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d026      	beq.n	80008de <HAL_GPIO_Init+0xae>
 8000890:	4a87      	ldr	r2, [pc, #540]	; (8000ab0 <HAL_GPIO_Init+0x280>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d806      	bhi.n	80008a4 <HAL_GPIO_Init+0x74>
 8000896:	4a87      	ldr	r2, [pc, #540]	; (8000ab4 <HAL_GPIO_Init+0x284>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d020      	beq.n	80008de <HAL_GPIO_Init+0xae>
 800089c:	4a86      	ldr	r2, [pc, #536]	; (8000ab8 <HAL_GPIO_Init+0x288>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d01d      	beq.n	80008de <HAL_GPIO_Init+0xae>
          break;
 80008a2:	e036      	b.n	8000912 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a4:	4a85      	ldr	r2, [pc, #532]	; (8000abc <HAL_GPIO_Init+0x28c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d019      	beq.n	80008de <HAL_GPIO_Init+0xae>
 80008aa:	4a85      	ldr	r2, [pc, #532]	; (8000ac0 <HAL_GPIO_Init+0x290>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d016      	beq.n	80008de <HAL_GPIO_Init+0xae>
 80008b0:	4a84      	ldr	r2, [pc, #528]	; (8000ac4 <HAL_GPIO_Init+0x294>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d013      	beq.n	80008de <HAL_GPIO_Init+0xae>
          break;
 80008b6:	e02c      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	623b      	str	r3, [r7, #32]
          break;
 80008be:	e028      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	3304      	adds	r3, #4
 80008c6:	623b      	str	r3, [r7, #32]
          break;
 80008c8:	e023      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	3308      	adds	r3, #8
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e01e      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	330c      	adds	r3, #12
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e019      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008e6:	2304      	movs	r3, #4
 80008e8:	623b      	str	r3, [r7, #32]
          break;
 80008ea:	e012      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d105      	bne.n	8000900 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f4:	2308      	movs	r3, #8
 80008f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	611a      	str	r2, [r3, #16]
          break;
 80008fe:	e008      	b.n	8000912 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000900:	2308      	movs	r3, #8
 8000902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	615a      	str	r2, [r3, #20]
          break;
 800090a:	e002      	b.n	8000912 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
          break;
 8000910:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	2bff      	cmp	r3, #255	; 0xff
 8000916:	d801      	bhi.n	800091c <HAL_GPIO_Init+0xec>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	e001      	b.n	8000920 <HAL_GPIO_Init+0xf0>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3304      	adds	r3, #4
 8000920:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d802      	bhi.n	800092e <HAL_GPIO_Init+0xfe>
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	e002      	b.n	8000934 <HAL_GPIO_Init+0x104>
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	3b08      	subs	r3, #8
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	210f      	movs	r1, #15
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	401a      	ands	r2, r3
 8000946:	6a39      	ldr	r1, [r7, #32]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	431a      	orrs	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 8096 	beq.w	8000a8e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000962:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <HAL_GPIO_Init+0x298>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <HAL_GPIO_Init+0x298>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b56      	ldr	r3, [pc, #344]	; (8000ac8 <HAL_GPIO_Init+0x298>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800097a:	4a54      	ldr	r2, [pc, #336]	; (8000acc <HAL_GPIO_Init+0x29c>)
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	3302      	adds	r3, #2
 8000982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000986:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4b      	ldr	r2, [pc, #300]	; (8000ad0 <HAL_GPIO_Init+0x2a0>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d013      	beq.n	80009ce <HAL_GPIO_Init+0x19e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <HAL_GPIO_Init+0x2a4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d00d      	beq.n	80009ca <HAL_GPIO_Init+0x19a>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a49      	ldr	r2, [pc, #292]	; (8000ad8 <HAL_GPIO_Init+0x2a8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d007      	beq.n	80009c6 <HAL_GPIO_Init+0x196>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2ac>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_GPIO_Init+0x192>
 80009be:	2303      	movs	r3, #3
 80009c0:	e006      	b.n	80009d0 <HAL_GPIO_Init+0x1a0>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e004      	b.n	80009d0 <HAL_GPIO_Init+0x1a0>
 80009c6:	2302      	movs	r3, #2
 80009c8:	e002      	b.n	80009d0 <HAL_GPIO_Init+0x1a0>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <HAL_GPIO_Init+0x1a0>
 80009ce:	2300      	movs	r3, #0
 80009d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d2:	f002 0203 	and.w	r2, r2, #3
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	4093      	lsls	r3, r2
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009e0:	493a      	ldr	r1, [pc, #232]	; (8000acc <HAL_GPIO_Init+0x29c>)
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d006      	beq.n	8000a08 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4938      	ldr	r1, [pc, #224]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	600b      	str	r3, [r1, #0]
 8000a06:	e006      	b.n	8000a16 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a08:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	4933      	ldr	r1, [pc, #204]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d006      	beq.n	8000a30 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	492e      	ldr	r1, [pc, #184]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	604b      	str	r3, [r1, #4]
 8000a2e:	e006      	b.n	8000a3e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	4929      	ldr	r1, [pc, #164]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	4924      	ldr	r1, [pc, #144]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	608b      	str	r3, [r1, #8]
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	491f      	ldr	r1, [pc, #124]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	491a      	ldr	r1, [pc, #104]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60cb      	str	r3, [r1, #12]
 8000a7e:	e006      	b.n	8000a8e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	3301      	adds	r3, #1
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f47f aed0 	bne.w	8000844 <HAL_GPIO_Init+0x14>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	372c      	adds	r7, #44	; 0x2c
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	10120000 	.word	0x10120000
 8000abc:	10310000 	.word	0x10310000
 8000ac0:	10320000 	.word	0x10320000
 8000ac4:	10220000 	.word	0x10220000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40010800 	.word	0x40010800
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	40011400 	.word	0x40011400
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b00:	e003      	b.n	8000b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	041a      	lsls	r2, r3, #16
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	611a      	str	r2, [r3, #16]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	887b      	ldrh	r3, [r7, #2]
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b2c:	887a      	ldrh	r2, [r7, #2]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b34:	887a      	ldrh	r2, [r7, #2]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	611a      	str	r2, [r3, #16]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e26c      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8087 	beq.w	8000c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b64:	4b92      	ldr	r3, [pc, #584]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d00c      	beq.n	8000b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b70:	4b8f      	ldr	r3, [pc, #572]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d112      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x5e>
 8000b7c:	4b8c      	ldr	r3, [pc, #560]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d10b      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8a:	4b89      	ldr	r3, [pc, #548]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d06c      	beq.n	8000c70 <HAL_RCC_OscConfig+0x12c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d168      	bne.n	8000c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e246      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000baa:	d106      	bne.n	8000bba <HAL_RCC_OscConfig+0x76>
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e02e      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10c      	bne.n	8000bdc <HAL_RCC_OscConfig+0x98>
 8000bc2:	4b7b      	ldr	r3, [pc, #492]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a7a      	ldr	r2, [pc, #488]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e01d      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be4:	d10c      	bne.n	8000c00 <HAL_RCC_OscConfig+0xbc>
 8000be6:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a71      	ldr	r2, [pc, #452]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a6e      	ldr	r2, [pc, #440]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e00b      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000c00:	4b6b      	ldr	r3, [pc, #428]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a6a      	ldr	r2, [pc, #424]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a67      	ldr	r2, [pc, #412]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d013      	beq.n	8000c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fcfa 	bl	8000618 <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c28:	f7ff fcf6 	bl	8000618 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b64      	cmp	r3, #100	; 0x64
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e1fa      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	4b5d      	ldr	r3, [pc, #372]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f0      	beq.n	8000c28 <HAL_RCC_OscConfig+0xe4>
 8000c46:	e014      	b.n	8000c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fce6 	bl	8000618 <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c50:	f7ff fce2 	bl	8000618 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b64      	cmp	r3, #100	; 0x64
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e1e6      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f0      	bne.n	8000c50 <HAL_RCC_OscConfig+0x10c>
 8000c6e:	e000      	b.n	8000c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d063      	beq.n	8000d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d11c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x18c>
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d116      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HAL_RCC_OscConfig+0x176>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d001      	beq.n	8000cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e1ba      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4939      	ldr	r1, [pc, #228]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cce:	e03a      	b.n	8000d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d020      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_RCC_OscConfig+0x270>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cde:	f7ff fc9b 	bl	8000618 <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fc97 	bl	8000618 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e19b      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f0      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4927      	ldr	r1, [pc, #156]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
 8000d18:	e015      	b.n	8000d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d20:	f7ff fc7a 	bl	8000618 <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc76 	bl	8000618 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e17a      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f0      	bne.n	8000d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d03a      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d019      	beq.n	8000d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_RCC_OscConfig+0x274>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d60:	f7ff fc5a 	bl	8000618 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc56 	bl	8000618 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e15a      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 faf6 	bl	8001378 <RCC_Delay>
 8000d8c:	e01c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_RCC_OscConfig+0x274>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc40 	bl	8000618 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d9a:	e00f      	b.n	8000dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc3c 	bl	8000618 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d908      	bls.n	8000dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e140      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	42420000 	.word	0x42420000
 8000db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	4b9e      	ldr	r3, [pc, #632]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e9      	bne.n	8000d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80a6 	beq.w	8000f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b94      	ldr	r3, [pc, #592]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a93      	ldr	r2, [pc, #588]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b91      	ldr	r3, [pc, #580]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b8e      	ldr	r3, [pc, #568]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d118      	bne.n	8000e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a8a      	ldr	r2, [pc, #552]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fbfd 	bl	8000618 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e22:	f7ff fbf9 	bl	8000618 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e0fd      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	4b81      	ldr	r3, [pc, #516]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x312>
 8000e48:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a7a      	ldr	r2, [pc, #488]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e02d      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x334>
 8000e5e:	4b76      	ldr	r3, [pc, #472]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4a75      	ldr	r2, [pc, #468]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6213      	str	r3, [r2, #32]
 8000e6a:	4b73      	ldr	r3, [pc, #460]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4a72      	ldr	r2, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	6213      	str	r3, [r2, #32]
 8000e76:	e01c      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x356>
 8000e80:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a6c      	ldr	r2, [pc, #432]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6213      	str	r3, [r2, #32]
 8000e8c:	4b6a      	ldr	r3, [pc, #424]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a69      	ldr	r2, [pc, #420]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	e00b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a66      	ldr	r2, [pc, #408]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6213      	str	r3, [r2, #32]
 8000ea6:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a63      	ldr	r2, [pc, #396]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fbad 	bl	8000618 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fba9 	bl	8000618 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0ab      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	4b57      	ldr	r3, [pc, #348]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ee      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x37e>
 8000ee4:	e014      	b.n	8000f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fb97 	bl	8000618 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fb93 	bl	8000618 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e095      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ee      	bne.n	8000eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a47      	ldr	r2, [pc, #284]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8081 	beq.w	800102e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d061      	beq.n	8000ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d146      	bne.n	8000fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb67 	bl	8000618 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb63 	bl	8000618 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e067      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d108      	bne.n	8000f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	492d      	ldr	r1, [pc, #180]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a19      	ldr	r1, [r3, #32]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	4927      	ldr	r1, [pc, #156]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb37 	bl	8000618 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fb33 	bl	8000618 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e037      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x46a>
 8000fcc:	e02f      	b.n	800102e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb20 	bl	8000618 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fdc:	f7ff fb1c 	bl	8000618 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e020      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x498>
 8000ffa:	e018      	b.n	800102e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e013      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	429a      	cmp	r2, r3
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	429a      	cmp	r2, r3
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40007000 	.word	0x40007000
 8001040:	42420060 	.word	0x42420060

08001044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0d0      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d910      	bls.n	8001088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 0207 	bic.w	r2, r3, #7
 800106e:	4965      	ldr	r1, [pc, #404]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b63      	ldr	r3, [pc, #396]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0b8      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d020      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a0:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a58      	ldr	r2, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c4:	4b50      	ldr	r3, [pc, #320]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	494d      	ldr	r1, [pc, #308]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d040      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d115      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e07f      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e073      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06b      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4936      	ldr	r1, [pc, #216]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fa70 	bl	8000618 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fa6c 	bl	8000618 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e053      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d210      	bcs.n	8001194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 0207 	bic.w	r2, r3, #7
 800117a:	4922      	ldr	r1, [pc, #136]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e032      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4916      	ldr	r1, [pc, #88]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d2:	f000 f821 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 80011d6:	4601      	mov	r1, r0
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	fa21 f303 	lsr.w	r3, r1, r3
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1cc>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RCC_ClockConfig+0x1d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f90e 	bl	8000414 <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000
 8001208:	40021000 	.word	0x40021000
 800120c:	08003868 	.word	0x08003868
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001218:	b490      	push	{r4, r7}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001220:	1d3c      	adds	r4, r7, #4
 8001222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d002      	beq.n	8001258 <HAL_RCC_GetSysClockFreq+0x40>
 8001252:	2b08      	cmp	r3, #8
 8001254:	d003      	beq.n	800125e <HAL_RCC_GetSysClockFreq+0x46>
 8001256:	e02d      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800125a:	623b      	str	r3, [r7, #32]
      break;
 800125c:	e02d      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800126a:	4413      	add	r3, r2
 800126c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001270:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	0c5b      	lsrs	r3, r3, #17
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800128a:	4413      	add	r3, r2
 800128c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001290:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001296:	fb02 f203 	mul.w	r2, r2, r3
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	e004      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	623b      	str	r3, [r7, #32]
      break;
 80012b2:	e002      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012b6:	623b      	str	r3, [r7, #32]
      break;
 80012b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc90      	pop	{r4, r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	080037e4 	.word	0x080037e4
 80012cc:	080037f4 	.word	0x080037f4
 80012d0:	40021000 	.word	0x40021000
 80012d4:	007a1200 	.word	0x007a1200
 80012d8:	003d0900 	.word	0x003d0900

080012dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_RCC_GetHCLKFreq+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f4:	f7ff fff2 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 80012f8:	4601      	mov	r1, r0
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001306:	5cd3      	ldrb	r3, [r2, r3]
 8001308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	08003878 	.word	0x08003878

08001318 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	220f      	movs	r2, #15
 8001326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_RCC_GetClockConfig+0x58>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0203 	and.w	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_RCC_GetClockConfig+0x58>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_GetClockConfig+0x58>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_RCC_GetClockConfig+0x58>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_RCC_GetClockConfig+0x5c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0207 	and.w	r2, r3, #7
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40022000 	.word	0x40022000

08001378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <RCC_Delay+0x34>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <RCC_Delay+0x38>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0a5b      	lsrs	r3, r3, #9
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001394:	bf00      	nop
  }
  while (Delay --);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f9      	bne.n	8001394 <RCC_Delay+0x1c>
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000
 80013b0:	10624dd3 	.word	0x10624dd3

080013b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e01d      	b.n	8001402 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f815 	bl	800140a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3304      	adds	r3, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f000 f962 	bl	80016bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b06      	cmp	r3, #6
 8001444:	d007      	beq.n	8001456 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b02      	cmp	r3, #2
 8001476:	d122      	bne.n	80014be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d11b      	bne.n	80014be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f06f 0202 	mvn.w	r2, #2
 800148e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f8ed 	bl	8001684 <HAL_TIM_IC_CaptureCallback>
 80014aa:	e005      	b.n	80014b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8e0 	bl	8001672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8ef 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d122      	bne.n	8001512 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d11b      	bne.n	8001512 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0204 	mvn.w	r2, #4
 80014e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8c3 	bl	8001684 <HAL_TIM_IC_CaptureCallback>
 80014fe:	e005      	b.n	800150c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f8b6 	bl	8001672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f8c5 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b08      	cmp	r3, #8
 800151e:	d122      	bne.n	8001566 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b08      	cmp	r3, #8
 800152c:	d11b      	bne.n	8001566 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f06f 0208 	mvn.w	r2, #8
 8001536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2204      	movs	r2, #4
 800153c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f899 	bl	8001684 <HAL_TIM_IC_CaptureCallback>
 8001552:	e005      	b.n	8001560 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f88c 	bl	8001672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f89b 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b10      	cmp	r3, #16
 8001572:	d122      	bne.n	80015ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b10      	cmp	r3, #16
 8001580:	d11b      	bne.n	80015ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f06f 0210 	mvn.w	r2, #16
 800158a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2208      	movs	r2, #8
 8001590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f86f 	bl	8001684 <HAL_TIM_IC_CaptureCallback>
 80015a6:	e005      	b.n	80015b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f862 	bl	8001672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f871 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10e      	bne.n	80015e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f06f 0201 	mvn.w	r2, #1
 80015de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7fe fecd 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f0:	2b80      	cmp	r3, #128	; 0x80
 80015f2:	d10e      	bne.n	8001612 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	2b80      	cmp	r3, #128	; 0x80
 8001600:	d107      	bne.n	8001612 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800160a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8c0 	bl	8001792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b40      	cmp	r3, #64	; 0x40
 800161e:	d10e      	bne.n	800163e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	2b40      	cmp	r3, #64	; 0x40
 800162c:	d107      	bne.n	800163e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f835 	bl	80016a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b20      	cmp	r3, #32
 800164a:	d10e      	bne.n	800166a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	2b20      	cmp	r3, #32
 8001658:	d107      	bne.n	800166a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f06f 0220 	mvn.w	r2, #32
 8001662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f88b 	bl	8001780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a29      	ldr	r2, [pc, #164]	; (8001774 <TIM_Base_SetConfig+0xb8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00b      	beq.n	80016ec <TIM_Base_SetConfig+0x30>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016da:	d007      	beq.n	80016ec <TIM_Base_SetConfig+0x30>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a26      	ldr	r2, [pc, #152]	; (8001778 <TIM_Base_SetConfig+0xbc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d003      	beq.n	80016ec <TIM_Base_SetConfig+0x30>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a25      	ldr	r2, [pc, #148]	; (800177c <TIM_Base_SetConfig+0xc0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d108      	bne.n	80016fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <TIM_Base_SetConfig+0xb8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00b      	beq.n	800171e <TIM_Base_SetConfig+0x62>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d007      	beq.n	800171e <TIM_Base_SetConfig+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <TIM_Base_SetConfig+0xbc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d003      	beq.n	800171e <TIM_Base_SetConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <TIM_Base_SetConfig+0xc0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d108      	bne.n	8001730 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <TIM_Base_SetConfig+0xb8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d103      	bne.n	8001764 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	615a      	str	r2, [r3, #20]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40012c00 	.word	0x40012c00
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800

08001780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <App_TaskCreateHook>:
*********************************************************************************************************
*/

#if (OS_APP_HOOKS_EN > 0)
void  App_TaskCreateHook (OS_TCB *ptcb)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#else
    (void)ptcb;
#endif
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <App_TaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <App_TaskReturnHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <App_TaskStatHook>:
* Returns    : none
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
#if (uC_PROBE_OS_PLUGIN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
    INT32U   size;
    OS_STK  *pstk;

                                                           /* Clear exception stack for stack checking.*/
    pstk = &OS_CPU_ExceptStk[0];
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <OSInitHookBegin+0x3c>)
 8001824:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 800182a:	e007      	b.n	800183c <OSInitHookBegin+0x20>
        size--;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	1d1a      	adds	r2, r3, #4
 8001836:	603a      	str	r2, [r7, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f4      	bne.n	800182c <OSInitHookBegin+0x10>
    }

    OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <OSInitHookBegin+0x40>)
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <OSInitHookBegin+0x44>)
 8001846:	601a      	str	r2, [r3, #0]

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <OSInitHookBegin+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	801a      	strh	r2, [r3, #0]
#endif
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000844 	.word	0x20000844
 800185c:	20000840 	.word	0x20000840
 8001860:	20000a40 	.word	0x20000a40
 8001864:	20000028 	.word	0x20000028

08001868 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff91 	bl	80017a4 <App_TaskCreateHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff8f 	bl	80017b6 <App_TaskDelHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 80018a4:	f7ff ff90 	bl	80017c8 <App_TaskIdleHook>
#endif
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff8d 	bl	80017d4 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80018c6:	f7ff ff8e 	bl	80017e6 <App_TaskStatHook>
#endif
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <OSTaskStkInit>:
*              2) All tasks run in Thread mode, using process stack.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	807b      	strh	r3, [r7, #2]
    OS_STK *stk;


    (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    stk       = ptos;                            /* Load stack pointer                                 */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	617b      	str	r3, [r7, #20]

                                                 /* Registers stacked as if auto-saved on exception    */
    *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e8:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3b04      	subs	r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3b04      	subs	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	4a31      	ldr	r2, [pc, #196]	; (80019c4 <OSTaskStkInit+0xf4>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3b04      	subs	r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800190e:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3b04      	subs	r3, #4
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800191c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3b04      	subs	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800192a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3b04      	subs	r3, #4
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8001938:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3b04      	subs	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]

                                                 /* Remaining registers saved on process stack         */
    *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3b04      	subs	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001952:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3b04      	subs	r3, #4
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8001960:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3b04      	subs	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800196e:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3b04      	subs	r3, #4
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800197c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3b04      	subs	r3, #4
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800198a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3b04      	subs	r3, #4
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8001998:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3b04      	subs	r3, #4
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80019a6:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3b04      	subs	r3, #4
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80019b4:	601a      	str	r2, [r3, #0]

    return (stk);
 80019b6:	697b      	ldr	r3, [r7, #20]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	080032ed 	.word	0x080032ed

080019c8 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80019cc:	f7ff ff11 	bl	80017f2 <App_TaskSwHook>
#endif
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff0e 	bl	80017fe <App_TCBInitHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 80019f0:	f7ff ff0e 	bl	8001810 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <OSTimeTickHook+0x2c>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <OSTimeTickHook+0x2c>)
 80019fe:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <OSTimeTickHook+0x2c>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b63      	cmp	r3, #99	; 0x63
 8001a06:	d904      	bls.n	8001a12 <OSTimeTickHook+0x26>
        OSTmrCtr = 0;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <OSTimeTickHook+0x2c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8001a0e:	f001 fcef 	bl	80033f0 <OSTmrSignal>
    }
#endif
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000028 	.word	0x20000028

08001a1c <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
    OS_CPU_SR  cpu_sr;


    OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
 8001a22:	f7fe fb93 	bl	800014c <OS_CPU_SR_Save>
 8001a26:	6078      	str	r0, [r7, #4]
    OSIntNesting++;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <OS_CPU_SysTickHandler+0x30>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <OS_CPU_SysTickHandler+0x30>)
 8001a32:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7fe fb8d 	bl	8000154 <OS_CPU_SR_Restore>

    OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
 8001a3a:	f000 fa3d 	bl	8001eb8 <OSTimeTick>

    OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
 8001a3e:	f000 f95f 	bl	8001d00 <OSIntExit>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20001280 	.word	0x20001280

08001a50 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
 8001a58:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <OS_CPU_SysTickInit+0x38>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	6013      	str	r3, [r2, #0]
                                                 /* Set prio of SysTick handler to min prio.           */
    OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <OS_CPU_SysTickInit+0x3c>)
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	701a      	strb	r2, [r3, #0]
                                                 /* Enable timer.                                      */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <OS_CPU_SysTickInit+0x40>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <OS_CPU_SysTickInit+0x40>)
 8001a6c:	f043 0305 	orr.w	r3, r3, #5
 8001a70:	6013      	str	r3, [r2, #0]
                                                 /* Enable timer interrupt.                            */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <OS_CPU_SysTickInit+0x40>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <OS_CPU_SysTickInit+0x40>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6013      	str	r3, [r2, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	e000e014 	.word	0xe000e014
 8001a8c:	e000ed23 	.word	0xe000ed23
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <OSDebugInit+0xf4>)
 8001a9c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <OSDebugInit+0xf8>)
 8001aa0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <OSDebugInit+0xfc>)
 8001aa4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <OSDebugInit+0x100>)
 8001aa8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <OSDebugInit+0x104>)
 8001aac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <OSDebugInit+0x108>)
 8001ab0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <OSDebugInit+0x10c>)
 8001ab4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <OSDebugInit+0x110>)
 8001ab8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <OSDebugInit+0x114>)
 8001abc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <OSDebugInit+0x118>)
 8001ac0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <OSDebugInit+0x11c>)
 8001ac4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <OSDebugInit+0x120>)
 8001ac8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <OSDebugInit+0x124>)
 8001acc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <OSDebugInit+0x128>)
 8001ad0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <OSDebugInit+0x12c>)
 8001ad4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <OSDebugInit+0x130>)
 8001ad8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <OSDebugInit+0x134>)
 8001adc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <OSDebugInit+0x138>)
 8001ae0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <OSDebugInit+0x13c>)
 8001ae4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <OSDebugInit+0x140>)
 8001ae8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <OSDebugInit+0x144>)
 8001aec:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <OSDebugInit+0x148>)
 8001af0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <OSDebugInit+0x14c>)
 8001af4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <OSDebugInit+0x150>)
 8001af8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8001afa:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <OSDebugInit+0x154>)
 8001afc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <OSDebugInit+0x158>)
 8001b00:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <OSDebugInit+0x15c>)
 8001b04:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <OSDebugInit+0x160>)
 8001b08:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <OSDebugInit+0x164>)
 8001b0c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <OSDebugInit+0x168>)
 8001b10:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <OSDebugInit+0x16c>)
 8001b14:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <OSDebugInit+0x170>)
 8001b18:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <OSDebugInit+0x174>)
 8001b1c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <OSDebugInit+0x178>)
 8001b20:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <OSDebugInit+0x17c>)
 8001b24:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <OSDebugInit+0x180>)
 8001b28:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <OSDebugInit+0x184>)
 8001b2c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <OSDebugInit+0x188>)
 8001b30:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <OSDebugInit+0x18c>)
 8001b34:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8001b36:	4b3b      	ldr	r3, [pc, #236]	; (8001c24 <OSDebugInit+0x190>)
 8001b38:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <OSDebugInit+0x194>)
 8001b3c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <OSDebugInit+0x198>)
 8001b40:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <OSDebugInit+0x19c>)
 8001b44:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <OSDebugInit+0x1a0>)
 8001b48:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <OSDebugInit+0x1a4>)
 8001b4c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <OSDebugInit+0x1a8>)
 8001b50:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <OSDebugInit+0x1ac>)
 8001b54:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <OSDebugInit+0x1b0>)
 8001b58:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <OSDebugInit+0x1b4>)
 8001b5c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <OSDebugInit+0x1b8>)
 8001b60:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <OSDebugInit+0x1bc>)
 8001b64:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <OSDebugInit+0x1c0>)
 8001b68:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <OSDebugInit+0x1c4>)
 8001b6c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <OSDebugInit+0x1c8>)
 8001b70:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <OSDebugInit+0x1cc>)
 8001b74:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <OSDebugInit+0x1d0>)
 8001b78:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <OSDebugInit+0x1d4>)
 8001b7c:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	08003880 	.word	0x08003880
 8001b8c:	08003884 	.word	0x08003884
 8001b90:	0800388a 	.word	0x0800388a
 8001b94:	0800388c 	.word	0x0800388c
 8001b98:	08003888 	.word	0x08003888
 8001b9c:	0800388e 	.word	0x0800388e
 8001ba0:	08003890 	.word	0x08003890
 8001ba4:	08003892 	.word	0x08003892
 8001ba8:	08003894 	.word	0x08003894
 8001bac:	08003896 	.word	0x08003896
 8001bb0:	08003898 	.word	0x08003898
 8001bb4:	0800389a 	.word	0x0800389a
 8001bb8:	0800389c 	.word	0x0800389c
 8001bbc:	0800389e 	.word	0x0800389e
 8001bc0:	080038a0 	.word	0x080038a0
 8001bc4:	080038a2 	.word	0x080038a2
 8001bc8:	080038a4 	.word	0x080038a4
 8001bcc:	080038a6 	.word	0x080038a6
 8001bd0:	080038a8 	.word	0x080038a8
 8001bd4:	080038aa 	.word	0x080038aa
 8001bd8:	080038ac 	.word	0x080038ac
 8001bdc:	080038ae 	.word	0x080038ae
 8001be0:	080038b0 	.word	0x080038b0
 8001be4:	080038b2 	.word	0x080038b2
 8001be8:	080038b4 	.word	0x080038b4
 8001bec:	080038b6 	.word	0x080038b6
 8001bf0:	080038b8 	.word	0x080038b8
 8001bf4:	080038ba 	.word	0x080038ba
 8001bf8:	080038bc 	.word	0x080038bc
 8001bfc:	080038be 	.word	0x080038be
 8001c00:	080038c0 	.word	0x080038c0
 8001c04:	080038c2 	.word	0x080038c2
 8001c08:	080038c4 	.word	0x080038c4
 8001c0c:	080038c6 	.word	0x080038c6
 8001c10:	080038c8 	.word	0x080038c8
 8001c14:	080038ca 	.word	0x080038ca
 8001c18:	080038cc 	.word	0x080038cc
 8001c1c:	080038ce 	.word	0x080038ce
 8001c20:	080038d0 	.word	0x080038d0
 8001c24:	080038d2 	.word	0x080038d2
 8001c28:	080038d4 	.word	0x080038d4
 8001c2c:	080038d6 	.word	0x080038d6
 8001c30:	080038d8 	.word	0x080038d8
 8001c34:	080038da 	.word	0x080038da
 8001c38:	20000aec 	.word	0x20000aec
 8001c3c:	20000a48 	.word	0x20000a48
 8001c40:	080038de 	.word	0x080038de
 8001c44:	080038e0 	.word	0x080038e0
 8001c48:	080038e2 	.word	0x080038e2
 8001c4c:	080038e4 	.word	0x080038e4
 8001c50:	080038e6 	.word	0x080038e6
 8001c54:	080038e8 	.word	0x080038e8
 8001c58:	080038ea 	.word	0x080038ea
 8001c5c:	080038ec 	.word	0x080038ec
 8001c60:	080038ee 	.word	0x080038ee
 8001c64:	080038dc 	.word	0x080038dc
 8001c68:	080038f0 	.word	0x080038f0

08001c6c <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <OSEventNameSet+0x54>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <OSEventNameSet+0x20>
        *perr = OS_ERR_NAME_SET_ISR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2212      	movs	r2, #18
 8001c88:	701a      	strb	r2, [r3, #0]
        return;
 8001c8a:	e015      	b.n	8001cb8 <OSEventNameSet+0x4c>
    }
    switch (pevent->OSEventType) {
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d903      	bls.n	8001c9e <OSEventNameSet+0x32>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
             return;
 8001c9c:	e00c      	b.n	8001cb8 <OSEventNameSet+0x4c>
             break;
 8001c9e:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8001ca0:	f7fe fa54 	bl	800014c <OS_CPU_SR_Save>
 8001ca4:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8001cac:	6978      	ldr	r0, [r7, #20]
 8001cae:	f7fe fa51 	bl	8000154 <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
}
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20001280 	.word	0x20001280

08001cc4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8001cc8:	f7ff fda8 	bl	800181c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8001ccc:	f000 fb36 	bl	800233c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8001cd0:	f000 fb72 	bl	80023b8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8001cd4:	f000 fbec 	bl	80024b0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8001cd8:	f000 fae4 	bl	80022a4 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8001cdc:	f000 fe4a 	bl	8002974 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8001ce0:	f000 feb8 	bl	8002a54 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8001ce4:	f000 fef6 	bl	8002ad4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8001ce8:	f000 fb96 	bl	8002418 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8001cec:	f000 fbba 	bl	8002464 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8001cf0:	f001 fb90 	bl	8003414 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8001cf4:	f7ff fdb8 	bl	8001868 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8001cf8:	f7ff fecc 	bl	8001a94 <OSDebugInit>
#endif
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <OSIntExit+0x84>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d133      	bne.n	8001d7a <OSIntExit+0x7a>
        OS_ENTER_CRITICAL();
 8001d12:	f7fe fa1b 	bl	800014c <OS_CPU_SR_Save>
 8001d16:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <OSIntExit+0x88>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <OSIntExit+0x2c>
            OSIntNesting--;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <OSIntExit+0x88>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <OSIntExit+0x88>)
 8001d2a:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <OSIntExit+0x88>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d11f      	bne.n	8001d74 <OSIntExit+0x74>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <OSIntExit+0x8c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11b      	bne.n	8001d74 <OSIntExit+0x74>
                OS_SchedNew();
 8001d3c:	f000 fc60 	bl	8002600 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <OSIntExit+0x90>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <OSIntExit+0x94>)
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <OSIntExit+0x98>)
 8001d4e:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <OSIntExit+0x90>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <OSIntExit+0x9c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d00b      	beq.n	8001d74 <OSIntExit+0x74>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <OSIntExit+0x98>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d62:	3201      	adds	r2, #1
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <OSIntExit+0xa0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <OSIntExit+0xa0>)
 8001d6e:	6013      	str	r3, [r2, #0]
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8001d70:	f7fe fa0c 	bl	800018c <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe f9ed 	bl	8000154 <OS_CPU_SR_Restore>
    }
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000a91 	.word	0x20000a91
 8001d88:	20001280 	.word	0x20001280
 8001d8c:	20000a88 	.word	0x20000a88
 8001d90:	20000a9a 	.word	0x20000a9a
 8001d94:	20002c94 	.word	0x20002c94
 8001d98:	20001068 	.word	0x20001068
 8001d9c:	20000d6c 	.word	0x20000d6c
 8001da0:	20000ff0 	.word	0x20000ff0

08001da4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <OSSchedLock+0x44>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d113      	bne.n	8001dde <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
 8001db6:	f7fe f9c9 	bl	800014c <OS_CPU_SR_Save>
 8001dba:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <OSSchedLock+0x48>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <OSSchedLock+0x4c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2bff      	cmp	r3, #255	; 0xff
 8001dca:	d005      	beq.n	8001dd8 <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <OSSchedLock+0x4c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <OSSchedLock+0x4c>)
 8001dd6:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7fe f9bb 	bl	8000154 <OS_CPU_SR_Restore>
    }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000a91 	.word	0x20000a91
 8001dec:	20001280 	.word	0x20001280
 8001df0:	20000a88 	.word	0x20000a88

08001df4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <OSSchedUnlock+0x68>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d125      	bne.n	8001e52 <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
 8001e06:	f7fe f9a1 	bl	800014c <OS_CPU_SR_Save>
 8001e0a:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <OSSchedUnlock+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11b      	bne.n	8001e4c <OSSchedUnlock+0x58>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <OSSchedUnlock+0x70>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <OSSchedUnlock+0x50>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <OSSchedUnlock+0x70>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <OSSchedUnlock+0x70>)
 8001e26:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <OSSchedUnlock+0x70>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d105      	bne.n	8001e3c <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe f98f 	bl	8000154 <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8001e36:	f000 fba1 	bl	800257c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8001e3a:	e00a      	b.n	8001e52 <OSSchedUnlock+0x5e>
                    OS_EXIT_CRITICAL();
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe f989 	bl	8000154 <OS_CPU_SR_Restore>
}
 8001e42:	e006      	b.n	8001e52 <OSSchedUnlock+0x5e>
                OS_EXIT_CRITICAL();
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe f985 	bl	8000154 <OS_CPU_SR_Restore>
}
 8001e4a:	e002      	b.n	8001e52 <OSSchedUnlock+0x5e>
            OS_EXIT_CRITICAL();
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe f981 	bl	8000154 <OS_CPU_SR_Restore>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000a91 	.word	0x20000a91
 8001e60:	20001280 	.word	0x20001280
 8001e64:	20000a88 	.word	0x20000a88

08001e68 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <OSStart+0x38>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d113      	bne.n	8001e9c <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8001e74:	f000 fbc4 	bl	8002600 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <OSStart+0x3c>)
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <OSStart+0x40>)
 8001e7e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <OSStart+0x3c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <OSStart+0x44>)
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <OSStart+0x48>)
 8001e8e:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <OSStart+0x48>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <OSStart+0x4c>)
 8001e96:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8001e98:	f7fe f95f 	bl	800015a <OSStartHighRdy>
    }
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000a91 	.word	0x20000a91
 8001ea4:	20000a9a 	.word	0x20000a9a
 8001ea8:	20000d6c 	.word	0x20000d6c
 8001eac:	20002c94 	.word	0x20002c94
 8001eb0:	20001068 	.word	0x20001068
 8001eb4:	20001284 	.word	0x20001284

08001eb8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8001ec2:	f7ff fd93 	bl	80019ec <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8001ec6:	f7fe f941 	bl	800014c <OS_CPU_SR_Save>
 8001eca:	6078      	str	r0, [r7, #4]
    OSTime++;
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <OSTimeTick+0x120>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <OSTimeTick+0x120>)
 8001ed4:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe f93c 	bl	8000154 <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8001edc:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <OSTimeTick+0x124>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d176      	bne.n	8001fd2 <OSTimeTick+0x11a>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8001ee4:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <OSTimeTick+0x128>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d006      	beq.n	8001efa <OSTimeTick+0x42>
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d007      	beq.n	8001f00 <OSTimeTick+0x48>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <OSTimeTick+0x54>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	72fb      	strb	r3, [r7, #11]
                 break;
 8001ef8:	e00e      	b.n	8001f18 <OSTimeTick+0x60>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8001efa:	2300      	movs	r3, #0
 8001efc:	72fb      	strb	r3, [r7, #11]
                 break;
 8001efe:	e00b      	b.n	8001f18 <OSTimeTick+0x60>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8001f00:	2301      	movs	r3, #1
 8001f02:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <OSTimeTick+0x128>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
                 break;
 8001f0a:	e005      	b.n	8001f18 <OSTimeTick+0x60>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <OSTimeTick+0x128>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
                 break;
 8001f16:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d058      	beq.n	8001fd0 <OSTimeTick+0x118>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <OSTimeTick+0x12c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8001f24:	e04e      	b.n	8001fc4 <OSTimeTick+0x10c>
            OS_ENTER_CRITICAL();
 8001f26:	f7fe f911 	bl	800014c <OS_CPU_SR_Save>
 8001f2a:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d041      	beq.n	8001fb8 <OSTimeTick+0x100>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d138      	bne.n	8001fb8 <OSTimeTick+0x100>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4c:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00d      	beq.n	8001f70 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001f6e:	e003      	b.n	8001f78 <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d118      	bne.n	8001fb8 <OSTimeTick+0x100>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <OSTimeTick+0x130>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <OSTimeTick+0x130>)
 8001f96:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <OSTimeTick+0x134>)
 8001fa2:	5c9a      	ldrb	r2, [r3, r2]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <OSTimeTick+0x134>)
 8001fb6:	545a      	strb	r2, [r3, r1]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe f8c8 	bl	8000154 <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001fca:	2b3f      	cmp	r3, #63	; 0x3f
 8001fcc:	d1ab      	bne.n	8001f26 <OSTimeTick+0x6e>
 8001fce:	e000      	b.n	8001fd2 <OSTimeTick+0x11a>
            return;
 8001fd0:	bf00      	nop
        }
    }
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000128c 	.word	0x2000128c
 8001fdc:	20000a91 	.word	0x20000a91
 8001fe0:	20000dec 	.word	0x20000dec
 8001fe4:	20000d70 	.word	0x20000d70
 8001fe8:	20001070 	.word	0x20001070
 8001fec:	20001074 	.word	0x20001074

08001ff0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	460b      	mov	r3, r1
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	4613      	mov	r3, r2
 8002010:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	7a9b      	ldrb	r3, [r3, #10]
 8002016:	461a      	mov	r2, r3
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <OS_EventTaskRdy+0xd4>)
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	7adb      	ldrb	r3, [r3, #11]
 8002026:	461a      	mov	r2, r3
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <OS_EventTaskRdy+0xd4>)
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 800202e:	7dfb      	ldrb	r3, [r7, #23]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	b2da      	uxtb	r2, r3
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	4413      	add	r3, r2
 8002038:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800203a:	7d7b      	ldrb	r3, [r7, #21]
 800203c:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <OS_EventTaskRdy+0xd8>)
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	43db      	mvns	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4013      	ands	r3, r2
 800205e:	b2da      	uxtb	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	79ba      	ldrb	r2, [r7, #6]
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d113      	bne.n	80020a4 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <OS_EventTaskRdy+0xdc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <OS_EventTaskRdy+0xdc>)
 800208c:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <OS_EventTaskRdy+0xe0>)
 8002092:	5cd1      	ldrb	r1, [r2, r3]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	430a      	orrs	r2, r1
 800209e:	b2d1      	uxtb	r1, r2
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <OS_EventTaskRdy+0xe0>)
 80020a2:	54d1      	strb	r1, [r2, r3]
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	6938      	ldr	r0, [r7, #16]
 80020a8:	f000 f870 	bl	800218c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6938      	ldr	r0, [r7, #16]
 80020bc:	f000 f895 	bl	80021ea <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 80020c6:	7d7b      	ldrb	r3, [r7, #21]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	080038f4 	.word	0x080038f4
 80020d4:	20002c94 	.word	0x20002c94
 80020d8:	20001070 	.word	0x20001070
 80020dc:	20001074 	.word	0x20001074

080020e0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <OS_EventTaskWait+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <OS_EventTaskWait+0xa0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	7ada      	ldrb	r2, [r3, #11]
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <OS_EventTaskWait+0xa0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002108:	491d      	ldr	r1, [pc, #116]	; (8002180 <OS_EventTaskWait+0xa0>)
 800210a:	6809      	ldr	r1, [r1, #0]
 800210c:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8002110:	4313      	orrs	r3, r2
 8002112:	b2da      	uxtb	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	440b      	add	r3, r1
 8002118:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7a9a      	ldrb	r2, [r3, #10]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <OS_EventTaskWait+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002126:	4313      	orrs	r3, r2
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <OS_EventTaskWait+0xa0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002136:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <OS_EventTaskWait+0xa4>)
 800213c:	5cd1      	ldrb	r1, [r2, r3]
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <OS_EventTaskWait+0xa0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002146:	43db      	mvns	r3, r3
 8002148:	b2da      	uxtb	r2, r3
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	400a      	ands	r2, r1
 800214e:	b2d1      	uxtb	r1, r2
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <OS_EventTaskWait+0xa4>)
 8002152:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <OS_EventTaskWait+0xa4>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <OS_EventTaskWait+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002166:	43db      	mvns	r3, r3
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <OS_EventTaskWait+0xa8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4013      	ands	r3, r2
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <OS_EventTaskWait+0xa8>)
 8002174:	701a      	strb	r2, [r3, #0]
    }
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20001284 	.word	0x20001284
 8002184:	20001074 	.word	0x20001074
 8002188:	20001070 	.word	0x20001070

0800218c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219c:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	7ad9      	ldrb	r1, [r3, #11]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ac:	43db      	mvns	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	400a      	ands	r2, r1
 80021b4:	b2d1      	uxtb	r1, r2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	460a      	mov	r2, r1
 80021bc:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	7adb      	ldrb	r3, [r3, #11]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7a9a      	ldrb	r2, [r3, #10]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021d4:	43db      	mvns	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	729a      	strb	r2, [r3, #10]
    }
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b087      	sub	sp, #28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021fa:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002202:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800220a:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8002216:	e022      	b.n	800225e <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	7ad9      	ldrb	r1, [r3, #11]
 8002220:	7b7b      	ldrb	r3, [r7, #13]
 8002222:	43db      	mvns	r3, r3
 8002224:	b2da      	uxtb	r2, r3
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	400a      	ands	r2, r1
 800222a:	b2d1      	uxtb	r1, r2
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	460a      	mov	r2, r1
 8002232:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	7adb      	ldrb	r3, [r3, #11]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	7a9a      	ldrb	r2, [r3, #10]
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	43db      	mvns	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4013      	ands	r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1d9      	bne.n	8002218 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e007      	b.n	8002292 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	2200      	movs	r2, #0
 800228a:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d9f4      	bls.n	8002282 <OS_EventWaitListInit+0x14>
    }
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
	...

080022a4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 80022aa:	f241 0168 	movw	r1, #4200	; 0x1068
 80022ae:	4820      	ldr	r0, [pc, #128]	; (8002330 <OS_InitEventList+0x8c>)
 80022b0:	f000 f94c 	bl	800254c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80022b4:	2300      	movs	r3, #0
 80022b6:	81fb      	strh	r3, [r7, #14]
 80022b8:	e01e      	b.n	80022f8 <OS_InitEventList+0x54>
        ix_next = ix + 1u;
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	3301      	adds	r3, #1
 80022be:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 80022c0:	89fa      	ldrh	r2, [r7, #14]
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <OS_InitEventList+0x8c>)
 80022cc:	4413      	add	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <OS_InitEventList+0x8c>)
 80022dc:	4413      	add	r3, r2
 80022de:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <OS_InitEventList+0x90>)
 80022f0:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	3301      	adds	r3, #1
 80022f6:	81fb      	strh	r3, [r7, #14]
 80022f8:	89fb      	ldrh	r3, [r7, #14]
 80022fa:	2bad      	cmp	r3, #173	; 0xad
 80022fc:	d9dd      	bls.n	80022ba <OS_InitEventList+0x16>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 80022fe:	89fa      	ldrh	r2, [r7, #14]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4a09      	ldr	r2, [pc, #36]	; (8002330 <OS_InitEventList+0x8c>)
 800230a:	4413      	add	r3, r2
 800230c:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4a05      	ldr	r2, [pc, #20]	; (8002334 <OS_InitEventList+0x90>)
 800231e:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <OS_InitEventList+0x94>)
 8002322:	4a03      	ldr	r2, [pc, #12]	; (8002330 <OS_InitEventList+0x8c>)
 8002324:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20001494 	.word	0x20001494
 8002334:	080037f8 	.word	0x080037f8
 8002338:	2000127c 	.word	0x2000127c

0800233c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <OS_InitMisc+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <OS_InitMisc+0x54>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <OS_InitMisc+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <OS_InitMisc+0x5c>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <OS_InitMisc+0x60>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <OS_InitMisc+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <OS_InitMisc+0x68>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <OS_InitMisc+0x6c>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <OS_InitMisc+0x70>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <OS_InitMisc+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <OS_InitMisc+0x78>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
#endif
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	2000128c 	.word	0x2000128c
 8002390:	20001280 	.word	0x20001280
 8002394:	20000a88 	.word	0x20000a88
 8002398:	20001001 	.word	0x20001001
 800239c:	20000a91 	.word	0x20000a91
 80023a0:	20000ff0 	.word	0x20000ff0
 80023a4:	20000a94 	.word	0x20000a94
 80023a8:	20002d94 	.word	0x20002d94
 80023ac:	20000ff8 	.word	0x20000ff8
 80023b0:	20002c90 	.word	0x20002c90
 80023b4:	20000a90 	.word	0x20000a90

080023b8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <OS_InitRdyList+0x48>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	71fb      	strb	r3, [r7, #7]
 80023c8:	e006      	b.n	80023d8 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <OS_InitRdyList+0x4c>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	3301      	adds	r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	d9f5      	bls.n	80023ca <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <OS_InitRdyList+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <OS_InitRdyList+0x54>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <OS_InitRdyList+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <OS_InitRdyList+0x5c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20001070 	.word	0x20001070
 8002404:	20001074 	.word	0x20001074
 8002408:	20000d6c 	.word	0x20000d6c
 800240c:	20000a9a 	.word	0x20000a9a
 8002410:	20001068 	.word	0x20001068
 8002414:	20001284 	.word	0x20001284

08002418 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800241e:	2303      	movs	r3, #3
 8002420:	9304      	str	r3, [sp, #16]
 8002422:	2300      	movs	r3, #0
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <OS_InitTaskIdle+0x3c>)
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	233f      	movs	r3, #63	; 0x3f
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <OS_InitTaskIdle+0x40>)
 8002438:	2100      	movs	r1, #0
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <OS_InitTaskIdle+0x44>)
 800243c:	f000 fce6 	bl	8002e0c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	461a      	mov	r2, r3
 8002444:	4906      	ldr	r1, [pc, #24]	; (8002460 <OS_InitTaskIdle+0x48>)
 8002446:	203f      	movs	r0, #63	; 0x3f
 8002448:	f000 fe32 	bl	80030b0 <OSTaskNameSet>
#endif
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20001294 	.word	0x20001294
 8002458:	20001490 	.word	0x20001490
 800245c:	08002649 	.word	0x08002649
 8002460:	080037fc 	.word	0x080037fc

08002464 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 800246a:	2303      	movs	r3, #3
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	2300      	movs	r3, #0
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <OS_InitTaskStat+0x3c>)
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	233e      	movs	r3, #62	; 0x3e
 8002482:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <OS_InitTaskStat+0x40>)
 8002484:	2100      	movs	r1, #0
 8002486:	4808      	ldr	r0, [pc, #32]	; (80024a8 <OS_InitTaskStat+0x44>)
 8002488:	f000 fcc0 	bl	8002e0c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	461a      	mov	r2, r3
 8002490:	4906      	ldr	r1, [pc, #24]	; (80024ac <OS_InitTaskStat+0x48>)
 8002492:	203e      	movs	r0, #62	; 0x3e
 8002494:	f000 fe0c 	bl	80030b0 <OSTaskNameSet>
#endif
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000df0 	.word	0x20000df0
 80024a4:	20000fec 	.word	0x20000fec
 80024a8:	08002675 	.word	0x08002675
 80024ac:	0800380c 	.word	0x0800380c

080024b0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80024b6:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 80024ba:	481f      	ldr	r0, [pc, #124]	; (8002538 <OS_InitTCBList+0x88>)
 80024bc:	f000 f846 	bl	800254c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 80024c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <OS_InitTCBList+0x8c>)
 80024c6:	f000 f841 	bl	800254c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e019      	b.n	8002504 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3301      	adds	r3, #1
 80024d4:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2258      	movs	r2, #88	; 0x58
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <OS_InitTCBList+0x88>)
 80024e0:	4413      	add	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	2258      	movs	r2, #88	; 0x58
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <OS_InitTCBList+0x88>)
 80024ee:	4413      	add	r3, r2
 80024f0:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <OS_InitTCBList+0x90>)
 80024fc:	651a      	str	r2, [r3, #80]	; 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3301      	adds	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b14      	cmp	r3, #20
 8002508:	d9e2      	bls.n	80024d0 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2258      	movs	r2, #88	; 0x58
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <OS_InitTCBList+0x88>)
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <OS_InitTCBList+0x90>)
 8002522:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <OS_InitTCBList+0x94>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <OS_InitTCBList+0x98>)
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <OS_InitTCBList+0x88>)
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200024fc 	.word	0x200024fc
 800253c:	20002c94 	.word	0x20002c94
 8002540:	080037f8 	.word	0x080037f8
 8002544:	20000d70 	.word	0x20000d70
 8002548:	20000ffc 	.word	0x20000ffc

0800254c <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8002558:	e007      	b.n	800256a <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
        size--;
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	3b01      	subs	r3, #1
 8002568:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f4      	bne.n	800255a <OS_MemClr+0xe>
    }
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
	...

0800257c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8002586:	f7fd fde1 	bl	800014c <OS_CPU_SR_Save>
 800258a:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <OS_Sched+0x68>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11f      	bne.n	80025d4 <OS_Sched+0x58>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <OS_Sched+0x6c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11b      	bne.n	80025d4 <OS_Sched+0x58>
            OS_SchedNew();
 800259c:	f000 f830 	bl	8002600 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <OS_Sched+0x70>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <OS_Sched+0x74>)
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <OS_Sched+0x78>)
 80025ae:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 80025b0:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <OS_Sched+0x70>)
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <OS_Sched+0x7c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d00b      	beq.n	80025d4 <OS_Sched+0x58>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <OS_Sched+0x78>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c2:	3201      	adds	r2, #1
 80025c4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <OS_Sched+0x80>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <OS_Sched+0x80>)
 80025ce:	6013      	str	r3, [r2, #0]
                OS_TASK_SW();                          /* Perform a context switch                     */
 80025d0:	f7fd fdd7 	bl	8000182 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fd fdbd 	bl	8000154 <OS_CPU_SR_Restore>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001280 	.word	0x20001280
 80025e8:	20000a88 	.word	0x20000a88
 80025ec:	20000a9a 	.word	0x20000a9a
 80025f0:	20002c94 	.word	0x20002c94
 80025f4:	20001068 	.word	0x20001068
 80025f8:	20000d6c 	.word	0x20000d6c
 80025fc:	20000ff0 	.word	0x20000ff0

08002600 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <OS_SchedNew+0x38>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <OS_SchedNew+0x3c>)
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	b2da      	uxtb	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <OS_SchedNew+0x40>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	4619      	mov	r1, r3
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <OS_SchedNew+0x3c>)
 8002622:	5c5b      	ldrb	r3, [r3, r1]
 8002624:	4413      	add	r3, r2
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <OS_SchedNew+0x44>)
 800262a:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20001070 	.word	0x20001070
 800263c:	080038f4 	.word	0x080038f4
 8002640:	20001074 	.word	0x20001074
 8002644:	20000a9a 	.word	0x20000a9a

08002648 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8002654:	f7fd fd7a 	bl	800014c <OS_CPU_SR_Save>
 8002658:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <OS_TaskIdle+0x28>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <OS_TaskIdle+0x28>)
 8002662:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7fd fd75 	bl	8000154 <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800266a:	f7ff f919 	bl	80018a0 <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 800266e:	e7f1      	b.n	8002654 <OS_TaskIdle+0xc>
 8002670:	20000a94 	.word	0x20000a94

08002674 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8002680:	e002      	b.n	8002688 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8002682:	20c8      	movs	r0, #200	; 0xc8
 8002684:	f000 fe62 	bl	800334c <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <OS_TaskStat+0x9c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f8      	beq.n	8002682 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <OS_TaskStat+0xa0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <OS_TaskStat+0xa4>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <OS_TaskStat+0xa0>)
 800269e:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <OS_TaskStat+0xa0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <OS_TaskStat+0xa8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 80026ae:	20ff      	movs	r0, #255	; 0xff
 80026b0:	f000 fda6 	bl	8003200 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 80026b4:	f7fd fd4a 	bl	800014c <OS_CPU_SR_Save>
 80026b8:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <OS_TaskStat+0xa0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2264      	movs	r2, #100	; 0x64
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <OS_TaskStat+0xac>)
 80026c6:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7fd fd43 	bl	8000154 <OS_CPU_SR_Restore>
    for (;;) {
        OS_ENTER_CRITICAL();
 80026ce:	f7fd fd3d 	bl	800014c <OS_CPU_SR_Save>
 80026d2:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <OS_TaskStat+0xac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <OS_TaskStat+0xb0>)
 80026da:	6013      	str	r3, [r2, #0]
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <OS_TaskStat+0xac>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7fd fd36 	bl	8000154 <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <OS_TaskStat+0xb0>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <OS_TaskStat+0xa0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <OS_TaskStat+0xa8>)
 80026fe:	701a      	strb	r2, [r3, #0]
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8002700:	f7ff f8df 	bl	80018c2 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8002704:	f000 f810 	bl	8002728 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8002708:	2064      	movs	r0, #100	; 0x64
 800270a:	f000 fe1f 	bl	800334c <OSTimeDly>
        OS_ENTER_CRITICAL();
 800270e:	e7de      	b.n	80026ce <OS_TaskStat+0x5a>
 8002710:	20002c90 	.word	0x20002c90
 8002714:	20000ff8 	.word	0x20000ff8
 8002718:	51eb851f 	.word	0x51eb851f
 800271c:	20001000 	.word	0x20001000
 8002720:	20000a94 	.word	0x20000a94
 8002724:	20002d94 	.word	0x20002d94

08002728 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e023      	b.n	800277c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8002734:	463a      	mov	r2, r7
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fd00 	bl	8003140 <OSTaskStkChk>
 8002740:	4603      	mov	r3, r0
 8002742:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4a0f      	ldr	r2, [pc, #60]	; (800278c <OS_TaskStatStkChk+0x64>)
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00d      	beq.n	8002776 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d00a      	beq.n	8002776 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	441a      	add	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	64da      	str	r2, [r3, #76]	; 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b3f      	cmp	r3, #63	; 0x3f
 8002780:	d9d8      	bls.n	8002734 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20002c94 	.word	0x20002c94

08002790 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	4613      	mov	r3, r2
 80027a2:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
 80027a8:	f7fd fcd0 	bl	800014c <OS_CPU_SR_Save>
 80027ac:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <OS_TCBInit+0x1c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80c5 	beq.w	8002946 <OS_TCBInit+0x1b6>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4a65      	ldr	r2, [pc, #404]	; (8002958 <OS_TCBInit+0x1c8>)
 80027c2:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80027c4:	69b8      	ldr	r0, [r7, #24]
 80027c6:	f7fd fcc5 	bl	8000154 <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2200      	movs	r2, #0
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f8:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002804:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	89ba      	ldrh	r2, [r7, #12]
 800280a:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	b2da      	uxtb	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002834:	461a      	mov	r2, r3
 8002836:	2301      	movs	r3, #1
 8002838:	4093      	lsls	r3, r2
 800283a:	b2da      	uxtb	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002848:	461a      	mov	r2, r3
 800284a:	2301      	movs	r3, #1
 800284c:	4093      	lsls	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart = 0uL;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot   = 0uL;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2200      	movs	r2, #0
 8002884:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed     = 0uL;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a33      	ldr	r2, [pc, #204]	; (800295c <OS_TCBInit+0x1cc>)
 8002890:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8002892:	2300      	movs	r3, #0
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e009      	b.n	80028ac <OS_TCBInit+0x11c>
            ptcb->OSTCBRegTbl[i] = 0u;
 8002898:	7ffb      	ldrb	r3, [r7, #31]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	3314      	adds	r3, #20
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	3301      	adds	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f2      	beq.n	8002898 <OS_TCBInit+0x108>
        }
#endif

        OSTCBInitHook(ptcb);
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff f88e 	bl	80019d4 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 80028b8:	f7fd fc48 	bl	800014c <OS_CPU_SR_Save>
 80028bc:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	4927      	ldr	r1, [pc, #156]	; (8002960 <OS_TCBInit+0x1d0>)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80028c8:	69b8      	ldr	r0, [r7, #24]
 80028ca:	f7fd fc43 	bl	8000154 <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7fe ffd0 	bl	8001874 <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
 80028d4:	f7fd fc3a 	bl	800014c <OS_CPU_SR_Save>
 80028d8:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <OS_TCBInit+0x1d4>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <OS_TCBInit+0x1d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <OS_TCBInit+0x168>
            OSTCBList->OSTCBPrev = ptcb;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <OS_TCBInit+0x1d4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <OS_TCBInit+0x1d4>)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <OS_TCBInit+0x1d8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <OS_TCBInit+0x1d8>)
 800290e:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002916:	461a      	mov	r2, r3
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <OS_TCBInit+0x1dc>)
 800291a:	5c9a      	ldrb	r2, [r3, r2]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8002928:	4313      	orrs	r3, r2
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <OS_TCBInit+0x1dc>)
 800292e:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <OS_TCBInit+0x1e0>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <OS_TCBInit+0x1e0>)
 800293a:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 800293c:	69b8      	ldr	r0, [r7, #24]
 800293e:	f7fd fc09 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8002942:	2300      	movs	r3, #0
 8002944:	e003      	b.n	800294e <OS_TCBInit+0x1be>
    }
    OS_EXIT_CRITICAL();
 8002946:	69b8      	ldr	r0, [r7, #24]
 8002948:	f7fd fc04 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 800294c:	2342      	movs	r3, #66	; 0x42
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000ffc 	.word	0x20000ffc
 800295c:	080037f8 	.word	0x080037f8
 8002960:	20002c94 	.word	0x20002c94
 8002964:	20000d70 	.word	0x20000d70
 8002968:	20001070 	.word	0x20001070
 800296c:	20001074 	.word	0x20001074
 8002970:	20001001 	.word	0x20001001

08002974 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 800297a:	2150      	movs	r1, #80	; 0x50
 800297c:	481b      	ldr	r0, [pc, #108]	; (80029ec <OS_FlagInit+0x78>)
 800297e:	f7ff fde5 	bl	800254c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8002982:	2300      	movs	r3, #0
 8002984:	81fb      	strh	r3, [r7, #14]
 8002986:	e018      	b.n	80029ba <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	3301      	adds	r3, #1
 800298c:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4a16      	ldr	r2, [pc, #88]	; (80029ec <OS_FlagInit+0x78>)
 8002994:	4413      	add	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	4a13      	ldr	r2, [pc, #76]	; (80029ec <OS_FlagInit+0x78>)
 800299e:	4413      	add	r3, r2
 80029a0:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <OS_FlagInit+0x7c>)
 80029b2:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80029b4:	89fb      	ldrh	r3, [r7, #14]
 80029b6:	3301      	adds	r3, #1
 80029b8:	81fb      	strh	r3, [r7, #14]
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d9e3      	bls.n	8002988 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80029c0:	89fb      	ldrh	r3, [r7, #14]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4a09      	ldr	r2, [pc, #36]	; (80029ec <OS_FlagInit+0x78>)
 80029c6:	4413      	add	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <OS_FlagInit+0x7c>)
 80029da:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <OS_FlagInit+0x80>)
 80029de:	4a03      	ldr	r2, [pc, #12]	; (80029ec <OS_FlagInit+0x78>)
 80029e0:	601a      	str	r2, [r3, #0]
#endif
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000a9c 	.word	0x20000a9c
 80029f0:	0800381c 	.word	0x0800381c
 80029f4:	20002c8c 	.word	0x20002c8c

080029f8 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	e008      	b.n	8002a3e <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	481a      	ldr	r0, [pc, #104]	; (8002ac8 <OS_MemInit+0x74>)
 8002a5e:	f7ff fd75 	bl	800254c <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8002a62:	2300      	movs	r3, #0
 8002a64:	80fb      	strh	r3, [r7, #6]
 8002a66:	e017      	b.n	8002a98 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <OS_MemInit+0x74>)
 8002a74:	4413      	add	r3, r2
 8002a76:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <OS_MemInit+0x74>)
 8002a86:	441a      	add	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <OS_MemInit+0x78>)
 8002a90:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	3301      	adds	r3, #1
 8002a96:	80fb      	strh	r3, [r7, #6]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d9e4      	bls.n	8002a68 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <OS_MemInit+0x74>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <OS_MemInit+0x78>)
 8002ab8:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <OS_MemInit+0x7c>)
 8002abc:	4a02      	ldr	r2, [pc, #8]	; (8002ac8 <OS_MemInit+0x74>)
 8002abe:	601a      	str	r2, [r3, #0]
#endif
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000d74 	.word	0x20000d74
 8002acc:	08003820 	.word	0x08003820
 8002ad0:	20001004 	.word	0x20001004

08002ad4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8002ada:	2160      	movs	r1, #96	; 0x60
 8002adc:	4819      	ldr	r0, [pc, #100]	; (8002b44 <OS_QInit+0x70>)
 8002ade:	f7ff fd35 	bl	800254c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	81fb      	strh	r3, [r7, #14]
 8002ae6:	e018      	b.n	8002b1a <OS_QInit+0x46>
        ix_next = ix + 1u;
 8002ae8:	89fb      	ldrh	r3, [r7, #14]
 8002aea:	3301      	adds	r3, #1
 8002aec:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 8002aee:	89fa      	ldrh	r2, [r7, #14]
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <OS_QInit+0x70>)
 8002afa:	4413      	add	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <OS_QInit+0x70>)
 8002b0a:	4413      	add	r3, r2
 8002b0c:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	3301      	adds	r3, #1
 8002b18:	81fb      	strh	r3, [r7, #14]
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d9e3      	bls.n	8002ae8 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 8002b20:	89fa      	ldrh	r2, [r7, #14]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <OS_QInit+0x70>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <OS_QInit+0x74>)
 8002b38:	4a02      	ldr	r2, [pc, #8]	; (8002b44 <OS_QInit+0x70>)
 8002b3a:	601a      	str	r2, [r3, #0]
#endif
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20001008 	.word	0x20001008
 8002b48:	2000106c 	.word	0x2000106c

08002b4c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <OSSemCreate+0x6c>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8002b62:	2300      	movs	r3, #0
 8002b64:	e024      	b.n	8002bb0 <OSSemCreate+0x64>
    }
    OS_ENTER_CRITICAL();
 8002b66:	f7fd faf1 	bl	800014c <OS_CPU_SR_Save>
 8002b6a:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <OSSemCreate+0x70>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8002b72:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <OSSemCreate+0x70>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <OSSemCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <OSSemCreate+0x70>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <OSSemCreate+0x70>)
 8002b82:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fd fae5 	bl	8000154 <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <OSSemCreate+0x62>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2203      	movs	r2, #3
 8002b94:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <OSSemCreate+0x74>)
 8002ba6:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f7ff fb60 	bl	800226e <OS_EventWaitListInit>
    }
    return (pevent);
 8002bae:	68bb      	ldr	r3, [r7, #8]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20001280 	.word	0x20001280
 8002bbc:	2000127c 	.word	0x2000127c
 8002bc0:	08003824 	.word	0x08003824

08002bc4 <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d003      	beq.n	8002be4 <OSSemPend+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
        return;
 8002be2:	e072      	b.n	8002cca <OSSemPend+0x106>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <OSSemPend+0x10c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <OSSemPend+0x30>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
        return;
 8002bf2:	e06a      	b.n	8002cca <OSSemPend+0x106>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <OSSemPend+0x110>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <OSSemPend+0x40>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	220d      	movs	r2, #13
 8002c00:	701a      	strb	r2, [r3, #0]
        return;
 8002c02:	e062      	b.n	8002cca <OSSemPend+0x106>
    }
    OS_ENTER_CRITICAL();
 8002c04:	f7fd faa2 	bl	800014c <OS_CPU_SR_Save>
 8002c08:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	891b      	ldrh	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	891b      	ldrh	r3, [r3, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f7fd fa98 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
        return;
 8002c2a:	e04e      	b.n	8002cca <OSSemPend+0x106>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <OSSemPend+0x114>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <OSSemPend+0x114>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <OSSemPend+0x114>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <OSSemPend+0x114>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff fa43 	bl	80020e0 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7fd fa7a 	bl	8000154 <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8002c60:	f7ff fc8c 	bl	800257c <OS_Sched>
    OS_ENTER_CRITICAL();
 8002c64:	f7fd fa72 	bl	800014c <OS_CPU_SR_Save>
 8002c68:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <OSSemPend+0x114>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <OSSemPend+0xb8>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d004      	beq.n	8002c84 <OSSemPend+0xc0>
 8002c7a:	e007      	b.n	8002c8c <OSSemPend+0xc8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
             break;
 8002c82:	e00d      	b.n	8002ca0 <OSSemPend+0xdc>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	220e      	movs	r2, #14
 8002c88:	701a      	strb	r2, [r3, #0]
             break;
 8002c8a:	e009      	b.n	8002ca0 <OSSemPend+0xdc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <OSSemPend+0x114>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fa7a 	bl	800218c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	701a      	strb	r2, [r3, #0]
             break;
 8002c9e:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <OSSemPend+0x114>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <OSSemPend+0x114>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <OSSemPend+0x114>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <OSSemPend+0x114>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f7fd fa45 	bl	8000154 <OS_CPU_SR_Restore>
}
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20001280 	.word	0x20001280
 8002cd4:	20000a88 	.word	0x20000a88
 8002cd8:	20001284 	.word	0x20001284

08002cdc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d001      	beq.n	8002cf4 <OSSemPost+0x18>
        return (OS_ERR_EVENT_TYPE);
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e028      	b.n	8002d46 <OSSemPost+0x6a>
    }
    OS_ENTER_CRITICAL();
 8002cf4:	f7fd fa2a 	bl	800014c <OS_CPU_SR_Save>
 8002cf8:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7a9b      	ldrb	r3, [r3, #10]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <OSSemPost+0x40>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8002d02:	2300      	movs	r3, #0
 8002d04:	2201      	movs	r2, #1
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff f977 	bl	8001ffc <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7fd fa20 	bl	8000154 <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8002d14:	f7ff fc32 	bl	800257c <OS_Sched>
        return (OS_ERR_NONE);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e014      	b.n	8002d46 <OSSemPost+0x6a>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	891b      	ldrh	r3, [r3, #8]
 8002d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00a      	beq.n	8002d3e <OSSemPost+0x62>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	891b      	ldrh	r3, [r3, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7fd fa0d 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e003      	b.n	8002d46 <OSSemPost+0x6a>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7fd fa08 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
 8002d44:	2333      	movs	r3, #51	; 0x33
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <OSTaskCreate>:
#if OS_TASK_CREATE_EN > 0u
INT8U  OSTaskCreate (void   (*task)(void *p_arg),
                     void    *p_arg,
                     OS_STK  *ptos,
                     INT8U    prio)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af04      	add	r7, sp, #16
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 8002d62:	f7fd f9f3 	bl	800014c <OS_CPU_SR_Save>
 8002d66:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <OSTaskCreate+0xb0>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <OSTaskCreate+0x2a>
        OS_EXIT_CRITICAL();
 8002d70:	69f8      	ldr	r0, [r7, #28]
 8002d72:	f7fd f9ef 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8002d76:	233c      	movs	r3, #60	; 0x3c
 8002d78:	e03d      	b.n	8002df6 <OSTaskCreate+0xa6>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <OSTaskCreate+0xb4>)
 8002d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d133      	bne.n	8002dee <OSTaskCreate+0x9e>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <OSTaskCreate+0xb4>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8002d90:	69f8      	ldr	r0, [r7, #28]
 8002d92:	f7fd f9df 	bl	8000154 <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
 8002d96:	2300      	movs	r3, #0
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7fe fd97 	bl	80018d0 <OSTaskStkInit>
 8002da2:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
 8002da4:	78f8      	ldrb	r0, [r7, #3]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	2200      	movs	r2, #0
 8002db6:	69b9      	ldr	r1, [r7, #24]
 8002db8:	f7ff fcea 	bl	8002790 <OS_TCBInit>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <OSTaskCreate+0x84>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <OSTaskCreate+0xb8>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <OSTaskCreate+0x9a>
                OS_Sched();
 8002dce:	f7ff fbd5 	bl	800257c <OS_Sched>
 8002dd2:	e00a      	b.n	8002dea <OSTaskCreate+0x9a>
            }
        } else {
            OS_ENTER_CRITICAL();
 8002dd4:	f7fd f9ba 	bl	800014c <OS_CPU_SR_Save>
 8002dd8:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <OSTaskCreate+0xb4>)
 8002dde:	2100      	movs	r1, #0
 8002de0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8002de4:	69f8      	ldr	r0, [r7, #28]
 8002de6:	f7fd f9b5 	bl	8000154 <OS_CPU_SR_Restore>
        }
        return (err);
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	e003      	b.n	8002df6 <OSTaskCreate+0xa6>
    }
    OS_EXIT_CRITICAL();
 8002dee:	69f8      	ldr	r0, [r7, #28]
 8002df0:	f7fd f9b0 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8002df4:	2328      	movs	r3, #40	; 0x28
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20001280 	.word	0x20001280
 8002e04:	20002c94 	.word	0x20002c94
 8002e08:	20000a91 	.word	0x20000a91

08002e0c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08c      	sub	sp, #48	; 0x30
 8002e10:	af04      	add	r7, sp, #16
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 8002e1e:	f7fd f995 	bl	800014c <OS_CPU_SR_Save>
 8002e22:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <OSTaskCreateExt+0xbc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <OSTaskCreateExt+0x2a>
        OS_EXIT_CRITICAL();
 8002e2c:	69f8      	ldr	r0, [r7, #28]
 8002e2e:	f7fd f991 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8002e32:	233c      	movs	r3, #60	; 0x3c
 8002e34:	e044      	b.n	8002ec0 <OSTaskCreateExt+0xb4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <OSTaskCreateExt+0xc0>)
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13a      	bne.n	8002eb8 <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	4a21      	ldr	r2, [pc, #132]	; (8002ecc <OSTaskCreateExt+0xc0>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8002e4c:	69f8      	ldr	r0, [r7, #28]
 8002e4e:	f7fd f981 	bl	8000154 <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8002e52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e54:	461a      	mov	r2, r3
 8002e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e5a:	f000 fa55 	bl	8003308 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8002e5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7fe fd33 	bl	80018d0 <OSTaskStkInit>
 8002e6a:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8002e6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e6e:	78f8      	ldrb	r0, [r7, #3]
 8002e70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e72:	9302      	str	r3, [sp, #8]
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	f7ff fc85 	bl	8002790 <OS_TCBInit>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <OSTaskCreateExt+0x92>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <OSTaskCreateExt+0xc4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10d      	bne.n	8002eb4 <OSTaskCreateExt+0xa8>
                OS_Sched();
 8002e98:	f7ff fb70 	bl	800257c <OS_Sched>
 8002e9c:	e00a      	b.n	8002eb4 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 8002e9e:	f7fd f955 	bl	800014c <OS_CPU_SR_Save>
 8002ea2:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <OSTaskCreateExt+0xc0>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 8002eae:	69f8      	ldr	r0, [r7, #28]
 8002eb0:	f7fd f950 	bl	8000154 <OS_CPU_SR_Restore>
        }
        return (err);
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	e003      	b.n	8002ec0 <OSTaskCreateExt+0xb4>
    }
    OS_EXIT_CRITICAL();
 8002eb8:	69f8      	ldr	r0, [r7, #28]
 8002eba:	f7fd f94b 	bl	8000154 <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 8002ebe:	2328      	movs	r3, #40	; 0x28
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20001280 	.word	0x20001280
 8002ecc:	20002c94 	.word	0x20002c94
 8002ed0:	20000a91 	.word	0x20000a91

08002ed4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
#endif



    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8002ee2:	4b68      	ldr	r3, [pc, #416]	; (8003084 <OSTaskDel+0x1b0>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8002eea:	2340      	movs	r3, #64	; 0x40
 8002eec:	e0c6      	b.n	800307c <OSTaskDel+0x1a8>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b3f      	cmp	r3, #63	; 0x3f
 8002ef2:	d101      	bne.n	8002ef8 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8002ef4:	233e      	movs	r3, #62	; 0x3e
 8002ef6:	e0c1      	b.n	800307c <OSTaskDel+0x1a8>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8002ef8:	f7fd f928 	bl	800014c <OS_CPU_SR_Save>
 8002efc:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	d104      	bne.n	8002f0e <OSTaskDel+0x3a>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8002f04:	4b60      	ldr	r3, [pc, #384]	; (8003088 <OSTaskDel+0x1b4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f0c:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	4a5e      	ldr	r2, [pc, #376]	; (800308c <OSTaskDel+0x1b8>)
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <OSTaskDel+0x54>
        OS_EXIT_CRITICAL();
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7fd f918 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8002f24:	2343      	movs	r3, #67	; 0x43
 8002f26:	e0a9      	b.n	800307c <OSTaskDel+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d104      	bne.n	8002f38 <OSTaskDel+0x64>
        OS_EXIT_CRITICAL();
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7fd f910 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8002f34:	233d      	movs	r3, #61	; 0x3d
 8002f36:	e0a1      	b.n	800307c <OSTaskDel+0x1a8>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <OSTaskDel+0x1bc>)
 8002f42:	5c9a      	ldrb	r2, [r3, r2]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8002f54:	4013      	ands	r3, r2
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b4d      	ldr	r3, [pc, #308]	; (8003090 <OSTaskDel+0x1bc>)
 8002f5a:	545a      	strb	r2, [r3, r1]
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <OSTaskDel+0x1bc>)
 8002f66:	5c9b      	ldrb	r3, [r3, r2]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <OSTaskDel+0xae>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f72:	43db      	mvns	r3, r3
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <OSTaskDel+0x1c0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b45      	ldr	r3, [pc, #276]	; (8003094 <OSTaskDel+0x1c0>)
 8002f80:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <OSTaskDel+0xc2>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f7ff f8fb 	bl	800218c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <OSTaskDel+0xd6>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6938      	ldr	r0, [r7, #16]
 8002fa6:	f7ff f920 	bl	80021ea <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <OSTaskDel+0xe8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff fd1e 	bl	80029f8 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <OSTaskDel+0x1c4>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2bff      	cmp	r3, #255	; 0xff
 8002fd8:	d005      	beq.n	8002fe6 <OSTaskDel+0x112>
        OSLockNesting++;
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <OSTaskDel+0x1c4>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <OSTaskDel+0x1c4>)
 8002fe4:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7fd f8b4 	bl	8000154 <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8002fec:	f7ff f800 	bl	8001ff0 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8002ff0:	f7fd f8ac 	bl	800014c <OS_CPU_SR_Save>
 8002ff4:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <OSTaskDel+0x1c4>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <OSTaskDel+0x136>
        OSLockNesting--;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <OSTaskDel+0x1c4>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <OSTaskDel+0x1c4>)
 8003008:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 800300a:	6938      	ldr	r0, [r7, #16]
 800300c:	f7fe fc3d 	bl	800188a <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <OSTaskDel+0x1c8>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <OSTaskDel+0x1c8>)
 800301a:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <OSTaskDel+0x1b8>)
 8003020:	2100      	movs	r1, #0
 8003022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <OSTaskDel+0x16c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <OSTaskDel+0x1cc>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e009      	b.n	8003054 <OSTaskDel+0x180>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	6952      	ldr	r2, [r2, #20]
 8003048:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6992      	ldr	r2, [r2, #24]
 8003052:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <OSTaskDel+0x1d0>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <OSTaskDel+0x1d0>)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a10      	ldr	r2, [pc, #64]	; (80030a8 <OSTaskDel+0x1d4>)
 8003066:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7fd f873 	bl	8000154 <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <OSTaskDel+0x1d8>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <OSTaskDel+0x1a6>
        OS_Sched();                                     /* Find new highest priority task              */
 8003076:	f7ff fa81 	bl	800257c <OS_Sched>
    }
    return (OS_ERR_NONE);
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20001280 	.word	0x20001280
 8003088:	20001284 	.word	0x20001284
 800308c:	20002c94 	.word	0x20002c94
 8003090:	20001074 	.word	0x20001074
 8003094:	20001070 	.word	0x20001070
 8003098:	20000a88 	.word	0x20000a88
 800309c:	20001001 	.word	0x20001001
 80030a0:	20000d70 	.word	0x20000d70
 80030a4:	20000ffc 	.word	0x20000ffc
 80030a8:	08003828 	.word	0x08003828
 80030ac:	20000a91 	.word	0x20000a91

080030b0 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <OSTaskNameSet+0x84>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <OSTaskNameSet+0x22>
        *perr = OS_ERR_NAME_SET_ISR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2212      	movs	r2, #18
 80030ce:	701a      	strb	r2, [r3, #0]
        return;
 80030d0:	e02c      	b.n	800312c <OSTaskNameSet+0x7c>
    }
    OS_ENTER_CRITICAL();
 80030d2:	f7fd f83b 	bl	800014c <OS_CPU_SR_Save>
 80030d6:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2bff      	cmp	r3, #255	; 0xff
 80030dc:	d104      	bne.n	80030e8 <OSTaskNameSet+0x38>
        prio = OSTCBCur->OSTCBPrio;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <OSTaskNameSet+0x88>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030e6:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4a14      	ldr	r2, [pc, #80]	; (800313c <OSTaskNameSet+0x8c>)
 80030ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f0:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <OSTaskNameSet+0x56>
        OS_EXIT_CRITICAL();                          /* No                                             */
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7fd f82b 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2243      	movs	r2, #67	; 0x43
 8003102:	701a      	strb	r2, [r3, #0]
        return;
 8003104:	e012      	b.n	800312c <OSTaskNameSet+0x7c>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <OSTaskNameSet+0x6a>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7fd f821 	bl	8000154 <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2243      	movs	r2, #67	; 0x43
 8003116:	701a      	strb	r2, [r3, #0]
        return;
 8003118:	e008      	b.n	800312c <OSTaskNameSet+0x7c>
    }
    ptcb->OSTCBTaskName = pname;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	651a      	str	r2, [r3, #80]	; 0x50
    OS_EXIT_CRITICAL();
 8003120:	6978      	ldr	r0, [r7, #20]
 8003122:	f7fd f817 	bl	8000154 <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
}
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20001280 	.word	0x20001280
 8003138:	20001284 	.word	0x20001284
 800313c:	20002c94 	.word	0x20002c94

08003140 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 800315c:	f7fc fff6 	bl	800014c <OS_CPU_SR_Save>
 8003160:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2bff      	cmp	r3, #255	; 0xff
 8003166:	d104      	bne.n	8003172 <OSTaskStkChk+0x32>
        prio = OSTCBCur->OSTCBPrio;
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <OSTaskStkChk+0xb8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003170:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <OSTaskStkChk+0xbc>)
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <OSTaskStkChk+0x4c>
        OS_EXIT_CRITICAL();
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7fc ffe6 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003188:	2343      	movs	r3, #67	; 0x43
 800318a:	e030      	b.n	80031ee <OSTaskStkChk+0xae>
    }
    if (ptcb == OS_TCB_RESERVED) {
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d104      	bne.n	800319c <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
 8003192:	6978      	ldr	r0, [r7, #20]
 8003194:	f7fc ffde 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003198:	2343      	movs	r3, #67	; 0x43
 800319a:	e028      	b.n	80031ee <OSTaskStkChk+0xae>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	8a1b      	ldrh	r3, [r3, #16]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <OSTaskStkChk+0x72>
        OS_EXIT_CRITICAL();
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f7fc ffd3 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 80031ae:	2345      	movs	r3, #69	; 0x45
 80031b0:	e01d      	b.n	80031ee <OSTaskStkChk+0xae>
    }
    nfree = 0u;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7fc ffc6 	bl	8000154 <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80031c8:	e002      	b.n	80031d0 <OSTaskStkChk+0x90>
        nfree++;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	1d1a      	adds	r2, r3, #4
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f6      	beq.n	80031ca <OSTaskStkChk+0x8a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20001284 	.word	0x20001284
 80031fc:	20002c94 	.word	0x20002c94

08003200 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
 800320e:	f7fc ff9d 	bl	800014c <OS_CPU_SR_Save>
 8003212:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2bff      	cmp	r3, #255	; 0xff
 8003218:	d107      	bne.n	800322a <OSTaskSuspend+0x2a>
        prio = OSTCBCur->OSTCBPrio;
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <OSTaskSuspend+0xdc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003222:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
 8003228:	e00b      	b.n	8003242 <OSTaskSuspend+0x42>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <OSTaskSuspend+0xdc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003232:	79fa      	ldrb	r2, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d102      	bne.n	800323e <OSTaskSuspend+0x3e>
        self = OS_TRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
 800323c:	e001      	b.n	8003242 <OSTaskSuspend+0x42>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <OSTaskSuspend+0xe0>)
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <OSTaskSuspend+0x5c>
        OS_EXIT_CRITICAL();
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f7fc ff7e 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8003258:	2348      	movs	r3, #72	; 0x48
 800325a:	e03a      	b.n	80032d2 <OSTaskSuspend+0xd2>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d104      	bne.n	800326c <OSTaskSuspend+0x6c>
        OS_EXIT_CRITICAL();
 8003262:	6938      	ldr	r0, [r7, #16]
 8003264:	f7fc ff76 	bl	8000154 <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8003268:	2343      	movs	r3, #67	; 0x43
 800326a:	e032      	b.n	80032d2 <OSTaskSuspend+0xd2>
    }
    y            = ptcb->OSTCBY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003272:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8003274:	7afb      	ldrb	r3, [r7, #11]
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <OSTaskSuspend+0xe4>)
 8003278:	5cd1      	ldrb	r1, [r2, r3]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003280:	43db      	mvns	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	400a      	ands	r2, r1
 8003288:	b2d1      	uxtb	r1, r2
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <OSTaskSuspend+0xe4>)
 800328c:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <OSTaskSuspend+0xe4>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <OSTaskSuspend+0xae>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800329e:	43db      	mvns	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <OSTaskSuspend+0xe8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	4013      	ands	r3, r2
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <OSTaskSuspend+0xe8>)
 80032ac:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 80032c0:	6938      	ldr	r0, [r7, #16]
 80032c2:	f7fc ff47 	bl	8000154 <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <OSTaskSuspend+0xd0>
        OS_Sched();                                             /* Find new highest priority task      */
 80032cc:	f7ff f956 	bl	800257c <OS_Sched>
    }
    return (OS_ERR_NONE);
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20001284 	.word	0x20001284
 80032e0:	20002c94 	.word	0x20002c94
 80032e4:	20001074 	.word	0x20001074
 80032e8:	20001070 	.word	0x20001070

080032ec <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <OS_TaskReturn+0x18>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fad9 	bl	80018ac <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 80032fa:	20ff      	movs	r0, #255	; 0xff
 80032fc:	f7ff fdea 	bl	8002ed4 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20001284 	.word	0x20001284

08003308 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800332a:	e007      	b.n	800333c <OS_TaskStkClr+0x34>
                size--;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3b01      	subs	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	60fa      	str	r2, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f4      	bne.n	800332c <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <OSTimeDly+0x90>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d137      	bne.n	80033d0 <OSTimeDly+0x84>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8003360:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <OSTimeDly+0x94>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d135      	bne.n	80033d4 <OSTimeDly+0x88>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d033      	beq.n	80033d6 <OSTimeDly+0x8a>
        OS_ENTER_CRITICAL();
 800336e:	f7fc feed 	bl	800014c <OS_CPU_SR_Save>
 8003372:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <OSTimeDly+0x98>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337c:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <OSTimeDly+0x9c>)
 8003382:	5cd1      	ldrb	r1, [r2, r3]
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <OSTimeDly+0x98>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800338c:	43db      	mvns	r3, r3
 800338e:	b2da      	uxtb	r2, r3
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	400a      	ands	r2, r1
 8003394:	b2d1      	uxtb	r1, r2
 8003396:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <OSTimeDly+0x9c>)
 8003398:	54d1      	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0u) {
 800339a:	7afb      	ldrb	r3, [r7, #11]
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <OSTimeDly+0x9c>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <OSTimeDly+0x70>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <OSTimeDly+0x98>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033ac:	43db      	mvns	r3, r3
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <OSTimeDly+0xa0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4013      	ands	r3, r2
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <OSTimeDly+0xa0>)
 80033ba:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <OSTimeDly+0x98>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
        OS_EXIT_CRITICAL();
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fc fec5 	bl	8000154 <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 80033ca:	f7ff f8d7 	bl	800257c <OS_Sched>
 80033ce:	e002      	b.n	80033d6 <OSTimeDly+0x8a>
        return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <OSTimeDly+0x8a>
        return;
 80033d4:	bf00      	nop
    }
}
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20001280 	.word	0x20001280
 80033e0:	20000a88 	.word	0x20000a88
 80033e4:	20001284 	.word	0x20001284
 80033e8:	20001074 	.word	0x20001074
 80033ec:	20001070 	.word	0x20001070

080033f0 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <OSTmrSignal+0x20>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fc6e 	bl	8002cdc <OSSemPost>
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
    return (err);
 8003404:	79fb      	ldrb	r3, [r7, #7]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000a8c 	.word	0x20000a8c

08003414 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800341a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800341e:	4838      	ldr	r0, [pc, #224]	; (8003500 <OSTmr_Init+0xec>)
 8003420:	f7ff f894 	bl	800254c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4837      	ldr	r0, [pc, #220]	; (8003504 <OSTmr_Init+0xf0>)
 8003428:	f7ff f890 	bl	800254c <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800342c:	2300      	movs	r3, #0
 800342e:	82fb      	strh	r3, [r7, #22]
 8003430:	e022      	b.n	8003478 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	3301      	adds	r3, #1
 8003436:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8003438:	8afa      	ldrh	r2, [r7, #22]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <OSTmr_Init+0xec>)
 8003444:	4413      	add	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8003448:	89fa      	ldrh	r2, [r7, #14]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <OSTmr_Init+0xec>)
 8003454:	4413      	add	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2264      	movs	r2, #100	; 0x64
 800345c:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4a26      	ldr	r2, [pc, #152]	; (8003508 <OSTmr_Init+0xf4>)
 8003470:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8003472:	8afb      	ldrh	r3, [r7, #22]
 8003474:	3301      	adds	r3, #1
 8003476:	82fb      	strh	r3, [r7, #22]
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	2b0e      	cmp	r3, #14
 800347c:	d9d9      	bls.n	8003432 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800347e:	8afa      	ldrh	r2, [r7, #22]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <OSTmr_Init+0xec>)
 800348a:	4413      	add	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2264      	movs	r2, #100	; 0x64
 8003492:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <OSTmr_Init+0xf4>)
 80034a6:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <OSTmr_Init+0xf8>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <OSTmr_Init+0xfc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <OSTmr_Init+0x100>)
 80034b6:	2210      	movs	r2, #16
 80034b8:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <OSTmr_Init+0x104>)
 80034bc:	4a10      	ldr	r2, [pc, #64]	; (8003500 <OSTmr_Init+0xec>)
 80034be:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7ff fb43 	bl	8002b4c <OSSemCreate>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <OSTmr_Init+0x108>)
 80034ca:	601a      	str	r2, [r3, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff fb3d 	bl	8002b4c <OSSemCreate>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <OSTmr_Init+0x10c>)
 80034d6:	601a      	str	r2, [r3, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <OSTmr_Init+0x108>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	1dfa      	adds	r2, r7, #7
 80034de:	4911      	ldr	r1, [pc, #68]	; (8003524 <OSTmr_Init+0x110>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fbc3 	bl	8001c6c <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <OSTmr_Init+0x10c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	1dfa      	adds	r2, r7, #7
 80034ec:	490e      	ldr	r1, [pc, #56]	; (8003528 <OSTmr_Init+0x114>)
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fbbc 	bl	8001c6c <OSEventNameSet>
#endif

    OSTmr_InitTask();
 80034f4:	f000 f81a 	bl	800352c <OSTmr_InitTask>
}
 80034f8:	bf00      	nop
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000aec 	.word	0x20000aec
 8003504:	20000a48 	.word	0x20000a48
 8003508:	0800382c 	.word	0x0800382c
 800350c:	20001288 	.word	0x20001288
 8003510:	20000a98 	.word	0x20000a98
 8003514:	20000ff4 	.word	0x20000ff4
 8003518:	20000a44 	.word	0x20000a44
 800351c:	20001290 	.word	0x20001290
 8003520:	20000a8c 	.word	0x20000a8c
 8003524:	08003830 	.word	0x08003830
 8003528:	08003844 	.word	0x08003844

0800352c <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8003532:	2303      	movs	r3, #3
 8003534:	9304      	str	r3, [sp, #16]
 8003536:	2300      	movs	r3, #0
 8003538:	9303      	str	r3, [sp, #12]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <OSTmr_InitTask+0x3c>)
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	233d      	movs	r3, #61	; 0x3d
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <OSTmr_InitTask+0x40>)
 800354c:	2100      	movs	r1, #0
 800354e:	4808      	ldr	r0, [pc, #32]	; (8003570 <OSTmr_InitTask+0x44>)
 8003550:	f7ff fc5c 	bl	8002e0c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	461a      	mov	r2, r3
 8003558:	4906      	ldr	r1, [pc, #24]	; (8003574 <OSTmr_InitTask+0x48>)
 800355a:	203d      	movs	r0, #61	; 0x3d
 800355c:	f7ff fda8 	bl	80030b0 <OSTaskNameSet>
#endif
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000107c 	.word	0x2000107c
 800356c:	20001278 	.word	0x20001278
 8003570:	080036c9 	.word	0x080036c9
 8003574:	08003858 	.word	0x08003858

08003578 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <OSTmr_Link+0xb8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	441a      	add	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	e012      	b.n	80035c8 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <OSTmr_Link+0xb8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]
 80035b8:	e006      	b.n	80035c8 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <OSTmr_Link+0xb8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4a16      	ldr	r2, [pc, #88]	; (8003634 <OSTmr_Link+0xbc>)
 80035da:	4413      	add	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <OSTmr_Link+0x82>
        pspoke->OSTmrFirst   = ptmr;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2201      	movs	r2, #1
 80035f6:	809a      	strh	r2, [r3, #4]
 80035f8:	e011      	b.n	800361e <OSTmr_Link+0xa6>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20001288 	.word	0x20001288
 8003634:	20000a48 	.word	0x20000a48

08003638 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	b29b      	uxth	r3, r3
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800364c:	8afb      	ldrh	r3, [r7, #22]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <OSTmr_Unlink+0x8c>)
 8003652:	4413      	add	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d10c      	bne.n	800367a <OSTmr_Unlink+0x42>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <OSTmr_Unlink+0x60>
            ptmr1->OSTmrPrev = (void *)0;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	e00e      	b.n	8003698 <OSTmr_Unlink+0x60>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <OSTmr_Unlink+0x60>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	889b      	ldrh	r3, [r3, #4]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	809a      	strh	r2, [r3, #4]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000a48 	.word	0x20000a48

080036c8 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <OSTmr_Task+0xa0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f107 020b 	add.w	r2, r7, #11
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fa72 	bl	8002bc4 <OSSemPend>
        OSSchedLock();
 80036e0:	f7fe fb60 	bl	8001da4 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <OSTmr_Task+0xa4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a20      	ldr	r2, [pc, #128]	; (800376c <OSTmr_Task+0xa4>)
 80036ec:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 80036ee:	4b1f      	ldr	r3, [pc, #124]	; (800376c <OSTmr_Task+0xa4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 80036fa:	8b7b      	ldrh	r3, [r7, #26]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <OSTmr_Task+0xa8>)
 8003700:	4413      	add	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800370a:	e027      	b.n	800375c <OSTmr_Task+0x94>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <OSTmr_Task+0xa4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d11c      	bne.n	8003758 <OSTmr_Task+0x90>
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 800371e:	69f8      	ldr	r0, [r7, #28]
 8003720:	f7ff ff8a 	bl	8003638 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800372a:	2b02      	cmp	r3, #2
 800372c:	d104      	bne.n	8003738 <OSTmr_Task+0x70>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 800372e:	2101      	movs	r1, #1
 8003730:	69f8      	ldr	r0, [r7, #28]
 8003732:	f7ff ff21 	bl	8003578 <OSTmr_Link>
 8003736:	e003      	b.n	8003740 <OSTmr_Task+0x78>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <OSTmr_Task+0x90>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4611      	mov	r1, r2
 8003754:	69f8      	ldr	r0, [r7, #28]
 8003756:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1d4      	bne.n	800370c <OSTmr_Task+0x44>
        }
        OSSchedUnlock();
 8003762:	f7fe fb47 	bl	8001df4 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8003766:	e7b3      	b.n	80036d0 <OSTmr_Task+0x8>
 8003768:	20000a8c 	.word	0x20000a8c
 800376c:	20001288 	.word	0x20001288
 8003770:	20000a48 	.word	0x20000a48

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	2500      	movs	r5, #0
 8003778:	4e0c      	ldr	r6, [pc, #48]	; (80037ac <__libc_init_array+0x38>)
 800377a:	4c0d      	ldr	r4, [pc, #52]	; (80037b0 <__libc_init_array+0x3c>)
 800377c:	1ba4      	subs	r4, r4, r6
 800377e:	10a4      	asrs	r4, r4, #2
 8003780:	42a5      	cmp	r5, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	f000 f822 	bl	80037cc <_init>
 8003788:	2500      	movs	r5, #0
 800378a:	4e0a      	ldr	r6, [pc, #40]	; (80037b4 <__libc_init_array+0x40>)
 800378c:	4c0a      	ldr	r4, [pc, #40]	; (80037b8 <__libc_init_array+0x44>)
 800378e:	1ba4      	subs	r4, r4, r6
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	42a5      	cmp	r5, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800379c:	4798      	blx	r3
 800379e:	3501      	adds	r5, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037a6:	4798      	blx	r3
 80037a8:	3501      	adds	r5, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	080039f4 	.word	0x080039f4
 80037b0:	080039f4 	.word	0x080039f4
 80037b4:	080039f4 	.word	0x080039f4
 80037b8:	080039f8 	.word	0x080039f8

080037bc <memset>:
 80037bc:	4603      	mov	r3, r0
 80037be:	4402      	add	r2, r0
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <memset+0xa>
 80037c4:	4770      	bx	lr
 80037c6:	f803 1b01 	strb.w	r1, [r3], #1
 80037ca:	e7f9      	b.n	80037c0 <memset+0x4>

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
