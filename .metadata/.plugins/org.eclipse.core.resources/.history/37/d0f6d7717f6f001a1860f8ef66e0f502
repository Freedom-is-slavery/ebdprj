/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdint-gcc.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define KEY_DOWN 0
#define KEY_UP   1

#define OF_VELOCITY 1   //ÊòæÁ§∫ÈÄüÂ∫¶Ê®°Âºè
#define OF_DISTANCE 0   //ÊòæÁ§∫ÈáåÁ®ãÊ®°Âºè

#define USART_SBUF_DIGIT_D 19
#define USART_SBUF_DIGIT_V 21
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_tx;

/* USER CODE BEGIN PV */
uint8_t F_TIM3, F_PA11, F_PA12;   //‰∏ªÂæ™ÁéØËΩÆËØ¢‰ªªÂä°Â§ÑÁêÜÊ†áÂøóÔºö‰∏≤Âè£ÂÆöÊó∂ÂèëÔøΩ?ÔøΩÔøΩ?ÔøΩÈí¢ÂúàËÆ°Êï∞ÔøΩ?ÔøΩÊ®°ÂºèÂàáÔø??
uint8_t F_DMA_Done;               //‰∏≤Âè£DMAÂèëÔøΩ?ÔøΩÂÆåÊàêÊ†áÔø??
uint16_t RoundCount;              //ÈáåÁ®ã
uint16_t Velocity;                //ÈÄüÂ∫¶

uint16_t tmp;
uint8_t dcnt;

uint8_t FlagOutputMode;           //ËæìÂá∫Ê®°ÂºèÔºåÂàùÂßãÈªòËÆ§ÈáåÁ®ãÊ®°Ôø??
uint8_t F_TIM4_OverFlow;
uint8_t USART_SendBuff_V[] = "Total Distance:      m";
uint8_t USART_SendBuff_D[] = "Current Velocity:     km/h";
struct TickCount TC_PA11, TC_PA12, TC_Round;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* TIM3ÊØèÈöî10ÁßíËøõ1Ê¨°‰∏≠Êñ? */
    if (!F_TIM3)     
    {
      F_TIM3 &= 0X00;

      if (FlagOutputMode == OF_DISTANCE)
      {
        /* Â∞ÜÈáåÁ®ãËΩ¨ÊàêASCIIÁ†ÅÂ°´ÂÖ•ÂèëÈÄÅÁºìÂÜ≤Âå∫ */
        tmp = RoundCount;
        dcnt = 0;
        USART_SendBuff_D[USART_SBUF_DIGIT_D] = 0 + 48;
        while(tmp != 0)
        {
          USART_SendBuff_D[USART_SBUF_DIGIT_D - (dcnt++)] = tmp % 10 + 48;
          tmp /= 10;
        }
        /* DMA‰º†ÔøΩ?ÔøΩÈáåÁ®ãÊï∞ÊçÆÁªô‰∏≤Âè£ÂèëÔøΩ?? */
        HAL_UART_Transmit_DMA(&huart1, USART_SendBuff_D, sizeof(USART_SendBuff_D));
      }
      else if (FlagOutputMode == OF_VELOCITY)
      {
        /* Â∞ÜÔøΩ?ÔøΩÂ∫¶ËΩ¨ÊàêASCIIÁ†ÅÂ°´ÂÖ•ÂèëÈÄÅÁºìÂÜ≤Âå∫ */
        tmp = Velocity;
        dcnt = 0;
        USART_SendBuff_V[USART_SBUF_DIGIT_V] = 0 + 48;
        while(tmp != 0)
        {
          USART_SendBuff_V[USART_SBUF_DIGIT_V - (dcnt++)] = tmp % 10 + 48;
          tmp /= 10;
        }
        /* DMA‰º†ÔøΩ?ÔøΩÔøΩ?ÔøΩÂ∫¶Êï∞ÊçÆÁªô‰∏≤Âè£ÂèëÔø?? */
        HAL_UART_Transmit_DMA(&huart1, USART_SendBuff_V, sizeof(USART_SendBuff_V));

      }
    }
    /* Èí¢ÂúàËÆ°Êï∞Â§ÑÁêÜ */
    if (F_PA11)
    {
      /* ÂÖàÊ∂àÈô§ÊåâÈîÆÊäñÂä®ÔºåÁ®≥ÂÆö10ms‰ΩéÁîµÂπ≥Á°ÆËÆ§Êåâ‰∏ãÔºåËÆ°Êï∞Áî±TIM4ÂÆûÁé∞ */
      TC_PA11.now = __HAL_TIM_GET_COUNTER(&htim4);
      TC_PA11.interval = (TC_PA11.now >= TC_PA11.last) ? \
                         (TC_PA11.now - TC_PA11.last) : (10000 + TC_PA11.now - TC_PA11.last);
      if (TC_PA11.interval >= 10 && HAL_GPIO_ReadPin(KeyRound_GPIO_Port, KeyRound_Pin) == KEY_DOWN)
      {
        F_PA11 &= 0X00;
        TC_Round.now = __HAL_TIM_GET_COUNTER(&htim4);
        RoundCount++;
        if (F_TIM4_OverFlow)
        {
          F_TIM4_OverFlow &= 0X00;
          TC_Round.interval = (uint16_t)(10000 + TC_Round.now - TC_Round.last);
        }
        else
          TC_Round.interval = TC_Round.now - TC_Round.last;
        
        Velocity = 3600 / TC_Round.interval;
        TC_Round.last = TC_Round.now;
      }
      
    }
    /* ÊîπÂèòËæìÂá∫Ê®°ÂºèÔºàÈáåÁ®ãÊàñÈÄüÂ∫¶Ôø?? */
    if (F_PA12)
    {
      /* ÂÖàÊ∂àÈô§ÊåâÈîÆÊäñÂä®ÔºåÁ®≥ÂÆö10ms‰ΩéÁîµÂπ≥Á°ÆËÆ§Êåâ‰∏ãÔºåËÆ°Êï∞Áî±TIM4ÂÆûÁé∞ */
      TC_PA12.now = __HAL_TIM_GET_COUNTER(&htim4);
      TC_PA12.interval = (TC_PA12.now >= TC_PA12.last) ? \
                         (TC_PA12.now - TC_PA12.last) : (10000 + TC_PA12.now - TC_PA12.last);
      if (TC_PA11.interval >= 10 && HAL_GPIO_ReadPin(KeyOutputMode_GPIO_Port,KeyOutputMode_Pin) == KEY_DOWN)
      {
        /* ËæìÂá∫Ê®°ÂºèÊîπÂèò */
        F_PA12 &= 0X00;
        FlagOutputMode = (~FlagOutputMode) & 0X01;
      }
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 32000-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 32000-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 10000-1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pins : KeyRound_Pin KeyOutputMode_Pin */
  GPIO_InitStruct.Pin = KeyRound_Pin|KeyOutputMode_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
