/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "includes.h"
#include "os_cpu.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//LED显示函数参数设定
#define SHOW_TASK_PRIO        10
#define SHOW_STK_SIZE        500
OS_STK SHOW_TASK_STK[SHOW_STK_SIZE];

//读取温湿度函数参数设�?????
#define READ_TASK_PRIO        9
#define READ_STK_SIZE        500
OS_STK READ_TASK_STK[READ_STK_SIZE];
//LED显示位数
INT8U LED_NUM=0;
INT8U dig_buff[5];
INT8U show_dig[4];
//DHT输入输出模式更改宏定�?????
#define DHT_OUTPUT() {DHT_GPIO_Port->CRH &= 0XFFF0FFFF;DHT_GPIO_Port->CRH|=(3<<16);}
#define DHT_INPUT() {DHT_GPIO_Port->CRH &= 0XFFF0FFFF;DHT_GPIO_Port->CRH|=(8<<16);}
#define DHT_IN_DIG (DHT_GPIO_Port->IDR & (uint32_t)DHT_Pin)
//�?????要创建的任务
void SHOW_Task(void *pdata);
void READ_Task(void *pdata);
//自定义函�?????
void SHOW_LED(INT8U x,INT8U y);
void Delay_us(uint16_t time);
void Delay_ms(uint16_t time);
void GetdigStart(void);
INT8U DHT_Get_sig_Start(void);
void DHT_Get_sig(void);
INT8U DHT_Get_bit(void);
void DHT_change(void);
void LED_Task(void);
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
  OSInit();
  OS_CPU_SysTickInit(0xffffu);
  OSTaskCreate(SHOW_Task,(void *)0,(OS_STK*)&SHOW_TASK_STK[SHOW_STK_SIZE-1],SHOW_TASK_PRIO);
  OSTaskCreate(READ_Task,(void *)0,(OS_STK*)&READ_TASK_STK[READ_STK_SIZE-1],READ_TASK_PRIO);
  Delay_ms(1100);
  //Delay_ms(1000);
  OSStart();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 32-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 2000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|D_Pin 
                          |E_Pin|F_Pin|G_Pin|DP_Pin 
                          |DHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin 
                           E_Pin F_Pin G_Pin DP_Pin 
                           DHT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin 
                          |E_Pin|F_Pin|G_Pin|DP_Pin 
                          |DHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void READ_Task(void *pdata)
{
	while(1)
	{
	OS_CPU_SR cpu_sr;
	OS_ENTER_CRITICAL();
	 GetdigStart();
	 if(!DHT_Get_sig_Start())
	 {
		 DHT_Get_sig();
		//if((dig_buff[0]+dig_buff[1]+dig_buff[2]+dig_buff[3])==dig_buff[4])
			 DHT_change();
		//else
		//{
		//	if(show_dig[0] == 9)
		//		show_dig[0] = 0;
		//	show_dig[0] ++;
		//}

	 }
	 else
	 {
		 if(show_dig[1] == 0)
		 		show_dig[1] = 9;
		show_dig[1] --;
	 }
	OS_EXIT_CRITICAL();
	 OSTimeDly(1000);
	}
}
void SHOW_Task(void *pdata)
{
while(1)
{
		SHOW_LED(LED_NUM,show_dig[LED_NUM]);
		LED_NUM ++;
		if(LED_NUM > 3)
			LED_NUM = 0;
        OSTimeDly(2);
}
}

void SHOW_LED(INT8U x,INT8U y)
{
	B_GPIO_Port->BSRR = 0X00000FFF;
	if(x == 0)
		LED0_GPIO_Port->BSRR = 0XF0001000;
	else if(x == 1)
		LED0_GPIO_Port->BSRR = 0XF0002000;
	else if(x == 2)
		LED0_GPIO_Port->BSRR = 0XF0004000;
	else
		LED0_GPIO_Port->BSRR = 0XF0008000;
	if(y == 0)
		B_GPIO_Port->BSRR = 0X007E0000;
	else if(y == 1)
		B_GPIO_Port->BSRR = 0X000C0000;
	else if(y == 2)
		B_GPIO_Port->BSRR = 0X00B60000;
	else if(y == 3)
		B_GPIO_Port->BSRR = 0X009E0000;
	else if(y == 4)
		B_GPIO_Port->BSRR = 0X00CC0000;
	else if(y == 5)
		B_GPIO_Port->BSRR = 0X00DA0000;
	else if(y == 6)
		B_GPIO_Port->BSRR = 0X00FA0000;
	else if(y == 7)
		B_GPIO_Port->BSRR = 0X000E0000;
	else if(y == 8)
		B_GPIO_Port->BSRR = 0X00FE0000;
	else
		B_GPIO_Port->BSRR = 0X005E0000;
}

void Delay_us(uint16_t time)
{
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	while(__HAL_TIM_GET_COUNTER(&htim2) < time);
}

void Delay_ms(uint16_t time)
{

	for(uint16_t i=0;i<time;i++){
		__HAL_TIM_SET_COUNTER(&htim2, 0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < 1000);
	}
}

void GetdigStart(void)
{
	DHT_OUTPUT();
	DHT_GPIO_Port->BSRR = 0x10000000;
	Delay_ms(25);
	DHT_GPIO_Port->BSRR = 0x00001000;
	Delay_us(30);
	DHT_INPUT();
}

INT8U DHT_Get_sig_Start(void)
{
	uint8_t counter = 0;
	while((DHT_IN_DIG!=0) && (counter < 100))
	{
		counter ++;
		Delay_us(1);
	}
	if(counter>=100)
		return 0;
	else
		counter = 0;
	while((DHT_IN_DIG==0) && (counter < 100))
	{
		counter ++;
		Delay_us(1);
	}
	if(counter>=100)
		return 0;
	return 0;
}

void DHT_Get_sig(void)
{
	INT8U dmt;
	for(INT8U i = 0;i<5;i++)
	{
		dmt = 0;
		for(INT8U j = 0;j < 8;j++)
		{
			dmt = dmt << 1;
			dmt = dmt | DHT_Get_bit();
		}
		dig_buff[i] = dmt;
	}
}

INT8U DHT_Get_bit(void)
{
	INT8U counter = 0;
	while((DHT_IN_DIG!=0) && (counter < 100))
	{
		counter ++;
		Delay_us(1);
	}
	counter = 0;
	while((DHT_IN_DIG==0) && (counter < 100))
	{
		counter ++;
		Delay_us(1);
	}
	Delay_us(80);
	if(DHT_IN_DIG)
		return 1;
	else
		return 0;
}

void DHT_change(void)
{
	INT8U tmp;
	tmp = ((dig_buff[0] & 0xF0)>>4)*16 + (dig_buff[0] & 0x0F);
	show_dig[2] = tmp%10;
	show_dig[3] = tmp/10;
	tmp = ((dig_buff[2] & 0xF0)>>4)*16 + (dig_buff[2] & 0x0F);
	show_dig[0] = tmp%10;
	show_dig[1] = tmp/10;
}






/* USER CODE END 4 */

 /**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
